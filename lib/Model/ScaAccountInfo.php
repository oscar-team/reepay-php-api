<?php
/**
 * ScaAccountInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * ScaAccountInfo Class Doc Comment
 *
 * @category Class
 * @description Optional additional information about the Cardholderâ€™s account.
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScaAccountInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScaAccountInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => 'string',
        'changed' => 'string',
        'age_indicator' => 'string',
        'change_indicator' => 'string',
        'password_change' => 'string',
        'password_change_indicator' => 'string',
        'purchase_count' => 'int',
        'add_card_attempts' => 'int',
        'transactions_day' => 'int',
        'transactions_year' => 'int',
        'card_age' => 'string',
        'card_age_indicator' => 'string',
        'shipping_address_usage' => 'string',
        'shipping_address_usage_indicator' => 'string',
        'shipping_name_indicator' => 'bool',
        'suspicious_activity' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => null,
        'changed' => null,
        'age_indicator' => null,
        'change_indicator' => null,
        'password_change' => null,
        'password_change_indicator' => null,
        'purchase_count' => 'int32',
        'add_card_attempts' => 'int32',
        'transactions_day' => 'int32',
        'transactions_year' => 'int32',
        'card_age' => null,
        'card_age_indicator' => null,
        'shipping_address_usage' => null,
        'shipping_address_usage_indicator' => null,
        'shipping_name_indicator' => null,
        'suspicious_activity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'changed' => 'changed',
        'age_indicator' => 'age_indicator',
        'change_indicator' => 'change_indicator',
        'password_change' => 'password_change',
        'password_change_indicator' => 'password_change_indicator',
        'purchase_count' => 'purchase_count',
        'add_card_attempts' => 'add_card_attempts',
        'transactions_day' => 'transactions_day',
        'transactions_year' => 'transactions_year',
        'card_age' => 'card_age',
        'card_age_indicator' => 'card_age_indicator',
        'shipping_address_usage' => 'shipping_address_usage',
        'shipping_address_usage_indicator' => 'shipping_address_usage_indicator',
        'shipping_name_indicator' => 'shipping_name_indicator',
        'suspicious_activity' => 'suspicious_activity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'changed' => 'setChanged',
        'age_indicator' => 'setAgeIndicator',
        'change_indicator' => 'setChangeIndicator',
        'password_change' => 'setPasswordChange',
        'password_change_indicator' => 'setPasswordChangeIndicator',
        'purchase_count' => 'setPurchaseCount',
        'add_card_attempts' => 'setAddCardAttempts',
        'transactions_day' => 'setTransactionsDay',
        'transactions_year' => 'setTransactionsYear',
        'card_age' => 'setCardAge',
        'card_age_indicator' => 'setCardAgeIndicator',
        'shipping_address_usage' => 'setShippingAddressUsage',
        'shipping_address_usage_indicator' => 'setShippingAddressUsageIndicator',
        'shipping_name_indicator' => 'setShippingNameIndicator',
        'suspicious_activity' => 'setSuspiciousActivity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'changed' => 'getChanged',
        'age_indicator' => 'getAgeIndicator',
        'change_indicator' => 'getChangeIndicator',
        'password_change' => 'getPasswordChange',
        'password_change_indicator' => 'getPasswordChangeIndicator',
        'purchase_count' => 'getPurchaseCount',
        'add_card_attempts' => 'getAddCardAttempts',
        'transactions_day' => 'getTransactionsDay',
        'transactions_year' => 'getTransactionsYear',
        'card_age' => 'getCardAge',
        'card_age_indicator' => 'getCardAgeIndicator',
        'shipping_address_usage' => 'getShippingAddressUsage',
        'shipping_address_usage_indicator' => 'getShippingAddressUsageIndicator',
        'shipping_name_indicator' => 'getShippingNameIndicator',
        'suspicious_activity' => 'getSuspiciousActivity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AGE_INDICATOR_GUEST_ACCOUNT = 'guest_account';
    const AGE_INDICATOR_THIS_TRANSACTION = 'this_transaction';
    const AGE_INDICATOR_LESS_THAN_30_DAYS = 'less_than_30_days';
    const AGE_INDICATOR_FROM_30_TO_60_DAYS = 'from_30_to_60_days';
    const AGE_INDICATOR_MORE_THAN_60_DAYS = 'more_than_60_days';
    const CHANGE_INDICATOR_THIS_TRANSACTION = 'this_transaction';
    const CHANGE_INDICATOR_LESS_THAN_30_DAYS = 'less_than_30_days';
    const CHANGE_INDICATOR_FROM_30_TO_60_DAYS = 'from_30_to_60_days';
    const CHANGE_INDICATOR_MORE_THAN_60_DAYS = 'more_than_60_days';
    const PASSWORD_CHANGE_INDICATOR_NO_CHANGE = 'no_change';
    const PASSWORD_CHANGE_INDICATOR_THIS_TRANSACTION = 'this_transaction';
    const PASSWORD_CHANGE_INDICATOR_LESS_THAN_30_DAYS = 'less_than_30_days';
    const PASSWORD_CHANGE_INDICATOR_FROM_30_TO_60_DAYS = 'from_30_to_60_days';
    const PASSWORD_CHANGE_INDICATOR_MORE_THAN_60_DAYS = 'more_than_60_days';
    const CARD_AGE_INDICATOR_THIS_TRANSACTION = 'this_transaction';
    const CARD_AGE_INDICATOR_LESS_THAN_30_DAYS = 'less_than_30_days';
    const CARD_AGE_INDICATOR_FROM_30_TO_60_DAYS = 'from_30_to_60_days';
    const CARD_AGE_INDICATOR_MORE_THAN_60_DAYS = 'more_than_60_days';
    const SHIPPING_ADDRESS_USAGE_INDICATOR_THIS_TRANSACTION = 'this_transaction';
    const SHIPPING_ADDRESS_USAGE_INDICATOR_LESS_THAN_30_DAYS = 'less_than_30_days';
    const SHIPPING_ADDRESS_USAGE_INDICATOR_FROM_30_TO_60_DAYS = 'from_30_to_60_days';
    const SHIPPING_ADDRESS_USAGE_INDICATOR_MORE_THAN_60_DAYS = 'more_than_60_days';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAgeIndicatorAllowableValues()
    {
        return [
            self::AGE_INDICATOR_GUEST_ACCOUNT,
            self::AGE_INDICATOR_THIS_TRANSACTION,
            self::AGE_INDICATOR_LESS_THAN_30_DAYS,
            self::AGE_INDICATOR_FROM_30_TO_60_DAYS,
            self::AGE_INDICATOR_MORE_THAN_60_DAYS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChangeIndicatorAllowableValues()
    {
        return [
            self::CHANGE_INDICATOR_THIS_TRANSACTION,
            self::CHANGE_INDICATOR_LESS_THAN_30_DAYS,
            self::CHANGE_INDICATOR_FROM_30_TO_60_DAYS,
            self::CHANGE_INDICATOR_MORE_THAN_60_DAYS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPasswordChangeIndicatorAllowableValues()
    {
        return [
            self::PASSWORD_CHANGE_INDICATOR_NO_CHANGE,
            self::PASSWORD_CHANGE_INDICATOR_THIS_TRANSACTION,
            self::PASSWORD_CHANGE_INDICATOR_LESS_THAN_30_DAYS,
            self::PASSWORD_CHANGE_INDICATOR_FROM_30_TO_60_DAYS,
            self::PASSWORD_CHANGE_INDICATOR_MORE_THAN_60_DAYS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardAgeIndicatorAllowableValues()
    {
        return [
            self::CARD_AGE_INDICATOR_THIS_TRANSACTION,
            self::CARD_AGE_INDICATOR_LESS_THAN_30_DAYS,
            self::CARD_AGE_INDICATOR_FROM_30_TO_60_DAYS,
            self::CARD_AGE_INDICATOR_MORE_THAN_60_DAYS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingAddressUsageIndicatorAllowableValues()
    {
        return [
            self::SHIPPING_ADDRESS_USAGE_INDICATOR_THIS_TRANSACTION,
            self::SHIPPING_ADDRESS_USAGE_INDICATOR_LESS_THAN_30_DAYS,
            self::SHIPPING_ADDRESS_USAGE_INDICATOR_FROM_30_TO_60_DAYS,
            self::SHIPPING_ADDRESS_USAGE_INDICATOR_MORE_THAN_60_DAYS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['changed'] = isset($data['changed']) ? $data['changed'] : null;
        $this->container['age_indicator'] = isset($data['age_indicator']) ? $data['age_indicator'] : null;
        $this->container['change_indicator'] = isset($data['change_indicator']) ? $data['change_indicator'] : null;
        $this->container['password_change'] = isset($data['password_change']) ? $data['password_change'] : null;
        $this->container['password_change_indicator'] = isset($data['password_change_indicator']) ? $data['password_change_indicator'] : null;
        $this->container['purchase_count'] = isset($data['purchase_count']) ? $data['purchase_count'] : null;
        $this->container['add_card_attempts'] = isset($data['add_card_attempts']) ? $data['add_card_attempts'] : null;
        $this->container['transactions_day'] = isset($data['transactions_day']) ? $data['transactions_day'] : null;
        $this->container['transactions_year'] = isset($data['transactions_year']) ? $data['transactions_year'] : null;
        $this->container['card_age'] = isset($data['card_age']) ? $data['card_age'] : null;
        $this->container['card_age_indicator'] = isset($data['card_age_indicator']) ? $data['card_age_indicator'] : null;
        $this->container['shipping_address_usage'] = isset($data['shipping_address_usage']) ? $data['shipping_address_usage'] : null;
        $this->container['shipping_address_usage_indicator'] = isset($data['shipping_address_usage_indicator']) ? $data['shipping_address_usage_indicator'] : null;
        $this->container['shipping_name_indicator'] = isset($data['shipping_name_indicator']) ? $data['shipping_name_indicator'] : null;
        $this->container['suspicious_activity'] = isset($data['suspicious_activity']) ? $data['suspicious_activity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAgeIndicatorAllowableValues();
        if (!is_null($this->container['age_indicator']) && !in_array($this->container['age_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'age_indicator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChangeIndicatorAllowableValues();
        if (!is_null($this->container['change_indicator']) && !in_array($this->container['change_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'change_indicator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPasswordChangeIndicatorAllowableValues();
        if (!is_null($this->container['password_change_indicator']) && !in_array($this->container['password_change_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'password_change_indicator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardAgeIndicatorAllowableValues();
        if (!is_null($this->container['card_age_indicator']) && !in_array($this->container['card_age_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_age_indicator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShippingAddressUsageIndicatorAllowableValues();
        if (!is_null($this->container['shipping_address_usage_indicator']) && !in_array($this->container['shipping_address_usage_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipping_address_usage_indicator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created Date that the cardholder created the account. Format: `yyyy-MM-dd`
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets changed
     *
     * @return string
     */
    public function getChanged()
    {
        return $this->container['changed'];
    }

    /**
     * Sets changed
     *
     * @param string $changed Date that the cardholderâ€™s account was last changed, including Billing or Shipping address, new payment method, or new user(s) added. Format: `yyyy-MM-dd`
     *
     * @return $this
     */
    public function setChanged($changed)
    {
        $this->container['changed'] = $changed;

        return $this;
    }

    /**
     * Gets age_indicator
     *
     * @return string
     */
    public function getAgeIndicator()
    {
        return $this->container['age_indicator'];
    }

    /**
     * Sets age_indicator
     *
     * @param string $age_indicator Length of time that the cardholder has had the account. One off: `guest_account` - No account (guest check-out), `this_transaction` - Created during this transaction, `less_than_30_days` - Less than 30 days, `from_30_to_60_days` - 30âˆ’60 days, `more_than_60_days` - More than 60 days
     *
     * @return $this
     */
    public function setAgeIndicator($age_indicator)
    {
        $allowedValues = $this->getAgeIndicatorAllowableValues();
        if (!is_null($age_indicator) && !in_array($age_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'age_indicator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['age_indicator'] = $age_indicator;

        return $this;
    }

    /**
     * Gets change_indicator
     *
     * @return string
     */
    public function getChangeIndicator()
    {
        return $this->container['change_indicator'];
    }

    /**
     * Sets change_indicator
     *
     * @param string $change_indicator Length of time since the cardholderâ€™s account information was last changed, including Billing or Shipping address, new payment account, or new user(s) added. One off: `this_transaction` - Changed during this transaction, `less_than_30_days` - Less than 30 days, `from_30_to_60_days` - 30âˆ’60 days, `more_than_60_days` - More than 60 days
     *
     * @return $this
     */
    public function setChangeIndicator($change_indicator)
    {
        $allowedValues = $this->getChangeIndicatorAllowableValues();
        if (!is_null($change_indicator) && !in_array($change_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'change_indicator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['change_indicator'] = $change_indicator;

        return $this;
    }

    /**
     * Gets password_change
     *
     * @return string
     */
    public function getPasswordChange()
    {
        return $this->container['password_change'];
    }

    /**
     * Sets password_change
     *
     * @param string $password_change Date that cardholderâ€™s account had a password change or account reset. Format: `yyyy-MM-dd`
     *
     * @return $this
     */
    public function setPasswordChange($password_change)
    {
        $this->container['password_change'] = $password_change;

        return $this;
    }

    /**
     * Gets password_change_indicator
     *
     * @return string
     */
    public function getPasswordChangeIndicator()
    {
        return $this->container['password_change_indicator'];
    }

    /**
     * Sets password_change_indicator
     *
     * @param string $password_change_indicator Indicates the length of time since the cardholderâ€™s account had a password change or account reset. One off: `no_change` - No change, `this_transaction` - Changed during this transaction, `less_than_30_days` - Less than 30 days, `from_30_to_60_days` - 30âˆ’60 days, `more_than_60_days` - More than 60 days
     *
     * @return $this
     */
    public function setPasswordChangeIndicator($password_change_indicator)
    {
        $allowedValues = $this->getPasswordChangeIndicatorAllowableValues();
        if (!is_null($password_change_indicator) && !in_array($password_change_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'password_change_indicator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['password_change_indicator'] = $password_change_indicator;

        return $this;
    }

    /**
     * Gets purchase_count
     *
     * @return int
     */
    public function getPurchaseCount()
    {
        return $this->container['purchase_count'];
    }

    /**
     * Sets purchase_count
     *
     * @param int $purchase_count Number of purchases with this cardholder account during the previous six months.
     *
     * @return $this
     */
    public function setPurchaseCount($purchase_count)
    {
        $this->container['purchase_count'] = $purchase_count;

        return $this;
    }

    /**
     * Gets add_card_attempts
     *
     * @return int
     */
    public function getAddCardAttempts()
    {
        return $this->container['add_card_attempts'];
    }

    /**
     * Sets add_card_attempts
     *
     * @param int $add_card_attempts Number of Add Card attempts in the last 24 hours.
     *
     * @return $this
     */
    public function setAddCardAttempts($add_card_attempts)
    {
        $this->container['add_card_attempts'] = $add_card_attempts;

        return $this;
    }

    /**
     * Gets transactions_day
     *
     * @return int
     */
    public function getTransactionsDay()
    {
        return $this->container['transactions_day'];
    }

    /**
     * Sets transactions_day
     *
     * @param int $transactions_day Number of transactions (successful and abandoned) for this cardholder account (across payment methods) in the previous 24 hours
     *
     * @return $this
     */
    public function setTransactionsDay($transactions_day)
    {
        $this->container['transactions_day'] = $transactions_day;

        return $this;
    }

    /**
     * Gets transactions_year
     *
     * @return int
     */
    public function getTransactionsYear()
    {
        return $this->container['transactions_year'];
    }

    /**
     * Sets transactions_year
     *
     * @param int $transactions_year Number of transactions (successful and abandoned) for this cardholder account (across payment methods) in the previous year
     *
     * @return $this
     */
    public function setTransactionsYear($transactions_year)
    {
        $this->container['transactions_year'] = $transactions_year;

        return $this;
    }

    /**
     * Gets card_age
     *
     * @return string
     */
    public function getCardAge()
    {
        return $this->container['card_age'];
    }

    /**
     * Sets card_age
     *
     * @param string $card_age For customer initiated card-on-file session, the date that the used card was added. Provided by Reepay but can be overridden. Format: `yyyy-MM-dd`.
     *
     * @return $this
     */
    public function setCardAge($card_age)
    {
        $this->container['card_age'] = $card_age;

        return $this;
    }

    /**
     * Gets card_age_indicator
     *
     * @return string
     */
    public function getCardAgeIndicator()
    {
        return $this->container['card_age_indicator'];
    }

    /**
     * Sets card_age_indicator
     *
     * @param string $card_age_indicator For customer initiated card-on-file session, indicates the length of time that the card was enrolled in the cardholderâ€™s account. Provided by Reepay but can be overridden. One off: `this_transaction` - Changed during this transaction, `less_than_30_days` - Less than 30 days, `from_30_to_60_days` - 30âˆ’60 days, `more_than_60_days` - More than 60 days
     *
     * @return $this
     */
    public function setCardAgeIndicator($card_age_indicator)
    {
        $allowedValues = $this->getCardAgeIndicatorAllowableValues();
        if (!is_null($card_age_indicator) && !in_array($card_age_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_age_indicator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_age_indicator'] = $card_age_indicator;

        return $this;
    }

    /**
     * Gets shipping_address_usage
     *
     * @return string
     */
    public function getShippingAddressUsage()
    {
        return $this->container['shipping_address_usage'];
    }

    /**
     * Sets shipping_address_usage
     *
     * @param string $shipping_address_usage Date when the shipping address used for this transaction was first used. Format: `yyyy-MM-dd`.
     *
     * @return $this
     */
    public function setShippingAddressUsage($shipping_address_usage)
    {
        $this->container['shipping_address_usage'] = $shipping_address_usage;

        return $this;
    }

    /**
     * Gets shipping_address_usage_indicator
     *
     * @return string
     */
    public function getShippingAddressUsageIndicator()
    {
        return $this->container['shipping_address_usage_indicator'];
    }

    /**
     * Sets shipping_address_usage_indicator
     *
     * @param string $shipping_address_usage_indicator Indicates when the shipping address used for this transaction was first used. One off: `this_transaction` - During this transaction, `less_than_30_days` - Less than 30 days, `from_30_to_60_days` - 30âˆ’60 days, `more_than_60_days` - More than 60 days
     *
     * @return $this
     */
    public function setShippingAddressUsageIndicator($shipping_address_usage_indicator)
    {
        $allowedValues = $this->getShippingAddressUsageIndicatorAllowableValues();
        if (!is_null($shipping_address_usage_indicator) && !in_array($shipping_address_usage_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipping_address_usage_indicator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_address_usage_indicator'] = $shipping_address_usage_indicator;

        return $this;
    }

    /**
     * Gets shipping_name_indicator
     *
     * @return bool
     */
    public function getShippingNameIndicator()
    {
        return $this->container['shipping_name_indicator'];
    }

    /**
     * Sets shipping_name_indicator
     *
     * @param bool $shipping_name_indicator Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction.
     *
     * @return $this
     */
    public function setShippingNameIndicator($shipping_name_indicator)
    {
        $this->container['shipping_name_indicator'] = $shipping_name_indicator;

        return $this;
    }

    /**
     * Gets suspicious_activity
     *
     * @return bool
     */
    public function getSuspiciousActivity()
    {
        return $this->container['suspicious_activity'];
    }

    /**
     * Sets suspicious_activity
     *
     * @param bool $suspicious_activity Indicates if there has been experienced suspicious activity (including previous fraud) on the cardholder account.
     *
     * @return $this
     */
    public function setSuspiciousActivity($suspicious_activity)
    {
        $this->container['suspicious_activity'] = $suspicious_activity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
