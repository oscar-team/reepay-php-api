<?php
/**
 * SubscriptionChangeJournal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * SubscriptionChangeJournal Class Doc Comment
 *
 * @category Class
 * @description Object describing the result of a subscription change
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionChangeJournal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionChangeJournal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'change' => '\Reepay\Model\SubscriptionChange',
        'invoice' => '\Reepay\Model\Invoice',
        'new_plan' => '\Reepay\Model\Plan',
        'compensation_amount' => 'int',
        'compensation_invoice' => '\Reepay\Model\Invoice',
        'changed_period_start_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'change' => null,
        'invoice' => null,
        'new_plan' => null,
        'compensation_amount' => 'int32',
        'compensation_invoice' => null,
        'changed_period_start_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'change' => 'change',
        'invoice' => 'invoice',
        'new_plan' => 'new_plan',
        'compensation_amount' => 'compensation_amount',
        'compensation_invoice' => 'compensation_invoice',
        'changed_period_start_date' => 'changed_period_start_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'change' => 'setChange',
        'invoice' => 'setInvoice',
        'new_plan' => 'setNewPlan',
        'compensation_amount' => 'setCompensationAmount',
        'compensation_invoice' => 'setCompensationInvoice',
        'changed_period_start_date' => 'setChangedPeriodStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'change' => 'getChange',
        'invoice' => 'getInvoice',
        'new_plan' => 'getNewPlan',
        'compensation_amount' => 'getCompensationAmount',
        'compensation_invoice' => 'getCompensationInvoice',
        'changed_period_start_date' => 'getChangedPeriodStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['change'] = isset($data['change']) ? $data['change'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['new_plan'] = isset($data['new_plan']) ? $data['new_plan'] : null;
        $this->container['compensation_amount'] = isset($data['compensation_amount']) ? $data['compensation_amount'] : null;
        $this->container['compensation_invoice'] = isset($data['compensation_invoice']) ? $data['compensation_invoice'] : null;
        $this->container['changed_period_start_date'] = isset($data['changed_period_start_date']) ? $data['changed_period_start_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets change
     *
     * @return \Reepay\Model\SubscriptionChange
     */
    public function getChange()
    {
        return $this->container['change'];
    }

    /**
     * Sets change
     *
     * @param \Reepay\Model\SubscriptionChange $change change
     *
     * @return $this
     */
    public function setChange($change)
    {
        $this->container['change'] = $change;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \Reepay\Model\Invoice
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \Reepay\Model\Invoice $invoice invoice
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets new_plan
     *
     * @return \Reepay\Model\Plan
     */
    public function getNewPlan()
    {
        return $this->container['new_plan'];
    }

    /**
     * Sets new_plan
     *
     * @param \Reepay\Model\Plan $new_plan new_plan
     *
     * @return $this
     */
    public function setNewPlan($new_plan)
    {
        $this->container['new_plan'] = $new_plan;

        return $this;
    }

    /**
     * Gets compensation_amount
     *
     * @return int
     */
    public function getCompensationAmount()
    {
        return $this->container['compensation_amount'];
    }

    /**
     * Sets compensation_amount
     *
     * @param int $compensation_amount If compensation the compensation amount
     *
     * @return $this
     */
    public function setCompensationAmount($compensation_amount)
    {
        $this->container['compensation_amount'] = $compensation_amount;

        return $this;
    }

    /**
     * Gets compensation_invoice
     *
     * @return \Reepay\Model\Invoice
     */
    public function getCompensationInvoice()
    {
        return $this->container['compensation_invoice'];
    }

    /**
     * Sets compensation_invoice
     *
     * @param \Reepay\Model\Invoice $compensation_invoice compensation_invoice
     *
     * @return $this
     */
    public function setCompensationInvoice($compensation_invoice)
    {
        $this->container['compensation_invoice'] = $compensation_invoice;

        return $this;
    }

    /**
     * Gets changed_period_start_date
     *
     * @return \DateTime
     */
    public function getChangedPeriodStartDate()
    {
        return $this->container['changed_period_start_date'];
    }

    /**
     * Sets changed_period_start_date
     *
     * @param \DateTime $changed_period_start_date If the change resulted in a new billing cycle this is the start date used
     *
     * @return $this
     */
    public function setChangedPeriodStartDate($changed_period_start_date)
    {
        $this->container['changed_period_start_date'] = $changed_period_start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
