<?php
/**
 * PproError
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * PproError Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PproError implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PproError';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_state' => 'string',
        'transaction_error' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_state' => null,
        'transaction_error' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_state' => 'transactionState',
        'transaction_error' => 'transactionError'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_state' => 'setTransactionState',
        'transaction_error' => 'setTransactionError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_state' => 'getTransactionState',
        'transaction_error' => 'getTransactionError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSACTION_STATE_PENDING = 'PENDING';
    const TRANSACTION_STATE_ACCEPTED = 'ACCEPTED';
    const TRANSACTION_STATE_SOFT_DECLINED = 'SOFT_DECLINED';
    const TRANSACTION_STATE_HARD_DECLINED = 'HARD_DECLINED';
    const TRANSACTION_STATE_PROCESSING_ERROR = 'PROCESSING_ERROR';
    const TRANSACTION_ERROR_CREDIT_CARD_EXPIRED = 'CREDIT_CARD_EXPIRED';
    const TRANSACTION_ERROR_INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';
    const TRANSACTION_ERROR_DECLINED_BY_ACQUIRER = 'DECLINED_BY_ACQUIRER';
    const TRANSACTION_ERROR_ACQUIRER_COMMUNICATION_ERROR = 'ACQUIRER_COMMUNICATION_ERROR';
    const TRANSACTION_ERROR_ACQUIRER_ERROR = 'ACQUIRER_ERROR';
    const TRANSACTION_ERROR_ACQUIRER_INTEGRATION_ERROR = 'ACQUIRER_INTEGRATION_ERROR';
    const TRANSACTION_ERROR_ACQUIRER_AUTHENTICATION_ERROR = 'ACQUIRER_AUTHENTICATION_ERROR';
    const TRANSACTION_ERROR_ACQUIRER_CONFIGURATION_ERROR = 'ACQUIRER_CONFIGURATION_ERROR';
    const TRANSACTION_ERROR_ACQUIRER_REJECTED_ERROR = 'ACQUIRER_REJECTED_ERROR';
    const TRANSACTION_ERROR_CARD_IDENTIFIER_NOT_FOUND = 'CARD_IDENTIFIER_NOT_FOUND';
    const TRANSACTION_ERROR_REFUND_AMOUNT_TOO_HIGH = 'REFUND_AMOUNT_TOO_HIGH';
    const TRANSACTION_ERROR_CREDIT_CARD_LOST_OR_STOLEN = 'CREDIT_CARD_LOST_OR_STOLEN';
    const TRANSACTION_ERROR_CREDIT_CARD_SUSPECTED_FRAUD = 'CREDIT_CARD_SUSPECTED_FRAUD';
    const TRANSACTION_ERROR_AUTHORIZATION_EXPIRED = 'AUTHORIZATION_EXPIRED';
    const TRANSACTION_ERROR_AUTHORIZATION_AMOUNT_EXCEEDED = 'AUTHORIZATION_AMOUNT_EXCEEDED';
    const TRANSACTION_ERROR_AUTHORIZATION_VOIDED = 'AUTHORIZATION_VOIDED';
    const TRANSACTION_ERROR_SETTLE_BLOCKED = 'SETTLE_BLOCKED';
    const TRANSACTION_ERROR_SCA_REQUIRED = 'SCA_REQUIRED';
    const TRANSACTION_ERROR_RISK_FILTER_BLOCK = 'RISK_FILTER_BLOCK';
    const TRANSACTION_ERROR_FRAUD_BLOCK = 'FRAUD_BLOCK';
    const TRANSACTION_ERROR_EMV_TOKEN_DELETED = 'EMV_TOKEN_DELETED';
    const TRANSACTION_ERROR_EMV_TOKEN_SUSPENDED = 'EMV_TOKEN_SUSPENDED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionStateAllowableValues()
    {
        return [
            self::TRANSACTION_STATE_PENDING,
            self::TRANSACTION_STATE_ACCEPTED,
            self::TRANSACTION_STATE_SOFT_DECLINED,
            self::TRANSACTION_STATE_HARD_DECLINED,
            self::TRANSACTION_STATE_PROCESSING_ERROR,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionErrorAllowableValues()
    {
        return [
            self::TRANSACTION_ERROR_CREDIT_CARD_EXPIRED
            self::TRANSACTION_ERROR_INSUFFICIENT_FUNDS
            self::TRANSACTION_ERROR_DECLINED_BY_ACQUIRER
            self::TRANSACTION_ERROR_ACQUIRER_COMMUNICATION_ERROR
            self::TRANSACTION_ERROR_ACQUIRER_ERROR
            self::TRANSACTION_ERROR_ACQUIRER_INTEGRATION_ERROR
            self::TRANSACTION_ERROR_ACQUIRER_AUTHENTICATION_ERROR
            self::TRANSACTION_ERROR_ACQUIRER_CONFIGURATION_ERROR
            self::TRANSACTION_ERROR_ACQUIRER_REJECTED_ERROR
            self::TRANSACTION_ERROR_CARD_IDENTIFIER_NOT_FOUND
            self::TRANSACTION_ERROR_REFUND_AMOUNT_TOO_HIGH
            self::TRANSACTION_ERROR_CREDIT_CARD_LOST_OR_STOLEN
            self::TRANSACTION_ERROR_CREDIT_CARD_SUSPECTED_FRAUD
            self::TRANSACTION_ERROR_AUTHORIZATION_EXPIRED
            self::TRANSACTION_ERROR_AUTHORIZATION_AMOUNT_EXCEEDED
            self::TRANSACTION_ERROR_AUTHORIZATION_VOIDED
            self::TRANSACTION_ERROR_SETTLE_BLOCKED
            self::TRANSACTION_ERROR_SCA_REQUIRED
            self::TRANSACTION_ERROR_RISK_FILTER_BLOCK
            self::TRANSACTION_ERROR_FRAUD_BLOCK
            self::TRANSACTION_ERROR_EMV_TOKEN_DELETED
            self::TRANSACTION_ERROR_EMV_TOKEN_SUSPENDED
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_state'] = isset($data['transaction_state']) ? $data['transaction_state'] : null;
        $this->container['transaction_error'] = isset($data['transaction_error']) ? $data['transaction_error'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransactionStateAllowableValues();
        if (!is_null($this->container['transaction_state']) && !in_array($this->container['transaction_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transaction_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransactionErrorAllowableValues();
        if (!is_null($this->container['transaction_error']) && !in_array($this->container['transaction_error'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transaction_error', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_state
     *
     * @return string
     */
    public function getTransactionState()
    {
        return $this->container['transaction_state'];
    }

    /**
     * Sets transaction_state
     *
     * @param string $transaction_state transaction_state
     *
     * @return $this
     */
    public function setTransactionState($transaction_state)
    {
        $allowedValues = $this->getTransactionStateAllowableValues();
        if (!is_null($transaction_state) && !in_array($transaction_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transaction_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_state'] = $transaction_state;

        return $this;
    }

    /**
     * Gets transaction_error
     *
     * @return string
     */
    public function getTransactionError()
    {
        return $this->container['transaction_error'];
    }

    /**
     * Sets transaction_error
     *
     * @param string $transaction_error transaction_error
     *
     * @return $this
     */
    public function setTransactionError($transaction_error)
    {
        $allowedValues = $this->getTransactionErrorAllowableValues();
        if (!is_null($transaction_error) && !in_array($transaction_error, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transaction_error', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_error'] = $transaction_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
