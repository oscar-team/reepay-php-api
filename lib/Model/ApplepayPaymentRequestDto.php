<?php
/**
 * ApplepayPaymentRequestDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * ApplepayPaymentRequestDto Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplepayPaymentRequestDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplepayPaymentRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auth_url' => 'string',
        'country_code' => 'string',
        'supported_networks' => 'string[]',
        'merchant_capabilities' => 'string',
        'currency_code' => 'string',
        'total' => '\Reepay\Model\AppleLineItem',
        'create_session_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auth_url' => null,
        'country_code' => null,
        'supported_networks' => null,
        'merchant_capabilities' => null,
        'currency_code' => null,
        'total' => null,
        'create_session_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auth_url' => 'authUrl',
        'country_code' => 'countryCode',
        'supported_networks' => 'supportedNetworks',
        'merchant_capabilities' => 'merchantCapabilities',
        'currency_code' => 'currencyCode',
        'total' => 'total',
        'create_session_url' => 'createSessionUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auth_url' => 'setAuthUrl',
        'country_code' => 'setCountryCode',
        'supported_networks' => 'setSupportedNetworks',
        'merchant_capabilities' => 'setMerchantCapabilities',
        'currency_code' => 'setCurrencyCode',
        'total' => 'setTotal',
        'create_session_url' => 'setCreateSessionUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auth_url' => 'getAuthUrl',
        'country_code' => 'getCountryCode',
        'supported_networks' => 'getSupportedNetworks',
        'merchant_capabilities' => 'getMerchantCapabilities',
        'currency_code' => 'getCurrencyCode',
        'total' => 'getTotal',
        'create_session_url' => 'getCreateSessionUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auth_url'] = isset($data['auth_url']) ? $data['auth_url'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['supported_networks'] = isset($data['supported_networks']) ? $data['supported_networks'] : null;
        $this->container['merchant_capabilities'] = isset($data['merchant_capabilities']) ? $data['merchant_capabilities'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['create_session_url'] = isset($data['create_session_url']) ? $data['create_session_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auth_url
     *
     * @return string
     */
    public function getAuthUrl()
    {
        return $this->container['auth_url'];
    }

    /**
     * Sets auth_url
     *
     * @param string $auth_url auth_url
     *
     * @return $this
     */
    public function setAuthUrl($auth_url)
    {
        $this->container['auth_url'] = $auth_url;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets supported_networks
     *
     * @return string[]
     */
    public function getSupportedNetworks()
    {
        return $this->container['supported_networks'];
    }

    /**
     * Sets supported_networks
     *
     * @param string[] $supported_networks supported_networks
     *
     * @return $this
     */
    public function setSupportedNetworks($supported_networks)
    {
        $this->container['supported_networks'] = $supported_networks;

        return $this;
    }

    /**
     * Gets merchant_capabilities
     *
     * @return string
     */
    public function getMerchantCapabilities()
    {
        return $this->container['merchant_capabilities'];
    }

    /**
     * Sets merchant_capabilities
     *
     * @param string $merchant_capabilities merchant_capabilities
     *
     * @return $this
     */
    public function setMerchantCapabilities($merchant_capabilities)
    {
        $this->container['merchant_capabilities'] = $merchant_capabilities;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets total
     *
     * @return \Reepay\Model\AppleLineItem
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param \Reepay\Model\AppleLineItem $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets create_session_url
     *
     * @return string
     */
    public function getCreateSessionUrl()
    {
        return $this->container['create_session_url'];
    }

    /**
     * Sets create_session_url
     *
     * @param string $create_session_url create_session_url
     *
     * @return $this
     */
    public function setCreateSessionUrl($create_session_url)
    {
        $this->container['create_session_url'] = $create_session_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
