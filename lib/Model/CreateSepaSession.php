<?php
/**
 * CreateSepaSession
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * CreateSepaSession Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateSepaSession implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateSepaSession';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'debtor_name' => 'string',
        'debtor_address' => 'string',
        'debtor_postal_code' => 'string',
        'debtor_city' => 'string',
        'debtor_country' => 'string',
        'debtor_iban' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'debtor_name' => null,
        'debtor_address' => null,
        'debtor_postal_code' => null,
        'debtor_city' => null,
        'debtor_country' => null,
        'debtor_iban' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'debtor_name' => 'debtorName',
        'debtor_address' => 'debtorAddress',
        'debtor_postal_code' => 'debtorPostalCode',
        'debtor_city' => 'debtorCity',
        'debtor_country' => 'debtorCountry',
        'debtor_iban' => 'debtorIban'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'debtor_name' => 'setDebtorName',
        'debtor_address' => 'setDebtorAddress',
        'debtor_postal_code' => 'setDebtorPostalCode',
        'debtor_city' => 'setDebtorCity',
        'debtor_country' => 'setDebtorCountry',
        'debtor_iban' => 'setDebtorIban'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'debtor_name' => 'getDebtorName',
        'debtor_address' => 'getDebtorAddress',
        'debtor_postal_code' => 'getDebtorPostalCode',
        'debtor_city' => 'getDebtorCity',
        'debtor_country' => 'getDebtorCountry',
        'debtor_iban' => 'getDebtorIban'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DEBTOR_COUNTRY_UNDEFINED = 'UNDEFINED';
    const DEBTOR_COUNTRY_AC = 'AC';
    const DEBTOR_COUNTRY_AD = 'AD';
    const DEBTOR_COUNTRY_AE = 'AE';
    const DEBTOR_COUNTRY_AF = 'AF';
    const DEBTOR_COUNTRY_AG = 'AG';
    const DEBTOR_COUNTRY_AI = 'AI';
    const DEBTOR_COUNTRY_AL = 'AL';
    const DEBTOR_COUNTRY_AM = 'AM';
    const DEBTOR_COUNTRY_AN = 'AN';
    const DEBTOR_COUNTRY_AO = 'AO';
    const DEBTOR_COUNTRY_AQ = 'AQ';
    const DEBTOR_COUNTRY_AR = 'AR';
    const DEBTOR_COUNTRY__AS = 'AS';
    const DEBTOR_COUNTRY_AT = 'AT';
    const DEBTOR_COUNTRY_AU = 'AU';
    const DEBTOR_COUNTRY_AW = 'AW';
    const DEBTOR_COUNTRY_AX = 'AX';
    const DEBTOR_COUNTRY_AZ = 'AZ';
    const DEBTOR_COUNTRY_BA = 'BA';
    const DEBTOR_COUNTRY_BB = 'BB';
    const DEBTOR_COUNTRY_BD = 'BD';
    const DEBTOR_COUNTRY_BE = 'BE';
    const DEBTOR_COUNTRY_BF = 'BF';
    const DEBTOR_COUNTRY_BG = 'BG';
    const DEBTOR_COUNTRY_BH = 'BH';
    const DEBTOR_COUNTRY_BI = 'BI';
    const DEBTOR_COUNTRY_BJ = 'BJ';
    const DEBTOR_COUNTRY_BL = 'BL';
    const DEBTOR_COUNTRY_BM = 'BM';
    const DEBTOR_COUNTRY_BN = 'BN';
    const DEBTOR_COUNTRY_BO = 'BO';
    const DEBTOR_COUNTRY_BQ = 'BQ';
    const DEBTOR_COUNTRY_BR = 'BR';
    const DEBTOR_COUNTRY_BS = 'BS';
    const DEBTOR_COUNTRY_BT = 'BT';
    const DEBTOR_COUNTRY_BU = 'BU';
    const DEBTOR_COUNTRY_BV = 'BV';
    const DEBTOR_COUNTRY_BW = 'BW';
    const DEBTOR_COUNTRY_BY = 'BY';
    const DEBTOR_COUNTRY_BZ = 'BZ';
    const DEBTOR_COUNTRY_CA = 'CA';
    const DEBTOR_COUNTRY_CC = 'CC';
    const DEBTOR_COUNTRY_CD = 'CD';
    const DEBTOR_COUNTRY_CF = 'CF';
    const DEBTOR_COUNTRY_CG = 'CG';
    const DEBTOR_COUNTRY_CH = 'CH';
    const DEBTOR_COUNTRY_CI = 'CI';
    const DEBTOR_COUNTRY_CK = 'CK';
    const DEBTOR_COUNTRY_CL = 'CL';
    const DEBTOR_COUNTRY_CM = 'CM';
    const DEBTOR_COUNTRY_CN = 'CN';
    const DEBTOR_COUNTRY_CO = 'CO';
    const DEBTOR_COUNTRY_CP = 'CP';
    const DEBTOR_COUNTRY_CR = 'CR';
    const DEBTOR_COUNTRY_CS = 'CS';
    const DEBTOR_COUNTRY_CU = 'CU';
    const DEBTOR_COUNTRY_CV = 'CV';
    const DEBTOR_COUNTRY_CW = 'CW';
    const DEBTOR_COUNTRY_CX = 'CX';
    const DEBTOR_COUNTRY_CY = 'CY';
    const DEBTOR_COUNTRY_CZ = 'CZ';
    const DEBTOR_COUNTRY_DE = 'DE';
    const DEBTOR_COUNTRY_DG = 'DG';
    const DEBTOR_COUNTRY_DJ = 'DJ';
    const DEBTOR_COUNTRY_DK = 'DK';
    const DEBTOR_COUNTRY_DM = 'DM';
    const DEBTOR_COUNTRY__DO = 'DO';
    const DEBTOR_COUNTRY_DZ = 'DZ';
    const DEBTOR_COUNTRY_EA = 'EA';
    const DEBTOR_COUNTRY_EC = 'EC';
    const DEBTOR_COUNTRY_EE = 'EE';
    const DEBTOR_COUNTRY_EG = 'EG';
    const DEBTOR_COUNTRY_EH = 'EH';
    const DEBTOR_COUNTRY_ER = 'ER';
    const DEBTOR_COUNTRY_ES = 'ES';
    const DEBTOR_COUNTRY_ET = 'ET';
    const DEBTOR_COUNTRY_EU = 'EU';
    const DEBTOR_COUNTRY_FI = 'FI';
    const DEBTOR_COUNTRY_FJ = 'FJ';
    const DEBTOR_COUNTRY_FK = 'FK';
    const DEBTOR_COUNTRY_FM = 'FM';
    const DEBTOR_COUNTRY_FO = 'FO';
    const DEBTOR_COUNTRY_FR = 'FR';
    const DEBTOR_COUNTRY_FX = 'FX';
    const DEBTOR_COUNTRY_GA = 'GA';
    const DEBTOR_COUNTRY_GB = 'GB';
    const DEBTOR_COUNTRY_GD = 'GD';
    const DEBTOR_COUNTRY_GE = 'GE';
    const DEBTOR_COUNTRY_GF = 'GF';
    const DEBTOR_COUNTRY_GG = 'GG';
    const DEBTOR_COUNTRY_GH = 'GH';
    const DEBTOR_COUNTRY_GI = 'GI';
    const DEBTOR_COUNTRY_GL = 'GL';
    const DEBTOR_COUNTRY_GM = 'GM';
    const DEBTOR_COUNTRY_GN = 'GN';
    const DEBTOR_COUNTRY_GP = 'GP';
    const DEBTOR_COUNTRY_GQ = 'GQ';
    const DEBTOR_COUNTRY_GR = 'GR';
    const DEBTOR_COUNTRY_GS = 'GS';
    const DEBTOR_COUNTRY_GT = 'GT';
    const DEBTOR_COUNTRY_GU = 'GU';
    const DEBTOR_COUNTRY_GW = 'GW';
    const DEBTOR_COUNTRY_GY = 'GY';
    const DEBTOR_COUNTRY_HK = 'HK';
    const DEBTOR_COUNTRY_HM = 'HM';
    const DEBTOR_COUNTRY_HN = 'HN';
    const DEBTOR_COUNTRY_HR = 'HR';
    const DEBTOR_COUNTRY_HT = 'HT';
    const DEBTOR_COUNTRY_HU = 'HU';
    const DEBTOR_COUNTRY_IC = 'IC';
    const DEBTOR_COUNTRY_ID = 'ID';
    const DEBTOR_COUNTRY_IE = 'IE';
    const DEBTOR_COUNTRY_IL = 'IL';
    const DEBTOR_COUNTRY_IM = 'IM';
    const DEBTOR_COUNTRY_IN = 'IN';
    const DEBTOR_COUNTRY_IO = 'IO';
    const DEBTOR_COUNTRY_IQ = 'IQ';
    const DEBTOR_COUNTRY_IR = 'IR';
    const DEBTOR_COUNTRY_IS = 'IS';
    const DEBTOR_COUNTRY_IT = 'IT';
    const DEBTOR_COUNTRY_JE = 'JE';
    const DEBTOR_COUNTRY_JM = 'JM';
    const DEBTOR_COUNTRY_JO = 'JO';
    const DEBTOR_COUNTRY_JP = 'JP';
    const DEBTOR_COUNTRY_KE = 'KE';
    const DEBTOR_COUNTRY_KG = 'KG';
    const DEBTOR_COUNTRY_KH = 'KH';
    const DEBTOR_COUNTRY_KI = 'KI';
    const DEBTOR_COUNTRY_KM = 'KM';
    const DEBTOR_COUNTRY_KN = 'KN';
    const DEBTOR_COUNTRY_KP = 'KP';
    const DEBTOR_COUNTRY_KR = 'KR';
    const DEBTOR_COUNTRY_KW = 'KW';
    const DEBTOR_COUNTRY_KY = 'KY';
    const DEBTOR_COUNTRY_KZ = 'KZ';
    const DEBTOR_COUNTRY_LA = 'LA';
    const DEBTOR_COUNTRY_LB = 'LB';
    const DEBTOR_COUNTRY_LC = 'LC';
    const DEBTOR_COUNTRY_LI = 'LI';
    const DEBTOR_COUNTRY_LK = 'LK';
    const DEBTOR_COUNTRY_LR = 'LR';
    const DEBTOR_COUNTRY_LS = 'LS';
    const DEBTOR_COUNTRY_LT = 'LT';
    const DEBTOR_COUNTRY_LU = 'LU';
    const DEBTOR_COUNTRY_LV = 'LV';
    const DEBTOR_COUNTRY_LY = 'LY';
    const DEBTOR_COUNTRY_MA = 'MA';
    const DEBTOR_COUNTRY_MC = 'MC';
    const DEBTOR_COUNTRY_MD = 'MD';
    const DEBTOR_COUNTRY_ME = 'ME';
    const DEBTOR_COUNTRY_MF = 'MF';
    const DEBTOR_COUNTRY_MG = 'MG';
    const DEBTOR_COUNTRY_MH = 'MH';
    const DEBTOR_COUNTRY_MK = 'MK';
    const DEBTOR_COUNTRY_ML = 'ML';
    const DEBTOR_COUNTRY_MM = 'MM';
    const DEBTOR_COUNTRY_MN = 'MN';
    const DEBTOR_COUNTRY_MO = 'MO';
    const DEBTOR_COUNTRY_MP = 'MP';
    const DEBTOR_COUNTRY_MQ = 'MQ';
    const DEBTOR_COUNTRY_MR = 'MR';
    const DEBTOR_COUNTRY_MS = 'MS';
    const DEBTOR_COUNTRY_MT = 'MT';
    const DEBTOR_COUNTRY_MU = 'MU';
    const DEBTOR_COUNTRY_MV = 'MV';
    const DEBTOR_COUNTRY_MW = 'MW';
    const DEBTOR_COUNTRY_MX = 'MX';
    const DEBTOR_COUNTRY_MY = 'MY';
    const DEBTOR_COUNTRY_MZ = 'MZ';
    const DEBTOR_COUNTRY_NA = 'NA';
    const DEBTOR_COUNTRY_NC = 'NC';
    const DEBTOR_COUNTRY_NE = 'NE';
    const DEBTOR_COUNTRY_NF = 'NF';
    const DEBTOR_COUNTRY_NG = 'NG';
    const DEBTOR_COUNTRY_NI = 'NI';
    const DEBTOR_COUNTRY_NL = 'NL';
    const DEBTOR_COUNTRY_NO = 'NO';
    const DEBTOR_COUNTRY_NP = 'NP';
    const DEBTOR_COUNTRY_NR = 'NR';
    const DEBTOR_COUNTRY_NT = 'NT';
    const DEBTOR_COUNTRY_NU = 'NU';
    const DEBTOR_COUNTRY_NZ = 'NZ';
    const DEBTOR_COUNTRY_OM = 'OM';
    const DEBTOR_COUNTRY_PA = 'PA';
    const DEBTOR_COUNTRY_PE = 'PE';
    const DEBTOR_COUNTRY_PF = 'PF';
    const DEBTOR_COUNTRY_PG = 'PG';
    const DEBTOR_COUNTRY_PH = 'PH';
    const DEBTOR_COUNTRY_PK = 'PK';
    const DEBTOR_COUNTRY_PL = 'PL';
    const DEBTOR_COUNTRY_PM = 'PM';
    const DEBTOR_COUNTRY_PN = 'PN';
    const DEBTOR_COUNTRY_PR = 'PR';
    const DEBTOR_COUNTRY_PS = 'PS';
    const DEBTOR_COUNTRY_PT = 'PT';
    const DEBTOR_COUNTRY_PW = 'PW';
    const DEBTOR_COUNTRY_PY = 'PY';
    const DEBTOR_COUNTRY_QA = 'QA';
    const DEBTOR_COUNTRY_RE = 'RE';
    const DEBTOR_COUNTRY_RO = 'RO';
    const DEBTOR_COUNTRY_RS = 'RS';
    const DEBTOR_COUNTRY_RU = 'RU';
    const DEBTOR_COUNTRY_RW = 'RW';
    const DEBTOR_COUNTRY_SA = 'SA';
    const DEBTOR_COUNTRY_SB = 'SB';
    const DEBTOR_COUNTRY_SC = 'SC';
    const DEBTOR_COUNTRY_SD = 'SD';
    const DEBTOR_COUNTRY_SE = 'SE';
    const DEBTOR_COUNTRY_SF = 'SF';
    const DEBTOR_COUNTRY_SG = 'SG';
    const DEBTOR_COUNTRY_SH = 'SH';
    const DEBTOR_COUNTRY_SI = 'SI';
    const DEBTOR_COUNTRY_SJ = 'SJ';
    const DEBTOR_COUNTRY_SK = 'SK';
    const DEBTOR_COUNTRY_SL = 'SL';
    const DEBTOR_COUNTRY_SM = 'SM';
    const DEBTOR_COUNTRY_SN = 'SN';
    const DEBTOR_COUNTRY_SO = 'SO';
    const DEBTOR_COUNTRY_SR = 'SR';
    const DEBTOR_COUNTRY_SS = 'SS';
    const DEBTOR_COUNTRY_ST = 'ST';
    const DEBTOR_COUNTRY_SU = 'SU';
    const DEBTOR_COUNTRY_SV = 'SV';
    const DEBTOR_COUNTRY_SX = 'SX';
    const DEBTOR_COUNTRY_SY = 'SY';
    const DEBTOR_COUNTRY_SZ = 'SZ';
    const DEBTOR_COUNTRY_TA = 'TA';
    const DEBTOR_COUNTRY_TC = 'TC';
    const DEBTOR_COUNTRY_TD = 'TD';
    const DEBTOR_COUNTRY_TF = 'TF';
    const DEBTOR_COUNTRY_TG = 'TG';
    const DEBTOR_COUNTRY_TH = 'TH';
    const DEBTOR_COUNTRY_TJ = 'TJ';
    const DEBTOR_COUNTRY_TK = 'TK';
    const DEBTOR_COUNTRY_TL = 'TL';
    const DEBTOR_COUNTRY_TM = 'TM';
    const DEBTOR_COUNTRY_TN = 'TN';
    const DEBTOR_COUNTRY_TO = 'TO';
    const DEBTOR_COUNTRY_TP = 'TP';
    const DEBTOR_COUNTRY_TR = 'TR';
    const DEBTOR_COUNTRY_TT = 'TT';
    const DEBTOR_COUNTRY_TV = 'TV';
    const DEBTOR_COUNTRY_TW = 'TW';
    const DEBTOR_COUNTRY_TZ = 'TZ';
    const DEBTOR_COUNTRY_UA = 'UA';
    const DEBTOR_COUNTRY_UG = 'UG';
    const DEBTOR_COUNTRY_UK = 'UK';
    const DEBTOR_COUNTRY_UM = 'UM';
    const DEBTOR_COUNTRY_US = 'US';
    const DEBTOR_COUNTRY_UY = 'UY';
    const DEBTOR_COUNTRY_UZ = 'UZ';
    const DEBTOR_COUNTRY_VA = 'VA';
    const DEBTOR_COUNTRY_VC = 'VC';
    const DEBTOR_COUNTRY_VE = 'VE';
    const DEBTOR_COUNTRY_VG = 'VG';
    const DEBTOR_COUNTRY_VI = 'VI';
    const DEBTOR_COUNTRY_VN = 'VN';
    const DEBTOR_COUNTRY_VU = 'VU';
    const DEBTOR_COUNTRY_WF = 'WF';
    const DEBTOR_COUNTRY_WS = 'WS';
    const DEBTOR_COUNTRY_XK = 'XK';
    const DEBTOR_COUNTRY_YE = 'YE';
    const DEBTOR_COUNTRY_YT = 'YT';
    const DEBTOR_COUNTRY_YU = 'YU';
    const DEBTOR_COUNTRY_ZA = 'ZA';
    const DEBTOR_COUNTRY_ZM = 'ZM';
    const DEBTOR_COUNTRY_ZR = 'ZR';
    const DEBTOR_COUNTRY_ZW = 'ZW';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDebtorCountryAllowableValues()
    {
        return [
            self::DEBTOR_COUNTRY_UNDEFINED,
            self::DEBTOR_COUNTRY_AC,
            self::DEBTOR_COUNTRY_AD,
            self::DEBTOR_COUNTRY_AE,
            self::DEBTOR_COUNTRY_AF,
            self::DEBTOR_COUNTRY_AG,
            self::DEBTOR_COUNTRY_AI,
            self::DEBTOR_COUNTRY_AL,
            self::DEBTOR_COUNTRY_AM,
            self::DEBTOR_COUNTRY_AN,
            self::DEBTOR_COUNTRY_AO,
            self::DEBTOR_COUNTRY_AQ,
            self::DEBTOR_COUNTRY_AR,
            self::DEBTOR_COUNTRY__AS,
            self::DEBTOR_COUNTRY_AT,
            self::DEBTOR_COUNTRY_AU,
            self::DEBTOR_COUNTRY_AW,
            self::DEBTOR_COUNTRY_AX,
            self::DEBTOR_COUNTRY_AZ,
            self::DEBTOR_COUNTRY_BA,
            self::DEBTOR_COUNTRY_BB,
            self::DEBTOR_COUNTRY_BD,
            self::DEBTOR_COUNTRY_BE,
            self::DEBTOR_COUNTRY_BF,
            self::DEBTOR_COUNTRY_BG,
            self::DEBTOR_COUNTRY_BH,
            self::DEBTOR_COUNTRY_BI,
            self::DEBTOR_COUNTRY_BJ,
            self::DEBTOR_COUNTRY_BL,
            self::DEBTOR_COUNTRY_BM,
            self::DEBTOR_COUNTRY_BN,
            self::DEBTOR_COUNTRY_BO,
            self::DEBTOR_COUNTRY_BQ,
            self::DEBTOR_COUNTRY_BR,
            self::DEBTOR_COUNTRY_BS,
            self::DEBTOR_COUNTRY_BT,
            self::DEBTOR_COUNTRY_BU,
            self::DEBTOR_COUNTRY_BV,
            self::DEBTOR_COUNTRY_BW,
            self::DEBTOR_COUNTRY_BY,
            self::DEBTOR_COUNTRY_BZ,
            self::DEBTOR_COUNTRY_CA,
            self::DEBTOR_COUNTRY_CC,
            self::DEBTOR_COUNTRY_CD,
            self::DEBTOR_COUNTRY_CF,
            self::DEBTOR_COUNTRY_CG,
            self::DEBTOR_COUNTRY_CH,
            self::DEBTOR_COUNTRY_CI,
            self::DEBTOR_COUNTRY_CK,
            self::DEBTOR_COUNTRY_CL,
            self::DEBTOR_COUNTRY_CM,
            self::DEBTOR_COUNTRY_CN,
            self::DEBTOR_COUNTRY_CO,
            self::DEBTOR_COUNTRY_CP,
            self::DEBTOR_COUNTRY_CR,
            self::DEBTOR_COUNTRY_CS,
            self::DEBTOR_COUNTRY_CU,
            self::DEBTOR_COUNTRY_CV,
            self::DEBTOR_COUNTRY_CW,
            self::DEBTOR_COUNTRY_CX,
            self::DEBTOR_COUNTRY_CY,
            self::DEBTOR_COUNTRY_CZ,
            self::DEBTOR_COUNTRY_DE,
            self::DEBTOR_COUNTRY_DG,
            self::DEBTOR_COUNTRY_DJ,
            self::DEBTOR_COUNTRY_DK,
            self::DEBTOR_COUNTRY_DM,
            self::DEBTOR_COUNTRY__DO,
            self::DEBTOR_COUNTRY_DZ,
            self::DEBTOR_COUNTRY_EA,
            self::DEBTOR_COUNTRY_EC,
            self::DEBTOR_COUNTRY_EE,
            self::DEBTOR_COUNTRY_EG,
            self::DEBTOR_COUNTRY_EH,
            self::DEBTOR_COUNTRY_ER,
            self::DEBTOR_COUNTRY_ES,
            self::DEBTOR_COUNTRY_ET,
            self::DEBTOR_COUNTRY_EU,
            self::DEBTOR_COUNTRY_FI,
            self::DEBTOR_COUNTRY_FJ,
            self::DEBTOR_COUNTRY_FK,
            self::DEBTOR_COUNTRY_FM,
            self::DEBTOR_COUNTRY_FO,
            self::DEBTOR_COUNTRY_FR,
            self::DEBTOR_COUNTRY_FX,
            self::DEBTOR_COUNTRY_GA,
            self::DEBTOR_COUNTRY_GB,
            self::DEBTOR_COUNTRY_GD,
            self::DEBTOR_COUNTRY_GE,
            self::DEBTOR_COUNTRY_GF,
            self::DEBTOR_COUNTRY_GG,
            self::DEBTOR_COUNTRY_GH,
            self::DEBTOR_COUNTRY_GI,
            self::DEBTOR_COUNTRY_GL,
            self::DEBTOR_COUNTRY_GM,
            self::DEBTOR_COUNTRY_GN,
            self::DEBTOR_COUNTRY_GP,
            self::DEBTOR_COUNTRY_GQ,
            self::DEBTOR_COUNTRY_GR,
            self::DEBTOR_COUNTRY_GS,
            self::DEBTOR_COUNTRY_GT,
            self::DEBTOR_COUNTRY_GU,
            self::DEBTOR_COUNTRY_GW,
            self::DEBTOR_COUNTRY_GY,
            self::DEBTOR_COUNTRY_HK,
            self::DEBTOR_COUNTRY_HM,
            self::DEBTOR_COUNTRY_HN,
            self::DEBTOR_COUNTRY_HR,
            self::DEBTOR_COUNTRY_HT,
            self::DEBTOR_COUNTRY_HU,
            self::DEBTOR_COUNTRY_IC,
            self::DEBTOR_COUNTRY_ID,
            self::DEBTOR_COUNTRY_IE,
            self::DEBTOR_COUNTRY_IL,
            self::DEBTOR_COUNTRY_IM,
            self::DEBTOR_COUNTRY_IN,
            self::DEBTOR_COUNTRY_IO,
            self::DEBTOR_COUNTRY_IQ,
            self::DEBTOR_COUNTRY_IR,
            self::DEBTOR_COUNTRY_IS,
            self::DEBTOR_COUNTRY_IT,
            self::DEBTOR_COUNTRY_JE,
            self::DEBTOR_COUNTRY_JM,
            self::DEBTOR_COUNTRY_JO,
            self::DEBTOR_COUNTRY_JP,
            self::DEBTOR_COUNTRY_KE,
            self::DEBTOR_COUNTRY_KG,
            self::DEBTOR_COUNTRY_KH,
            self::DEBTOR_COUNTRY_KI,
            self::DEBTOR_COUNTRY_KM,
            self::DEBTOR_COUNTRY_KN,
            self::DEBTOR_COUNTRY_KP,
            self::DEBTOR_COUNTRY_KR,
            self::DEBTOR_COUNTRY_KW,
            self::DEBTOR_COUNTRY_KY,
            self::DEBTOR_COUNTRY_KZ,
            self::DEBTOR_COUNTRY_LA,
            self::DEBTOR_COUNTRY_LB,
            self::DEBTOR_COUNTRY_LC,
            self::DEBTOR_COUNTRY_LI,
            self::DEBTOR_COUNTRY_LK,
            self::DEBTOR_COUNTRY_LR,
            self::DEBTOR_COUNTRY_LS,
            self::DEBTOR_COUNTRY_LT,
            self::DEBTOR_COUNTRY_LU,
            self::DEBTOR_COUNTRY_LV,
            self::DEBTOR_COUNTRY_LY,
            self::DEBTOR_COUNTRY_MA,
            self::DEBTOR_COUNTRY_MC,
            self::DEBTOR_COUNTRY_MD,
            self::DEBTOR_COUNTRY_ME,
            self::DEBTOR_COUNTRY_MF,
            self::DEBTOR_COUNTRY_MG,
            self::DEBTOR_COUNTRY_MH,
            self::DEBTOR_COUNTRY_MK,
            self::DEBTOR_COUNTRY_ML,
            self::DEBTOR_COUNTRY_MM,
            self::DEBTOR_COUNTRY_MN,
            self::DEBTOR_COUNTRY_MO,
            self::DEBTOR_COUNTRY_MP,
            self::DEBTOR_COUNTRY_MQ,
            self::DEBTOR_COUNTRY_MR,
            self::DEBTOR_COUNTRY_MS,
            self::DEBTOR_COUNTRY_MT,
            self::DEBTOR_COUNTRY_MU,
            self::DEBTOR_COUNTRY_MV,
            self::DEBTOR_COUNTRY_MW,
            self::DEBTOR_COUNTRY_MX,
            self::DEBTOR_COUNTRY_MY,
            self::DEBTOR_COUNTRY_MZ,
            self::DEBTOR_COUNTRY_NA,
            self::DEBTOR_COUNTRY_NC,
            self::DEBTOR_COUNTRY_NE,
            self::DEBTOR_COUNTRY_NF,
            self::DEBTOR_COUNTRY_NG,
            self::DEBTOR_COUNTRY_NI,
            self::DEBTOR_COUNTRY_NL,
            self::DEBTOR_COUNTRY_NO,
            self::DEBTOR_COUNTRY_NP,
            self::DEBTOR_COUNTRY_NR,
            self::DEBTOR_COUNTRY_NT,
            self::DEBTOR_COUNTRY_NU,
            self::DEBTOR_COUNTRY_NZ,
            self::DEBTOR_COUNTRY_OM,
            self::DEBTOR_COUNTRY_PA,
            self::DEBTOR_COUNTRY_PE,
            self::DEBTOR_COUNTRY_PF,
            self::DEBTOR_COUNTRY_PG,
            self::DEBTOR_COUNTRY_PH,
            self::DEBTOR_COUNTRY_PK,
            self::DEBTOR_COUNTRY_PL,
            self::DEBTOR_COUNTRY_PM,
            self::DEBTOR_COUNTRY_PN,
            self::DEBTOR_COUNTRY_PR,
            self::DEBTOR_COUNTRY_PS,
            self::DEBTOR_COUNTRY_PT,
            self::DEBTOR_COUNTRY_PW,
            self::DEBTOR_COUNTRY_PY,
            self::DEBTOR_COUNTRY_QA,
            self::DEBTOR_COUNTRY_RE,
            self::DEBTOR_COUNTRY_RO,
            self::DEBTOR_COUNTRY_RS,
            self::DEBTOR_COUNTRY_RU,
            self::DEBTOR_COUNTRY_RW,
            self::DEBTOR_COUNTRY_SA,
            self::DEBTOR_COUNTRY_SB,
            self::DEBTOR_COUNTRY_SC,
            self::DEBTOR_COUNTRY_SD,
            self::DEBTOR_COUNTRY_SE,
            self::DEBTOR_COUNTRY_SF,
            self::DEBTOR_COUNTRY_SG,
            self::DEBTOR_COUNTRY_SH,
            self::DEBTOR_COUNTRY_SI,
            self::DEBTOR_COUNTRY_SJ,
            self::DEBTOR_COUNTRY_SK,
            self::DEBTOR_COUNTRY_SL,
            self::DEBTOR_COUNTRY_SM,
            self::DEBTOR_COUNTRY_SN,
            self::DEBTOR_COUNTRY_SO,
            self::DEBTOR_COUNTRY_SR,
            self::DEBTOR_COUNTRY_SS,
            self::DEBTOR_COUNTRY_ST,
            self::DEBTOR_COUNTRY_SU,
            self::DEBTOR_COUNTRY_SV,
            self::DEBTOR_COUNTRY_SX,
            self::DEBTOR_COUNTRY_SY,
            self::DEBTOR_COUNTRY_SZ,
            self::DEBTOR_COUNTRY_TA,
            self::DEBTOR_COUNTRY_TC,
            self::DEBTOR_COUNTRY_TD,
            self::DEBTOR_COUNTRY_TF,
            self::DEBTOR_COUNTRY_TG,
            self::DEBTOR_COUNTRY_TH,
            self::DEBTOR_COUNTRY_TJ,
            self::DEBTOR_COUNTRY_TK,
            self::DEBTOR_COUNTRY_TL,
            self::DEBTOR_COUNTRY_TM,
            self::DEBTOR_COUNTRY_TN,
            self::DEBTOR_COUNTRY_TO,
            self::DEBTOR_COUNTRY_TP,
            self::DEBTOR_COUNTRY_TR,
            self::DEBTOR_COUNTRY_TT,
            self::DEBTOR_COUNTRY_TV,
            self::DEBTOR_COUNTRY_TW,
            self::DEBTOR_COUNTRY_TZ,
            self::DEBTOR_COUNTRY_UA,
            self::DEBTOR_COUNTRY_UG,
            self::DEBTOR_COUNTRY_UK,
            self::DEBTOR_COUNTRY_UM,
            self::DEBTOR_COUNTRY_US,
            self::DEBTOR_COUNTRY_UY,
            self::DEBTOR_COUNTRY_UZ,
            self::DEBTOR_COUNTRY_VA,
            self::DEBTOR_COUNTRY_VC,
            self::DEBTOR_COUNTRY_VE,
            self::DEBTOR_COUNTRY_VG,
            self::DEBTOR_COUNTRY_VI,
            self::DEBTOR_COUNTRY_VN,
            self::DEBTOR_COUNTRY_VU,
            self::DEBTOR_COUNTRY_WF,
            self::DEBTOR_COUNTRY_WS,
            self::DEBTOR_COUNTRY_XK,
            self::DEBTOR_COUNTRY_YE,
            self::DEBTOR_COUNTRY_YT,
            self::DEBTOR_COUNTRY_YU,
            self::DEBTOR_COUNTRY_ZA,
            self::DEBTOR_COUNTRY_ZM,
            self::DEBTOR_COUNTRY_ZR,
            self::DEBTOR_COUNTRY_ZW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['debtor_name'] = isset($data['debtor_name']) ? $data['debtor_name'] : null;
        $this->container['debtor_address'] = isset($data['debtor_address']) ? $data['debtor_address'] : null;
        $this->container['debtor_postal_code'] = isset($data['debtor_postal_code']) ? $data['debtor_postal_code'] : null;
        $this->container['debtor_city'] = isset($data['debtor_city']) ? $data['debtor_city'] : null;
        $this->container['debtor_country'] = isset($data['debtor_country']) ? $data['debtor_country'] : null;
        $this->container['debtor_iban'] = isset($data['debtor_iban']) ? $data['debtor_iban'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['debtor_name'] === null) {
            $invalidProperties[] = "'debtor_name' can't be null";
        }
        if ($this->container['debtor_postal_code'] === null) {
            $invalidProperties[] = "'debtor_postal_code' can't be null";
        }
        if ($this->container['debtor_city'] === null) {
            $invalidProperties[] = "'debtor_city' can't be null";
        }
        if ($this->container['debtor_country'] === null) {
            $invalidProperties[] = "'debtor_country' can't be null";
        }
        $allowedValues = $this->getDebtorCountryAllowableValues();
        if (!is_null($this->container['debtor_country']) && !in_array($this->container['debtor_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'debtor_country', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['debtor_iban'] === null) {
            $invalidProperties[] = "'debtor_iban' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets debtor_name
     *
     * @return string
     */
    public function getDebtorName()
    {
        return $this->container['debtor_name'];
    }

    /**
     * Sets debtor_name
     *
     * @param string $debtor_name debtor_name
     *
     * @return $this
     */
    public function setDebtorName($debtor_name)
    {
        $this->container['debtor_name'] = $debtor_name;

        return $this;
    }

    /**
     * Gets debtor_address
     *
     * @return string
     */
    public function getDebtorAddress()
    {
        return $this->container['debtor_address'];
    }

    /**
     * Sets debtor_address
     *
     * @param string $debtor_address debtor_address
     *
     * @return $this
     */
    public function setDebtorAddress($debtor_address)
    {
        $this->container['debtor_address'] = $debtor_address;

        return $this;
    }

    /**
     * Gets debtor_postal_code
     *
     * @return string
     */
    public function getDebtorPostalCode()
    {
        return $this->container['debtor_postal_code'];
    }

    /**
     * Sets debtor_postal_code
     *
     * @param string $debtor_postal_code debtor_postal_code
     *
     * @return $this
     */
    public function setDebtorPostalCode($debtor_postal_code)
    {
        $this->container['debtor_postal_code'] = $debtor_postal_code;

        return $this;
    }

    /**
     * Gets debtor_city
     *
     * @return string
     */
    public function getDebtorCity()
    {
        return $this->container['debtor_city'];
    }

    /**
     * Sets debtor_city
     *
     * @param string $debtor_city debtor_city
     *
     * @return $this
     */
    public function setDebtorCity($debtor_city)
    {
        $this->container['debtor_city'] = $debtor_city;

        return $this;
    }

    /**
     * Gets debtor_country
     *
     * @return string
     */
    public function getDebtorCountry()
    {
        return $this->container['debtor_country'];
    }

    /**
     * Sets debtor_country
     *
     * @param string $debtor_country debtor_country
     *
     * @return $this
     */
    public function setDebtorCountry($debtor_country)
    {
        $allowedValues = $this->getDebtorCountryAllowableValues();
        if (!in_array($debtor_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'debtor_country', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['debtor_country'] = $debtor_country;

        return $this;
    }

    /**
     * Gets debtor_iban
     *
     * @return string
     */
    public function getDebtorIban()
    {
        return $this->container['debtor_iban'];
    }

    /**
     * Sets debtor_iban
     *
     * @param string $debtor_iban debtor_iban
     *
     * @return $this
     */
    public function setDebtorIban($debtor_iban)
    {
        $this->container['debtor_iban'] = $debtor_iban;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
