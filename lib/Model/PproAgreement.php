<?php
/**
 * PproAgreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * PproAgreement Class Doc Comment
 *
 * @category Class
 * @description Local payment methods agreement details
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PproAgreement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PproAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'test' => 'bool',
        'contract_id' => 'string',
        'payment_type' => 'string',
        'secure_sepa' => 'bool',
        'tink_merchant_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'test' => null,
        'contract_id' => null,
        'payment_type' => null,
        'secure_sepa' => null,
        'tink_merchant_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'test' => 'test',
        'contract_id' => 'contract_id',
        'payment_type' => 'payment_type',
        'secure_sepa' => 'secure_sepa',
        'tink_merchant_id' => 'tink_merchant_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'test' => 'setTest',
        'contract_id' => 'setContractId',
        'payment_type' => 'setPaymentType',
        'secure_sepa' => 'setSecureSepa',
        'tink_merchant_id' => 'setTinkMerchantId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'test' => 'getTest',
        'contract_id' => 'getContractId',
        'payment_type' => 'getPaymentType',
        'secure_sepa' => 'getSecureSepa',
        'tink_merchant_id' => 'getTinkMerchantId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PAYMENT_TYPE_BANCONTACT = 'pp_bancontact';
    const PAYMENT_TYPE_BLIK_OC = 'pp_blik_oc';
    const PAYMENT_TYPE_EPS = 'pp_eps';
    const PAYMENT_TYPE_ESTONIA_BANKS = 'pp_estonia_banks';
    const PAYMENT_TYPE_GIROPAY = 'pp_giropay';
    const PAYMENT_TYPE_IDEAL = 'pp_ideal';
    const PAYMENT_TYPE_LATVIA_BANKS = 'pp_latvia_banks';
    const PAYMENT_TYPE_LITHUANIA_BANKS = 'pp_lithuania_banks';
    const PAYMENT_TYPE_MB_WAY = 'pp_mb_way';
    const PAYMENT_TYPE_MULTIBANCO = 'pp_multibanco';
    const PAYMENT_TYPE_MYBANK = 'pp_mybank';
    const PAYMENT_TYPE_P24 = 'pp_p24';
    const PAYMENT_TYPE_PAYCONIQ = 'pp_payconiq';
    const PAYMENT_TYPE_PAYSAFECARD = 'pp_paysafecard';
    const PAYMENT_TYPE_PAYSERA = 'pp_paysera';
    const PAYMENT_TYPE_POSTFINANCE = 'pp_postfinance';
    const PAYMENT_TYPE_SATISPAY = 'pp_satispay';
    const PAYMENT_TYPE_SEPA = 'pp_sepa';
    const PAYMENT_TYPE_TRUSTLY = 'pp_trustly';
    const PAYMENT_TYPE_VERKKOPANKKI = 'pp_verkkopankki';
    const PAYMENT_TYPE_WECHATPAY = 'pp_wechatpay';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_BANCONTACT,
            self::PAYMENT_TYPE_BLIK_OC,
            self::PAYMENT_TYPE_EPS,
            self::PAYMENT_TYPE_ESTONIA_BANKS,
            self::PAYMENT_TYPE_GIROPAY,
            self::PAYMENT_TYPE_IDEAL,
            self::PAYMENT_TYPE_LATVIA_BANKS,
            self::PAYMENT_TYPE_LITHUANIA_BANKS,
            self::PAYMENT_TYPE_MB_WAY,
            self::PAYMENT_TYPE_MULTIBANCO,
            self::PAYMENT_TYPE_MYBANK,
            self::PAYMENT_TYPE_P24,
            self::PAYMENT_TYPE_PAYCONIQ,
            self::PAYMENT_TYPE_PAYSAFECARD,
            self::PAYMENT_TYPE_PAYSERA,
            self::PAYMENT_TYPE_POSTFINANCE,
            self::PAYMENT_TYPE_SATISPAY,
            self::PAYMENT_TYPE_SEPA,
            self::PAYMENT_TYPE_TRUSTLY,
            self::PAYMENT_TYPE_VERKKOPANKKI,
            self::PAYMENT_TYPE_WECHATPAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['contract_id'] = isset($data['contract_id']) ? $data['contract_id'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['secure_sepa'] = isset($data['secure_sepa']) ? $data['secure_sepa'] : null;
        $this->container['tink_merchant_id'] = isset($data['tink_merchant_id']) ? $data['tink_merchant_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contract_id'] === null) {
            $invalidProperties[] = "'contract_id' can't be null";
        }
        if ($this->container['payment_type'] === null) {
            $invalidProperties[] = "'payment_type' can't be null";
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['payment_type']) && !in_array($this->container['payment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test test
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets contract_id
     *
     * @return string
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param string $contract_id Contract id for local payment method
     *
     * @return $this
     */
    public function setContractId($contract_id)
    {
        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type Payment gateway payment type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!in_array($payment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets secure_sepa
     *
     * @return bool
     */
    public function getSecureSepa()
    {
        return $this->container['secure_sepa'];
    }

    /**
     * Sets secure_sepa
     *
     * @param bool $secure_sepa Optional account validation for SEPA account
     *
     * @return $this
     */
    public function setSecureSepa($secure_sepa)
    {
        $this->container['secure_sepa'] = $secure_sepa;

        return $this;
    }

    /**
     * Gets tink_merchant_id
     *
     * @return string
     */
    public function getTinkMerchantId()
    {
        return $this->container['tink_merchant_id'];
    }

    /**
     * Sets tink_merchant_id
     *
     * @param string $tink_merchant_id Optional custom merchant id for secure SEPA
     *
     * @return $this
     */
    public function setTinkMerchantId($tink_merchant_id)
    {
        $this->container['tink_merchant_id'] = $tink_merchant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
