<?php
/**
 * UpdateSubscriptionPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * UpdateSubscriptionPlan Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateSubscriptionPlan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateSubscriptionPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'description' => 'string',
        'vat' => 'float',
        'dunning_plan' => 'string',
        'tax_policy' => 'string',
        'renewal_reminder_email_days' => 'int',
        'trial_reminder_email_days' => 'int',
        'partial_period_handling' => 'string',
        'include_zero_amount' => 'bool',
        'setup_fee' => 'int',
        'setup_fee_text' => 'string',
        'setup_fee_handling' => 'string',
        'partial_proration_days' => 'bool',
        'fixed_trial_days' => 'bool',
        'minimum_prorated_amount' => 'int',
        'account_funding' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'description' => null,
        'vat' => 'float',
        'dunning_plan' => null,
        'tax_policy' => null,
        'renewal_reminder_email_days' => 'int32',
        'trial_reminder_email_days' => 'int32',
        'partial_period_handling' => null,
        'include_zero_amount' => null,
        'setup_fee' => 'int32',
        'setup_fee_text' => null,
        'setup_fee_handling' => null,
        'partial_proration_days' => null,
        'fixed_trial_days' => null,
        'minimum_prorated_amount' => 'int32',
        'account_funding' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'vat' => 'vat',
        'dunning_plan' => 'dunning_plan',
        'tax_policy' => 'tax_policy',
        'renewal_reminder_email_days' => 'renewal_reminder_email_days',
        'trial_reminder_email_days' => 'trial_reminder_email_days',
        'partial_period_handling' => 'partial_period_handling',
        'include_zero_amount' => 'include_zero_amount',
        'setup_fee' => 'setup_fee',
        'setup_fee_text' => 'setup_fee_text',
        'setup_fee_handling' => 'setup_fee_handling',
        'partial_proration_days' => 'partial_proration_days',
        'fixed_trial_days' => 'fixed_trial_days',
        'minimum_prorated_amount' => 'minimum_prorated_amount',
        'account_funding' => 'account_funding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'vat' => 'setVat',
        'dunning_plan' => 'setDunningPlan',
        'tax_policy' => 'setTaxPolicy',
        'renewal_reminder_email_days' => 'setRenewalReminderEmailDays',
        'trial_reminder_email_days' => 'setTrialReminderEmailDays',
        'partial_period_handling' => 'setPartialPeriodHandling',
        'include_zero_amount' => 'setIncludeZeroAmount',
        'setup_fee' => 'setSetupFee',
        'setup_fee_text' => 'setSetupFeeText',
        'setup_fee_handling' => 'setSetupFeeHandling',
        'partial_proration_days' => 'setPartialProrationDays',
        'fixed_trial_days' => 'setFixedTrialDays',
        'minimum_prorated_amount' => 'setMinimumProratedAmount',
        'account_funding' => 'setAccountFunding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'vat' => 'getVat',
        'dunning_plan' => 'getDunningPlan',
        'tax_policy' => 'getTaxPolicy',
        'renewal_reminder_email_days' => 'getRenewalReminderEmailDays',
        'trial_reminder_email_days' => 'getTrialReminderEmailDays',
        'partial_period_handling' => 'getPartialPeriodHandling',
        'include_zero_amount' => 'getIncludeZeroAmount',
        'setup_fee' => 'getSetupFee',
        'setup_fee_text' => 'getSetupFeeText',
        'setup_fee_handling' => 'getSetupFeeHandling',
        'partial_proration_days' => 'getPartialProrationDays',
        'fixed_trial_days' => 'getFixedTrialDays',
        'minimum_prorated_amount' => 'getMinimumProratedAmount',
        'account_funding' => 'getAccountFunding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PARTIAL_PERIOD_HANDLING_BILL_FULL = 'bill_full';
    const PARTIAL_PERIOD_HANDLING_BILL_PRORATED = 'bill_prorated';
    const PARTIAL_PERIOD_HANDLING_BILL_ZERO_AMOUNT = 'bill_zero_amount';
    const PARTIAL_PERIOD_HANDLING_NO_BILL = 'no_bill';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPartialPeriodHandlingAllowableValues()
    {
        return [
            self::PARTIAL_PERIOD_HANDLING_BILL_FULL,
            self::PARTIAL_PERIOD_HANDLING_BILL_PRORATED,
            self::PARTIAL_PERIOD_HANDLING_BILL_ZERO_AMOUNT,
            self::PARTIAL_PERIOD_HANDLING_NO_BILL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['dunning_plan'] = isset($data['dunning_plan']) ? $data['dunning_plan'] : null;
        $this->container['tax_policy'] = isset($data['tax_policy']) ? $data['tax_policy'] : null;
        $this->container['renewal_reminder_email_days'] = isset($data['renewal_reminder_email_days']) ? $data['renewal_reminder_email_days'] : null;
        $this->container['trial_reminder_email_days'] = isset($data['trial_reminder_email_days']) ? $data['trial_reminder_email_days'] : null;
        $this->container['partial_period_handling'] = isset($data['partial_period_handling']) ? $data['partial_period_handling'] : null;
        $this->container['include_zero_amount'] = isset($data['include_zero_amount']) ? $data['include_zero_amount'] : null;
        $this->container['setup_fee'] = isset($data['setup_fee']) ? $data['setup_fee'] : null;
        $this->container['setup_fee_text'] = isset($data['setup_fee_text']) ? $data['setup_fee_text'] : null;
        $this->container['setup_fee_handling'] = isset($data['setup_fee_handling']) ? $data['setup_fee_handling'] : null;
        $this->container['partial_proration_days'] = isset($data['partial_proration_days']) ? $data['partial_proration_days'] : null;
        $this->container['fixed_trial_days'] = isset($data['fixed_trial_days']) ? $data['fixed_trial_days'] : null;
        $this->container['minimum_prorated_amount'] = isset($data['minimum_prorated_amount']) ? $data['minimum_prorated_amount'] : null;
        $this->container['account_funding'] = isset($data['account_funding']) ? $data['account_funding'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getPartialPeriodHandlingAllowableValues();
        if (!is_null($this->container['partial_period_handling']) && !in_array($this->container['partial_period_handling'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'partial_period_handling', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the plan
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the plan
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float $vat Optional vat for this plan. Account default is used if none given.
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets dunning_plan
     *
     * @return string
     */
    public function getDunningPlan()
    {
        return $this->container['dunning_plan'];
    }

    /**
     * Sets dunning_plan
     *
     * @param string $dunning_plan Dunning plan by handle to use for the subscription plan. Default dunning plan will be used if none given.
     *
     * @return $this
     */
    public function setDunningPlan($dunning_plan)
    {
        $this->container['dunning_plan'] = $dunning_plan;

        return $this;
    }

    /**
     * Gets tax_policy
     *
     * @return string
     */
    public function getTaxPolicy()
    {
        return $this->container['tax_policy'];
    }

    /**
     * Sets tax_policy
     *
     * @param string $tax_policy Optional tax policy handle for this plan. If vat and tax policy is given, vat will be ignored.
     *
     * @return $this
     */
    public function setTaxPolicy($tax_policy)
    {
        $this->container['tax_policy'] = $tax_policy;

        return $this;
    }

    /**
     * Gets renewal_reminder_email_days
     *
     * @return int
     */
    public function getRenewalReminderEmailDays()
    {
        return $this->container['renewal_reminder_email_days'];
    }

    /**
     * Sets renewal_reminder_email_days
     *
     * @param int $renewal_reminder_email_days Optional renewal reminder email settings. Number of days before next billing to send a reminder email.
     *
     * @return $this
     */
    public function setRenewalReminderEmailDays($renewal_reminder_email_days)
    {
        $this->container['renewal_reminder_email_days'] = $renewal_reminder_email_days;

        return $this;
    }

    /**
     * Gets trial_reminder_email_days
     *
     * @return int
     */
    public function getTrialReminderEmailDays()
    {
        return $this->container['trial_reminder_email_days'];
    }

    /**
     * Sets trial_reminder_email_days
     *
     * @param int $trial_reminder_email_days Optional end of trial reminder email settings. Number of days before end of trial to send a reminder email.
     *
     * @return $this
     */
    public function setTrialReminderEmailDays($trial_reminder_email_days)
    {
        $this->container['trial_reminder_email_days'] = $trial_reminder_email_days;

        return $this;
    }

    /**
     * Gets partial_period_handling
     *
     * @return string
     */
    public function getPartialPeriodHandling()
    {
        return $this->container['partial_period_handling'];
    }

    /**
     * Sets partial_period_handling
     *
     * @param string $partial_period_handling How to handle a potential initial partial billing period for fixed day scheduling. The options are to bill for a full period, bill prorated for the partial period, bill a zero amoumt, or not to consider the period before first fixed day a billing period. The default is to bill prorated. Options: `bill_full`, `bill_prorated`, `bill_zero_amount`, `no_bill`.
     *
     * @return $this
     */
    public function setPartialPeriodHandling($partial_period_handling)
    {
        $allowedValues = $this->getPartialPeriodHandlingAllowableValues();
        if (!is_null($partial_period_handling) && !in_array($partial_period_handling, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'partial_period_handling', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['partial_period_handling'] = $partial_period_handling;

        return $this;
    }

    /**
     * Gets include_zero_amount
     *
     * @return bool
     */
    public function getIncludeZeroAmount()
    {
        return $this->container['include_zero_amount'];
    }

    /**
     * Sets include_zero_amount
     *
     * @param bool $include_zero_amount Whether to add a zero amount order line to subscription invoices if plan amount is zero or the subscription overrides to zero amount. The default is to not include the line. If no other order lines are present the plan order line will be added.
     *
     * @return $this
     */
    public function setIncludeZeroAmount($include_zero_amount)
    {
        $this->container['include_zero_amount'] = $include_zero_amount;

        return $this;
    }

    /**
     * Gets setup_fee
     *
     * @return int
     */
    public function getSetupFee()
    {
        return $this->container['setup_fee'];
    }

    /**
     * Sets setup_fee
     *
     * @param int $setup_fee Optional one-time setup fee billed with the first invoice or as a separate invoice depending on the setting `setup_fee_handling`.
     *
     * @return $this
     */
    public function setSetupFee($setup_fee)
    {
        $this->container['setup_fee'] = $setup_fee;

        return $this;
    }

    /**
     * Gets setup_fee_text
     *
     * @return string
     */
    public function getSetupFeeText()
    {
        return $this->container['setup_fee_text'];
    }

    /**
     * Sets setup_fee_text
     *
     * @param string $setup_fee_text Optional invoice order text for the setup fee that
     *
     * @return $this
     */
    public function setSetupFeeText($setup_fee_text)
    {
        $this->container['setup_fee_text'] = $setup_fee_text;

        return $this;
    }

    /**
     * Gets setup_fee_handling
     *
     * @return string
     */
    public function getSetupFeeHandling()
    {
        return $this->container['setup_fee_handling'];
    }

    /**
     * Sets setup_fee_handling
     *
     * @param string $setup_fee_handling How the billing of the setup fee should be done. The options are: `first` - include setup fee as order line on the first scheduled invoice. `separate` - create a separate invoice for the setup fee, is appropriate if first invoice is not in conjunction with creation. `separate_conditional` - create a separate invoice for setup fee if the first invoice is not created in conjunction with the creation. Default is `first`.
     *
     * @return $this
     */
    public function setSetupFeeHandling($setup_fee_handling)
    {
        $this->container['setup_fee_handling'] = $setup_fee_handling;

        return $this;
    }

    /**
     * Gets partial_proration_days
     *
     * @return bool
     */
    public function getPartialProrationDays()
    {
        return $this->container['partial_proration_days'];
    }

    /**
     * Sets partial_proration_days
     *
     * @param bool $partial_proration_days For fixed day scheduling and prorated partial handling calculate prorated amount using whole days counting start day as a full day, or use by the minute proration calculation from start date time to the next period start. Default is true (whole days).
     *
     * @return $this
     */
    public function setPartialProrationDays($partial_proration_days)
    {
        $this->container['partial_proration_days'] = $partial_proration_days;

        return $this;
    }

    /**
     * Gets fixed_trial_days
     *
     * @return bool
     */
    public function getFixedTrialDays()
    {
        return $this->container['fixed_trial_days'];
    }

    /**
     * Sets fixed_trial_days
     *
     * @param bool $fixed_trial_days When using trial for fixed day scheduling use this setting to control if trial expires at midnight or the trial period is down to the minute. Default is true (trial until start of day). Trial in days can only be true if `partial_proration_days` is also set to true.
     *
     * @return $this
     */
    public function setFixedTrialDays($fixed_trial_days)
    {
        $this->container['fixed_trial_days'] = $fixed_trial_days;

        return $this;
    }

    /**
     * Gets minimum_prorated_amount
     *
     * @return int
     */
    public function getMinimumProratedAmount()
    {
        return $this->container['minimum_prorated_amount'];
    }

    /**
     * Sets minimum_prorated_amount
     *
     * @param int $minimum_prorated_amount When using prorated partial handling the prorated amount for plan and add-ons might result in very small amounts. A minimum prorated amount for plan and add-ons can be defined. If the prorated amount is below this minimum the amount will be changed to zero.
     *
     * @return $this
     */
    public function setMinimumProratedAmount($minimum_prorated_amount)
    {
        $this->container['minimum_prorated_amount'] = $minimum_prorated_amount;

        return $this;
    }

    /**
     * Gets account_funding
     *
     * @return bool
     */
    public function getAccountFunding()
    {
        return $this->container['account_funding'];
    }

    /**
     * Sets account_funding
     *
     * @param bool $account_funding Indicates that Account Funding Transaction (AFT) is requested.
     *
     * @return $this
     */
    public function setAccountFunding($account_funding)
    {
        $this->container['account_funding'] = $account_funding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
