<?php
/**
 * EmvConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * EmvConfiguration Class Doc Comment
 *
 * @category Class
 * @description Configuration for enabling integration to Mastercard SCOF
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmvConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmvConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'emv_tokenization_status' => 'string',
        'token_requestor_id' => 'string',
        'onboarding_state' => 'string',
        'card_scheme' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'emv_tokenization_status' => null,
        'token_requestor_id' => null,
        'onboarding_state' => null,
        'card_scheme' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'emv_tokenization_status' => 'emvTokenizationStatus',
        'token_requestor_id' => 'tokenRequestorId',
        'onboarding_state' => 'onboardingState',
        'card_scheme' => 'cardScheme'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'emv_tokenization_status' => 'setEmvTokenizationStatus',
        'token_requestor_id' => 'setTokenRequestorId',
        'onboarding_state' => 'setOnboardingState',
        'card_scheme' => 'setCardScheme'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'emv_tokenization_status' => 'getEmvTokenizationStatus',
        'token_requestor_id' => 'getTokenRequestorId',
        'onboarding_state' => 'getOnboardingState',
        'card_scheme' => 'getCardScheme'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['emv_tokenization_status'] = isset($data['emv_tokenization_status']) ? $data['emv_tokenization_status'] : null;
        $this->container['token_requestor_id'] = isset($data['token_requestor_id']) ? $data['token_requestor_id'] : null;
        $this->container['onboarding_state'] = isset($data['onboarding_state']) ? $data['onboarding_state'] : null;
        $this->container['card_scheme'] = isset($data['card_scheme']) ? $data['card_scheme'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['emv_tokenization_status'] === null) {
            $invalidProperties[] = "'emv_tokenization_status' can't be null";
        }
        if ($this->container['token_requestor_id'] === null) {
            $invalidProperties[] = "'token_requestor_id' can't be null";
        }
        if ($this->container['card_scheme'] === null) {
            $invalidProperties[] = "'card_scheme' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets emv_tokenization_status
     *
     * @return string
     */
    public function getEmvTokenizationStatus()
    {
        return $this->container['emv_tokenization_status'];
    }

    /**
     * Sets emv_tokenization_status
     *
     * @param string $emv_tokenization_status emv_tokenization_status
     *
     * @return $this
     */
    public function setEmvTokenizationStatus($emv_tokenization_status)
    {
        $this->container['emv_tokenization_status'] = $emv_tokenization_status;

        return $this;
    }

    /**
     * Gets token_requestor_id
     *
     * @return string
     */
    public function getTokenRequestorId()
    {
        return $this->container['token_requestor_id'];
    }

    /**
     * Sets token_requestor_id
     *
     * @param string $token_requestor_id token_requestor_id
     *
     * @return $this
     */
    public function setTokenRequestorId($token_requestor_id)
    {
        $this->container['token_requestor_id'] = $token_requestor_id;

        return $this;
    }

    /**
     * Gets onboarding_state
     *
     * @return string
     */
    public function getOnboardingState()
    {
        return $this->container['onboarding_state'];
    }

    /**
     * Sets onboarding_state
     *
     * @param string $onboarding_state onboarding_state
     *
     * @return $this
     */
    public function setOnboardingState($onboarding_state)
    {
        $this->container['onboarding_state'] = $onboarding_state;

        return $this;
    }

    /**
     * Gets card_scheme
     *
     * @return string
     */
    public function getCardScheme()
    {
        return $this->container['card_scheme'];
    }

    /**
     * Sets card_scheme
     *
     * @param string $card_scheme card_scheme
     *
     * @return $this
     */
    public function setCardScheme($card_scheme)
    {
        $this->container['card_scheme'] = $card_scheme;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
