<?php
/**
 * Configuration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * Configuration Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Configuration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Configuration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'logo' => 'string',
        'locale' => 'string',
        'style_config' => '\Reepay\Model\StyleConfig',
        'handle' => 'string',
        'created' => '\DateTime',
        'payment_methods' => 'string[]',
        'co_branded_card_selection' => 'bool',
        'co_branded_visa_dankort_preference' => 'string',
        'amount_formatting' => 'string',
        'payment_type_priority' => 'string[]',
        'show_test_hints' => 'bool',
        'show_subscription_details_expanded' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'logo' => null,
        'locale' => null,
        'style_config' => null,
        'handle' => null,
        'created' => 'date-time',
        'payment_methods' => null,
        'co_branded_card_selection' => null,
        'co_branded_visa_dankort_preference' => null,
        'amount_formatting' => null,
        'payment_type_priority' => null,
        'show_test_hints' => null,
        'show_subscription_details_expanded' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'logo' => 'logo',
        'locale' => 'locale',
        'style_config' => 'styleConfig',
        'handle' => 'handle',
        'created' => 'created',
        'payment_methods' => 'payment_methods',
        'co_branded_card_selection' => 'co_branded_card_selection',
        'co_branded_visa_dankort_preference' => 'co_branded_visa_dankort_preference',
        'amount_formatting' => 'amount_formatting',
        'payment_type_priority' => 'payment_type_priority',
        'show_test_hints' => 'show_test_hints',
        'show_subscription_details_expanded' => 'show_subscription_details_expanded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'logo' => 'setLogo',
        'locale' => 'setLocale',
        'style_config' => 'setStyleConfig',
        'handle' => 'setHandle',
        'created' => 'setCreated',
        'payment_methods' => 'setPaymentMethods',
        'co_branded_card_selection' => 'setCoBrandedCardSelection',
        'co_branded_visa_dankort_preference' => 'setCoBrandedVisaDankortPreference',
        'amount_formatting' => 'setAmountFormatting',
        'payment_type_priority' => 'setPaymentTypePriority',
        'show_test_hints' => 'setShowTestHints',
        'show_subscription_details_expanded' => 'setShowSubscriptionDetailsExpanded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'logo' => 'getLogo',
        'locale' => 'getLocale',
        'style_config' => 'getStyleConfig',
        'handle' => 'getHandle',
        'created' => 'getCreated',
        'payment_methods' => 'getPaymentMethods',
        'co_branded_card_selection' => 'getCoBrandedCardSelection',
        'co_branded_visa_dankort_preference' => 'getCoBrandedVisaDankortPreference',
        'amount_formatting' => 'getAmountFormatting',
        'payment_type_priority' => 'getPaymentTypePriority',
        'show_test_hints' => 'getShowTestHints',
        'show_subscription_details_expanded' => 'getShowSubscriptionDetailsExpanded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AMOUNT_FORMATTING_CODE = 'currency_code';
    const AMOUNT_FORMATTING_SYMBOL = 'currency_symbol';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAmountFormattingAllowableValues()
    {
        return [
            self::AMOUNT_FORMATTING_CODE,
            self::AMOUNT_FORMATTING_SYMBOL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['style_config'] = isset($data['style_config']) ? $data['style_config'] : null;
        $this->container['handle'] = isset($data['handle']) ? $data['handle'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['co_branded_card_selection'] = isset($data['co_branded_card_selection']) ? $data['co_branded_card_selection'] : null;
        $this->container['co_branded_visa_dankort_preference'] = isset($data['co_branded_visa_dankort_preference']) ? $data['co_branded_visa_dankort_preference'] : null;
        $this->container['amount_formatting'] = isset($data['amount_formatting']) ? $data['amount_formatting'] : null;
        $this->container['payment_type_priority'] = isset($data['payment_type_priority']) ? $data['payment_type_priority'] : null;
        $this->container['show_test_hints'] = isset($data['show_test_hints']) ? $data['show_test_hints'] : null;
        $this->container['show_subscription_details_expanded'] = isset($data['show_subscription_details_expanded']) ? $data['show_subscription_details_expanded'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        $allowedValues = $this->getAmountFormattingAllowableValues();
        if (!is_null($this->container['amount_formatting']) && !in_array($this->container['amount_formatting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'amount_formatting', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Descriptive name for configuration
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo Logo url. Must be hosted on a *.reepay.com domain.
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale Locale to use if not provided when creating session. Defaults to account locale.
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets style_config
     *
     * @return \Reepay\Model\StyleConfig
     */
    public function getStyleConfig()
    {
        return $this->container['style_config'];
    }

    /**
     * Sets style_config
     *
     * @param \Reepay\Model\StyleConfig $style_config style_config
     *
     * @return $this
     */
    public function setStyleConfig($style_config)
    {
        $this->container['style_config'] = $style_config;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle handle
     *
     * @return $this
     */
    public function setHandle($handle)
    {
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return string[]
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param string[] $payment_methods Optional lists of payment methods to use for sessions with this configuration
     *
     * @return $this
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets co_branded_card_selection
     *
     * @return bool
     */
    public function getCoBrandedCardSelection()
    {
        return $this->container['co_branded_card_selection'];
    }

    /**
     * Sets co_branded_card_selection
     *
     * @param bool $co_branded_card_selection Option to control if the cardholder should be able to choose which part of a co-branded card to use. Defaults to false.
     *
     * @return $this
     */
    public function setCoBrandedCardSelection($co_branded_card_selection)
    {
        $this->container['co_branded_card_selection'] = $co_branded_card_selection;

        return $this;
    }

    /**
     * Gets co_branded_visa_dankort_preference
     *
     * @return string
     */
    public function getCoBrandedVisaDankortPreference()
    {
        return $this->container['co_branded_visa_dankort_preference'];
    }

    /**
     * Sets co_branded_visa_dankort_preference
     *
     * @param string $co_branded_visa_dankort_preference Default selected part of a co-branded Visa-Dankort if `co_branded_card_selection` enabled and cardholder makes no specific selection.
     *
     * @return $this
     */
    public function setCoBrandedVisaDankortPreference($co_branded_visa_dankort_preference)
    {
        $this->container['co_branded_visa_dankort_preference'] = $co_branded_visa_dankort_preference;

        return $this;
    }

    /**
     * Gets amount_formatting
     *
     * @return string
     */
    public function getAmountFormatting()
    {
        return $this->container['amount_formatting'];
    }

    /**
     * Sets amount_formatting
     *
     * @param string $amount_formatting How to format amount and currency: `currency_code` - with currency code, e.g. 100 USD (default), or `currency_symbol` - with symbol, e.g. $100
     *
     * @return $this
     */
    public function setAmountFormatting($amount_formatting)
    {
        $allowedValues = $this->getAmountFormattingAllowableValues();
        if (!is_null($amount_formatting) && !in_array($amount_formatting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'amount_formatting', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['amount_formatting'] = $amount_formatting;

        return $this;
    }

    /**
     * Gets payment_type_priority
     *
     * @return string[]
     */
    public function getPaymentTypePriority()
    {
        return $this->container['payment_type_priority'];
    }

    /**
     * Sets payment_type_priority
     *
     * @param string[] $payment_type_priority List of payment types giving the order in the checkout
     *
     * @return $this
     */
    public function setPaymentTypePriority($payment_type_priority)
    {
        $this->container['payment_type_priority'] = $payment_type_priority;

        return $this;
    }

    /**
     * Gets show_test_hints
     *
     * @return bool
     */
    public function getShowTestHints()
    {
        return $this->container['show_test_hints'];
    }

    /**
     * Sets show_test_hints
     *
     * @param bool $show_test_hints For test accounts, use this setting to control if info boxes with hints on how to perform testing should be shown in Checkout.
     *
     * @return $this
     */
    public function setShowTestHints($show_test_hints)
    {
        $this->container['show_test_hints'] = $show_test_hints;

        return $this;
    }

    /**
     * Gets show_subscription_details_expanded
     *
     * @return bool
     */
    public function getShowSubscriptionDetailsExpanded()
    {
        return $this->container['show_subscription_details_expanded'];
    }

    /**
     * Sets show_subscription_details_expanded
     *
     * @param bool $show_subscription_details_expanded A property, which shows if subscription details should be expanded in Checkout.
     *
     * @return $this
     */
    public function setShowSubscriptionDetailsExpanded($show_subscription_details_expanded)
    {
        $this->container['show_subscription_details_expanded'] = $show_subscription_details_expanded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
