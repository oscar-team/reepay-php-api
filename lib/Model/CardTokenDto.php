<?php
/**
 * CardTokenDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * CardTokenDto Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CardTokenDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CardTokenDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'state' => 'string',
        'ip' => 'string',
        'fingerprint' => 'string',
        'agreement_id' => 'string',
        'transaction_card_type' => 'string',
        'card_type' => 'string',
        'payment_type' => 'string',
        'pan_type' => 'string',
        'card_country' => 'string',
        'exp_month' => 'int',
        'exp_year' => 'int',
        'masked_card_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'state' => null,
        'ip' => null,
        'fingerprint' => null,
        'agreement_id' => null,
        'transaction_card_type' => null,
        'card_type' => null,
        'payment_type' => null,
        'pan_type' => null,
        'card_country' => null,
        'exp_month' => 'int32',
        'exp_year' => 'int32',
        'masked_card_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'state' => 'state',
        'ip' => 'ip',
        'fingerprint' => 'fingerprint',
        'agreement_id' => 'agreement_id',
        'transaction_card_type' => 'transaction_card_type',
        'card_type' => 'card_type',
        'payment_type' => 'payment_type',
        'pan_type' => 'pan_type',
        'card_country' => 'card_country',
        'exp_month' => 'exp_month',
        'exp_year' => 'exp_year',
        'masked_card_number' => 'masked_card_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'state' => 'setState',
        'ip' => 'setIp',
        'fingerprint' => 'setFingerprint',
        'agreement_id' => 'setAgreementId',
        'transaction_card_type' => 'setTransactionCardType',
        'card_type' => 'setCardType',
        'payment_type' => 'setPaymentType',
        'pan_type' => 'setPanType',
        'card_country' => 'setCardCountry',
        'exp_month' => 'setExpMonth',
        'exp_year' => 'setExpYear',
        'masked_card_number' => 'setMaskedCardNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'state' => 'getState',
        'ip' => 'getIp',
        'fingerprint' => 'getFingerprint',
        'agreement_id' => 'getAgreementId',
        'transaction_card_type' => 'getTransactionCardType',
        'card_type' => 'getCardType',
        'payment_type' => 'getPaymentType',
        'pan_type' => 'getPanType',
        'card_country' => 'getCardCountry',
        'exp_month' => 'getExpMonth',
        'exp_year' => 'getExpYear',
        'masked_card_number' => 'getMaskedCardNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_PENDING = 'PENDING';
    const STATE_AWAIT_THREEDV2_METHOD = 'AWAIT_THREEDV2_METHOD';
    const STATE_THREEDV2_METHOD_COMPLETED = 'THREEDV2_METHOD_COMPLETED';
    const STATE_AWAIT_THREEDV2_CHALLENGE = 'AWAIT_THREEDV2_CHALLENGE';
    const STATE_THREEDV2_CHALLENGE_COMPLETED = 'THREEDV2_CHALLENGE_COMPLETED';
    const STATE_SCA_COMPLETED = 'SCA_COMPLETED';
    const STATE_COMPLETED = 'COMPLETED';
    const STATE_FAILED = 'FAILED';
    const TRANSACTION_CARD_TYPE_UNKNOWN = 'UNKNOWN';
    const TRANSACTION_CARD_TYPE_VISA = 'VISA';
    const TRANSACTION_CARD_TYPE_MC = 'MC';
    const TRANSACTION_CARD_TYPE_DANKORT = 'DANKORT';
    const TRANSACTION_CARD_TYPE_VISA_DK = 'VISA_DK';
    const TRANSACTION_CARD_TYPE_FFK = 'FFK';
    const TRANSACTION_CARD_TYPE_VISA_ELEC = 'VISA_ELEC';
    const TRANSACTION_CARD_TYPE_MAESTRO = 'MAESTRO';
    const TRANSACTION_CARD_TYPE_LASER = 'LASER';
    const TRANSACTION_CARD_TYPE_AMEX = 'AMEX';
    const TRANSACTION_CARD_TYPE_DINERS = 'DINERS';
    const TRANSACTION_CARD_TYPE_DISCOVER = 'DISCOVER';
    const TRANSACTION_CARD_TYPE_JCB = 'JCB';
    const TRANSACTION_CARD_TYPE_CHINA_UNION_PAY = 'CHINA_UNION_PAY';
    const CARD_TYPE_UNKNOWN = 'UNKNOWN';
    const CARD_TYPE_VISA = 'VISA';
    const CARD_TYPE_MC = 'MC';
    const CARD_TYPE_DANKORT = 'DANKORT';
    const CARD_TYPE_VISA_DK = 'VISA_DK';
    const CARD_TYPE_FFK = 'FFK';
    const CARD_TYPE_VISA_ELEC = 'VISA_ELEC';
    const CARD_TYPE_MAESTRO = 'MAESTRO';
    const CARD_TYPE_LASER = 'LASER';
    const CARD_TYPE_AMEX = 'AMEX';
    const CARD_TYPE_DINERS = 'DINERS';
    const CARD_TYPE_DISCOVER = 'DISCOVER';
    const CARD_TYPE_JCB = 'JCB';
    const CARD_TYPE_CHINA_UNION_PAY = 'CHINA_UNION_PAY';
    const PAYMENT_TYPE_CARD = 'CARD';
    const PAYMENT_TYPE_ANYDAY = 'ANYDAY';
    const PAYMENT_TYPE_APPLEPAY = 'APPLEPAY';
    const PAYMENT_TYPE_GOOGLEPAY = 'GOOGLEPAY';
    const PAYMENT_TYPE_PAYPAL = 'PAYPAL';
    const PAYMENT_TYPE_SWISH = 'SWISH';
    const PAYMENT_TYPE_VIABILL = 'VIABILL';
    const PAYMENT_TYPE_VIPPS = 'VIPPS';
    const PAYMENT_TYPE_VIPPS_RECURRING = 'VIPPS_RECURRING';
    const PAYMENT_TYPE_MOBILEPAY = 'MOBILEPAY';
    const PAYMENT_TYPE_MOBILEPAY_SUBSCRIPTIONS = 'MOBILEPAY_SUBSCRIPTIONS';
    const PAYMENT_TYPE_KLARNA_PAY_NOW = 'KLARNA_PAY_NOW';
    const PAYMENT_TYPE_KLARNA_PAY_LATER = 'KLARNA_PAY_LATER';
    const PAYMENT_TYPE_KLARNA_SLICE_IT = 'KLARNA_SLICE_IT';
    const PAYMENT_TYPE_KLARNA_DIRECT_BANK_TRANSFER = 'KLARNA_DIRECT_BANK_TRANSFER';
    const PAYMENT_TYPE_KLARNA_DIRECT_DEBIT = 'KLARNA_DIRECT_DEBIT';
    const PAYMENT_TYPE_RESURS = 'RESURS';
    const PAYMENT_TYPE_EMV_TOKEN = 'EMV_TOKEN';
    const PAYMENT_TYPE_PP_BANCONTACT = 'PP_BANCONTACT';
    const PAYMENT_TYPE_PP_BLIK = 'PP_BLIK';
    const PAYMENT_TYPE_PP_BLIK_OC = 'PP_BLIK_OC';
    const PAYMENT_TYPE_PP_EPS = 'PP_EPS';
    const PAYMENT_TYPE_PP_ESTONIA_BANKS = 'PP_ESTONIA_BANKS';
    const PAYMENT_TYPE_PP_GIROPAY = 'PP_GIROPAY';
    const PAYMENT_TYPE_PP_IDEAL = 'PP_IDEAL';
    const PAYMENT_TYPE_PP_LATVIA_BANKS = 'PP_LATVIA_BANKS';
    const PAYMENT_TYPE_PP_LITHUANIA_BANKS = 'PP_LITHUANIA_BANKS';
    const PAYMENT_TYPE_PP_MB_WAY = 'PP_MB_WAY';
    const PAYMENT_TYPE_PP_MULTIBANCO = 'PP_MULTIBANCO';
    const PAYMENT_TYPE_PP_MYBANK = 'PP_MYBANK';
    const PAYMENT_TYPE_PP_P24 = 'PP_P24';
    const PAYMENT_TYPE_PP_PAYCONIQ = 'PP_PAYCONIQ';
    const PAYMENT_TYPE_PP_PAYSAFECARD = 'PP_PAYSAFECARD';
    const PAYMENT_TYPE_PP_PAYSERA = 'PP_PAYSERA';
    const PAYMENT_TYPE_PP_POSTFINANCE = 'PP_POSTFINANCE';
    const PAYMENT_TYPE_PP_SATISPAY = 'PP_SATISPAY';
    const PAYMENT_TYPE_PP_SEPA = 'PP_SEPA';
    const PAYMENT_TYPE_PP_TRUSTLY = 'PP_TRUSTLY';
    const PAYMENT_TYPE_PP_VERKKOPANKKI = 'PP_VERKKOPANKKI';
    const PAYMENT_TYPE_PP_WECHATPAY = 'PP_WECHATPAY';
    const PAYMENT_TYPE_PE_SANTANDER = 'PE_SANTANDER';
    const PAYMENT_TYPE_MANUAL = 'MANUAL';
    const PAYMENT_TYPE_OFFLINE_BANK_TRANSFER = 'OFFLINE_BANK_TRANSFER';
    const PAYMENT_TYPE_OFFLINE_CASH = 'OFFLINE_CASH';
    const PAYMENT_TYPE_OFFLINE_OTHER = 'OFFLINE_OTHER';
    const PAN_TYPE_CARD = 'CARD';
    const PAN_TYPE_TOKEN = 'TOKEN';
    const PAN_TYPE_RECURRING_TOKEN = 'RECURRING_TOKEN';
    const CARD_COUNTRY_UNDEFINED = 'UNDEFINED';
    const CARD_COUNTRY_AC = 'AC';
    const CARD_COUNTRY_AD = 'AD';
    const CARD_COUNTRY_AE = 'AE';
    const CARD_COUNTRY_AF = 'AF';
    const CARD_COUNTRY_AG = 'AG';
    const CARD_COUNTRY_AI = 'AI';
    const CARD_COUNTRY_AL = 'AL';
    const CARD_COUNTRY_AM = 'AM';
    const CARD_COUNTRY_AN = 'AN';
    const CARD_COUNTRY_AO = 'AO';
    const CARD_COUNTRY_AQ = 'AQ';
    const CARD_COUNTRY_AR = 'AR';
    const CARD_COUNTRY__AS = 'AS';
    const CARD_COUNTRY_AT = 'AT';
    const CARD_COUNTRY_AU = 'AU';
    const CARD_COUNTRY_AW = 'AW';
    const CARD_COUNTRY_AX = 'AX';
    const CARD_COUNTRY_AZ = 'AZ';
    const CARD_COUNTRY_BA = 'BA';
    const CARD_COUNTRY_BB = 'BB';
    const CARD_COUNTRY_BD = 'BD';
    const CARD_COUNTRY_BE = 'BE';
    const CARD_COUNTRY_BF = 'BF';
    const CARD_COUNTRY_BG = 'BG';
    const CARD_COUNTRY_BH = 'BH';
    const CARD_COUNTRY_BI = 'BI';
    const CARD_COUNTRY_BJ = 'BJ';
    const CARD_COUNTRY_BL = 'BL';
    const CARD_COUNTRY_BM = 'BM';
    const CARD_COUNTRY_BN = 'BN';
    const CARD_COUNTRY_BO = 'BO';
    const CARD_COUNTRY_BQ = 'BQ';
    const CARD_COUNTRY_BR = 'BR';
    const CARD_COUNTRY_BS = 'BS';
    const CARD_COUNTRY_BT = 'BT';
    const CARD_COUNTRY_BU = 'BU';
    const CARD_COUNTRY_BV = 'BV';
    const CARD_COUNTRY_BW = 'BW';
    const CARD_COUNTRY_BY = 'BY';
    const CARD_COUNTRY_BZ = 'BZ';
    const CARD_COUNTRY_CA = 'CA';
    const CARD_COUNTRY_CC = 'CC';
    const CARD_COUNTRY_CD = 'CD';
    const CARD_COUNTRY_CF = 'CF';
    const CARD_COUNTRY_CG = 'CG';
    const CARD_COUNTRY_CH = 'CH';
    const CARD_COUNTRY_CI = 'CI';
    const CARD_COUNTRY_CK = 'CK';
    const CARD_COUNTRY_CL = 'CL';
    const CARD_COUNTRY_CM = 'CM';
    const CARD_COUNTRY_CN = 'CN';
    const CARD_COUNTRY_CO = 'CO';
    const CARD_COUNTRY_CP = 'CP';
    const CARD_COUNTRY_CR = 'CR';
    const CARD_COUNTRY_CS = 'CS';
    const CARD_COUNTRY_CU = 'CU';
    const CARD_COUNTRY_CV = 'CV';
    const CARD_COUNTRY_CW = 'CW';
    const CARD_COUNTRY_CX = 'CX';
    const CARD_COUNTRY_CY = 'CY';
    const CARD_COUNTRY_CZ = 'CZ';
    const CARD_COUNTRY_DE = 'DE';
    const CARD_COUNTRY_DG = 'DG';
    const CARD_COUNTRY_DJ = 'DJ';
    const CARD_COUNTRY_DK = 'DK';
    const CARD_COUNTRY_DM = 'DM';
    const CARD_COUNTRY__DO = 'DO';
    const CARD_COUNTRY_DZ = 'DZ';
    const CARD_COUNTRY_EA = 'EA';
    const CARD_COUNTRY_EC = 'EC';
    const CARD_COUNTRY_EE = 'EE';
    const CARD_COUNTRY_EG = 'EG';
    const CARD_COUNTRY_EH = 'EH';
    const CARD_COUNTRY_ER = 'ER';
    const CARD_COUNTRY_ES = 'ES';
    const CARD_COUNTRY_ET = 'ET';
    const CARD_COUNTRY_EU = 'EU';
    const CARD_COUNTRY_FI = 'FI';
    const CARD_COUNTRY_FJ = 'FJ';
    const CARD_COUNTRY_FK = 'FK';
    const CARD_COUNTRY_FM = 'FM';
    const CARD_COUNTRY_FO = 'FO';
    const CARD_COUNTRY_FR = 'FR';
    const CARD_COUNTRY_FX = 'FX';
    const CARD_COUNTRY_GA = 'GA';
    const CARD_COUNTRY_GB = 'GB';
    const CARD_COUNTRY_GD = 'GD';
    const CARD_COUNTRY_GE = 'GE';
    const CARD_COUNTRY_GF = 'GF';
    const CARD_COUNTRY_GG = 'GG';
    const CARD_COUNTRY_GH = 'GH';
    const CARD_COUNTRY_GI = 'GI';
    const CARD_COUNTRY_GL = 'GL';
    const CARD_COUNTRY_GM = 'GM';
    const CARD_COUNTRY_GN = 'GN';
    const CARD_COUNTRY_GP = 'GP';
    const CARD_COUNTRY_GQ = 'GQ';
    const CARD_COUNTRY_GR = 'GR';
    const CARD_COUNTRY_GS = 'GS';
    const CARD_COUNTRY_GT = 'GT';
    const CARD_COUNTRY_GU = 'GU';
    const CARD_COUNTRY_GW = 'GW';
    const CARD_COUNTRY_GY = 'GY';
    const CARD_COUNTRY_HK = 'HK';
    const CARD_COUNTRY_HM = 'HM';
    const CARD_COUNTRY_HN = 'HN';
    const CARD_COUNTRY_HR = 'HR';
    const CARD_COUNTRY_HT = 'HT';
    const CARD_COUNTRY_HU = 'HU';
    const CARD_COUNTRY_IC = 'IC';
    const CARD_COUNTRY_ID = 'ID';
    const CARD_COUNTRY_IE = 'IE';
    const CARD_COUNTRY_IL = 'IL';
    const CARD_COUNTRY_IM = 'IM';
    const CARD_COUNTRY_IN = 'IN';
    const CARD_COUNTRY_IO = 'IO';
    const CARD_COUNTRY_IQ = 'IQ';
    const CARD_COUNTRY_IR = 'IR';
    const CARD_COUNTRY_IS = 'IS';
    const CARD_COUNTRY_IT = 'IT';
    const CARD_COUNTRY_JE = 'JE';
    const CARD_COUNTRY_JM = 'JM';
    const CARD_COUNTRY_JO = 'JO';
    const CARD_COUNTRY_JP = 'JP';
    const CARD_COUNTRY_KE = 'KE';
    const CARD_COUNTRY_KG = 'KG';
    const CARD_COUNTRY_KH = 'KH';
    const CARD_COUNTRY_KI = 'KI';
    const CARD_COUNTRY_KM = 'KM';
    const CARD_COUNTRY_KN = 'KN';
    const CARD_COUNTRY_KP = 'KP';
    const CARD_COUNTRY_KR = 'KR';
    const CARD_COUNTRY_KW = 'KW';
    const CARD_COUNTRY_KY = 'KY';
    const CARD_COUNTRY_KZ = 'KZ';
    const CARD_COUNTRY_LA = 'LA';
    const CARD_COUNTRY_LB = 'LB';
    const CARD_COUNTRY_LC = 'LC';
    const CARD_COUNTRY_LI = 'LI';
    const CARD_COUNTRY_LK = 'LK';
    const CARD_COUNTRY_LR = 'LR';
    const CARD_COUNTRY_LS = 'LS';
    const CARD_COUNTRY_LT = 'LT';
    const CARD_COUNTRY_LU = 'LU';
    const CARD_COUNTRY_LV = 'LV';
    const CARD_COUNTRY_LY = 'LY';
    const CARD_COUNTRY_MA = 'MA';
    const CARD_COUNTRY_MC = 'MC';
    const CARD_COUNTRY_MD = 'MD';
    const CARD_COUNTRY_ME = 'ME';
    const CARD_COUNTRY_MF = 'MF';
    const CARD_COUNTRY_MG = 'MG';
    const CARD_COUNTRY_MH = 'MH';
    const CARD_COUNTRY_MK = 'MK';
    const CARD_COUNTRY_ML = 'ML';
    const CARD_COUNTRY_MM = 'MM';
    const CARD_COUNTRY_MN = 'MN';
    const CARD_COUNTRY_MO = 'MO';
    const CARD_COUNTRY_MP = 'MP';
    const CARD_COUNTRY_MQ = 'MQ';
    const CARD_COUNTRY_MR = 'MR';
    const CARD_COUNTRY_MS = 'MS';
    const CARD_COUNTRY_MT = 'MT';
    const CARD_COUNTRY_MU = 'MU';
    const CARD_COUNTRY_MV = 'MV';
    const CARD_COUNTRY_MW = 'MW';
    const CARD_COUNTRY_MX = 'MX';
    const CARD_COUNTRY_MY = 'MY';
    const CARD_COUNTRY_MZ = 'MZ';
    const CARD_COUNTRY_NA = 'NA';
    const CARD_COUNTRY_NC = 'NC';
    const CARD_COUNTRY_NE = 'NE';
    const CARD_COUNTRY_NF = 'NF';
    const CARD_COUNTRY_NG = 'NG';
    const CARD_COUNTRY_NI = 'NI';
    const CARD_COUNTRY_NL = 'NL';
    const CARD_COUNTRY_NO = 'NO';
    const CARD_COUNTRY_NP = 'NP';
    const CARD_COUNTRY_NR = 'NR';
    const CARD_COUNTRY_NT = 'NT';
    const CARD_COUNTRY_NU = 'NU';
    const CARD_COUNTRY_NZ = 'NZ';
    const CARD_COUNTRY_OM = 'OM';
    const CARD_COUNTRY_PA = 'PA';
    const CARD_COUNTRY_PE = 'PE';
    const CARD_COUNTRY_PF = 'PF';
    const CARD_COUNTRY_PG = 'PG';
    const CARD_COUNTRY_PH = 'PH';
    const CARD_COUNTRY_PK = 'PK';
    const CARD_COUNTRY_PL = 'PL';
    const CARD_COUNTRY_PM = 'PM';
    const CARD_COUNTRY_PN = 'PN';
    const CARD_COUNTRY_PR = 'PR';
    const CARD_COUNTRY_PS = 'PS';
    const CARD_COUNTRY_PT = 'PT';
    const CARD_COUNTRY_PW = 'PW';
    const CARD_COUNTRY_PY = 'PY';
    const CARD_COUNTRY_QA = 'QA';
    const CARD_COUNTRY_RE = 'RE';
    const CARD_COUNTRY_RO = 'RO';
    const CARD_COUNTRY_RS = 'RS';
    const CARD_COUNTRY_RU = 'RU';
    const CARD_COUNTRY_RW = 'RW';
    const CARD_COUNTRY_SA = 'SA';
    const CARD_COUNTRY_SB = 'SB';
    const CARD_COUNTRY_SC = 'SC';
    const CARD_COUNTRY_SD = 'SD';
    const CARD_COUNTRY_SE = 'SE';
    const CARD_COUNTRY_SF = 'SF';
    const CARD_COUNTRY_SG = 'SG';
    const CARD_COUNTRY_SH = 'SH';
    const CARD_COUNTRY_SI = 'SI';
    const CARD_COUNTRY_SJ = 'SJ';
    const CARD_COUNTRY_SK = 'SK';
    const CARD_COUNTRY_SL = 'SL';
    const CARD_COUNTRY_SM = 'SM';
    const CARD_COUNTRY_SN = 'SN';
    const CARD_COUNTRY_SO = 'SO';
    const CARD_COUNTRY_SR = 'SR';
    const CARD_COUNTRY_SS = 'SS';
    const CARD_COUNTRY_ST = 'ST';
    const CARD_COUNTRY_SU = 'SU';
    const CARD_COUNTRY_SV = 'SV';
    const CARD_COUNTRY_SX = 'SX';
    const CARD_COUNTRY_SY = 'SY';
    const CARD_COUNTRY_SZ = 'SZ';
    const CARD_COUNTRY_TA = 'TA';
    const CARD_COUNTRY_TC = 'TC';
    const CARD_COUNTRY_TD = 'TD';
    const CARD_COUNTRY_TF = 'TF';
    const CARD_COUNTRY_TG = 'TG';
    const CARD_COUNTRY_TH = 'TH';
    const CARD_COUNTRY_TJ = 'TJ';
    const CARD_COUNTRY_TK = 'TK';
    const CARD_COUNTRY_TL = 'TL';
    const CARD_COUNTRY_TM = 'TM';
    const CARD_COUNTRY_TN = 'TN';
    const CARD_COUNTRY_TO = 'TO';
    const CARD_COUNTRY_TP = 'TP';
    const CARD_COUNTRY_TR = 'TR';
    const CARD_COUNTRY_TT = 'TT';
    const CARD_COUNTRY_TV = 'TV';
    const CARD_COUNTRY_TW = 'TW';
    const CARD_COUNTRY_TZ = 'TZ';
    const CARD_COUNTRY_UA = 'UA';
    const CARD_COUNTRY_UG = 'UG';
    const CARD_COUNTRY_UK = 'UK';
    const CARD_COUNTRY_UM = 'UM';
    const CARD_COUNTRY_US = 'US';
    const CARD_COUNTRY_UY = 'UY';
    const CARD_COUNTRY_UZ = 'UZ';
    const CARD_COUNTRY_VA = 'VA';
    const CARD_COUNTRY_VC = 'VC';
    const CARD_COUNTRY_VE = 'VE';
    const CARD_COUNTRY_VG = 'VG';
    const CARD_COUNTRY_VI = 'VI';
    const CARD_COUNTRY_VN = 'VN';
    const CARD_COUNTRY_VU = 'VU';
    const CARD_COUNTRY_WF = 'WF';
    const CARD_COUNTRY_WS = 'WS';
    const CARD_COUNTRY_XK = 'XK';
    const CARD_COUNTRY_YE = 'YE';
    const CARD_COUNTRY_YT = 'YT';
    const CARD_COUNTRY_YU = 'YU';
    const CARD_COUNTRY_ZA = 'ZA';
    const CARD_COUNTRY_ZM = 'ZM';
    const CARD_COUNTRY_ZR = 'ZR';
    const CARD_COUNTRY_ZW = 'ZW';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PENDING,
            self::STATE_AWAIT_THREEDV2_METHOD,
            self::STATE_THREEDV2_METHOD_COMPLETED,
            self::STATE_AWAIT_THREEDV2_CHALLENGE,
            self::STATE_THREEDV2_CHALLENGE_COMPLETED,
            self::STATE_SCA_COMPLETED,
            self::STATE_COMPLETED,
            self::STATE_FAILED,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionCardTypeAllowableValues()
    {
        return [
            self::TRANSACTION_CARD_TYPE_UNKNOWN,
            self::TRANSACTION_CARD_TYPE_VISA,
            self::TRANSACTION_CARD_TYPE_MC,
            self::TRANSACTION_CARD_TYPE_DANKORT,
            self::TRANSACTION_CARD_TYPE_VISA_DK,
            self::TRANSACTION_CARD_TYPE_FFK,
            self::TRANSACTION_CARD_TYPE_VISA_ELEC,
            self::TRANSACTION_CARD_TYPE_MAESTRO,
            self::TRANSACTION_CARD_TYPE_LASER,
            self::TRANSACTION_CARD_TYPE_AMEX,
            self::TRANSACTION_CARD_TYPE_DINERS,
            self::TRANSACTION_CARD_TYPE_DISCOVER,
            self::TRANSACTION_CARD_TYPE_JCB,
            self::TRANSACTION_CARD_TYPE_CHINA_UNION_PAY,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_UNKNOWN,
            self::CARD_TYPE_VISA,
            self::CARD_TYPE_MC,
            self::CARD_TYPE_DANKORT,
            self::CARD_TYPE_VISA_DK,
            self::CARD_TYPE_FFK,
            self::CARD_TYPE_VISA_ELEC,
            self::CARD_TYPE_MAESTRO,
            self::CARD_TYPE_LASER,
            self::CARD_TYPE_AMEX,
            self::CARD_TYPE_DINERS,
            self::CARD_TYPE_DISCOVER,
            self::CARD_TYPE_JCB,
            self::CARD_TYPE_CHINA_UNION_PAY,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_CARD,
            self::PAYMENT_TYPE_ANYDAY,
            self::PAYMENT_TYPE_APPLEPAY,
            self::PAYMENT_TYPE_GOOGLEPAY,
            self::PAYMENT_TYPE_PAYPAL,
            self::PAYMENT_TYPE_SWISH,
            self::PAYMENT_TYPE_VIABILL,
            self::PAYMENT_TYPE_VIPPS,
            self::PAYMENT_TYPE_VIPPS_RECURRING,
            self::PAYMENT_TYPE_MOBILEPAY,
            self::PAYMENT_TYPE_MOBILEPAY_SUBSCRIPTIONS,
            self::PAYMENT_TYPE_KLARNA_PAY_NOW,
            self::PAYMENT_TYPE_KLARNA_PAY_LATER,
            self::PAYMENT_TYPE_KLARNA_SLICE_IT,
            self::PAYMENT_TYPE_KLARNA_DIRECT_BANK_TRANSFER,
            self::PAYMENT_TYPE_KLARNA_DIRECT_DEBIT,
            self::PAYMENT_TYPE_RESURS,
            self::PAYMENT_TYPE_EMV_TOKEN,
            self::PAYMENT_TYPE_PP_BANCONTACT,
            self::PAYMENT_TYPE_PP_BLIK,
            self::PAYMENT_TYPE_PP_BLIK_OC,
            self::PAYMENT_TYPE_PP_EPS,
            self::PAYMENT_TYPE_PP_ESTONIA_BANKS,
            self::PAYMENT_TYPE_PP_GIROPAY,
            self::PAYMENT_TYPE_PP_IDEAL,
            self::PAYMENT_TYPE_PP_LATVIA_BANKS,
            self::PAYMENT_TYPE_PP_LITHUANIA_BANKS,
            self::PAYMENT_TYPE_PP_MB_WAY,
            self::PAYMENT_TYPE_PP_MULTIBANCO,
            self::PAYMENT_TYPE_PP_MYBANK,
            self::PAYMENT_TYPE_PP_P24,
            self::PAYMENT_TYPE_PP_PAYCONIQ,
            self::PAYMENT_TYPE_PP_PAYSAFECARD,
            self::PAYMENT_TYPE_PP_PAYSERA,
            self::PAYMENT_TYPE_PP_POSTFINANCE,
            self::PAYMENT_TYPE_PP_SATISPAY,
            self::PAYMENT_TYPE_PP_SEPA,
            self::PAYMENT_TYPE_PP_TRUSTLY,
            self::PAYMENT_TYPE_PP_VERKKOPANKKI,
            self::PAYMENT_TYPE_PP_WECHATPAY,
            self::PAYMENT_TYPE_PE_SANTANDER,
            self::PAYMENT_TYPE_MANUAL,
            self::PAYMENT_TYPE_OFFLINE_BANK_TRANSFER,
            self::PAYMENT_TYPE_OFFLINE_CASH,
            self::PAYMENT_TYPE_OFFLINE_OTHER,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPanTypeAllowableValues()
    {
        return [
            self::PAN_TYPE_CARD,
            self::PAN_TYPE_TOKEN,
            self::PAN_TYPE_RECURRING_TOKEN,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardCountryAllowableValues()
    {
        return [
            self::CARD_COUNTRY_UNDEFINED,
            self::CARD_COUNTRY_AC,
            self::CARD_COUNTRY_AD,
            self::CARD_COUNTRY_AE,
            self::CARD_COUNTRY_AF,
            self::CARD_COUNTRY_AG,
            self::CARD_COUNTRY_AI,
            self::CARD_COUNTRY_AL,
            self::CARD_COUNTRY_AM,
            self::CARD_COUNTRY_AN,
            self::CARD_COUNTRY_AO,
            self::CARD_COUNTRY_AQ,
            self::CARD_COUNTRY_AR,
            self::CARD_COUNTRY__AS,
            self::CARD_COUNTRY_AT,
            self::CARD_COUNTRY_AU,
            self::CARD_COUNTRY_AW,
            self::CARD_COUNTRY_AX,
            self::CARD_COUNTRY_AZ,
            self::CARD_COUNTRY_BA,
            self::CARD_COUNTRY_BB,
            self::CARD_COUNTRY_BD,
            self::CARD_COUNTRY_BE,
            self::CARD_COUNTRY_BF,
            self::CARD_COUNTRY_BG,
            self::CARD_COUNTRY_BH,
            self::CARD_COUNTRY_BI,
            self::CARD_COUNTRY_BJ,
            self::CARD_COUNTRY_BL,
            self::CARD_COUNTRY_BM,
            self::CARD_COUNTRY_BN,
            self::CARD_COUNTRY_BO,
            self::CARD_COUNTRY_BQ,
            self::CARD_COUNTRY_BR,
            self::CARD_COUNTRY_BS,
            self::CARD_COUNTRY_BT,
            self::CARD_COUNTRY_BU,
            self::CARD_COUNTRY_BV,
            self::CARD_COUNTRY_BW,
            self::CARD_COUNTRY_BY,
            self::CARD_COUNTRY_BZ,
            self::CARD_COUNTRY_CA,
            self::CARD_COUNTRY_CC,
            self::CARD_COUNTRY_CD,
            self::CARD_COUNTRY_CF,
            self::CARD_COUNTRY_CG,
            self::CARD_COUNTRY_CH,
            self::CARD_COUNTRY_CI,
            self::CARD_COUNTRY_CK,
            self::CARD_COUNTRY_CL,
            self::CARD_COUNTRY_CM,
            self::CARD_COUNTRY_CN,
            self::CARD_COUNTRY_CO,
            self::CARD_COUNTRY_CP,
            self::CARD_COUNTRY_CR,
            self::CARD_COUNTRY_CS,
            self::CARD_COUNTRY_CU,
            self::CARD_COUNTRY_CV,
            self::CARD_COUNTRY_CW,
            self::CARD_COUNTRY_CX,
            self::CARD_COUNTRY_CY,
            self::CARD_COUNTRY_CZ,
            self::CARD_COUNTRY_DE,
            self::CARD_COUNTRY_DG,
            self::CARD_COUNTRY_DJ,
            self::CARD_COUNTRY_DK,
            self::CARD_COUNTRY_DM,
            self::CARD_COUNTRY__DO,
            self::CARD_COUNTRY_DZ,
            self::CARD_COUNTRY_EA,
            self::CARD_COUNTRY_EC,
            self::CARD_COUNTRY_EE,
            self::CARD_COUNTRY_EG,
            self::CARD_COUNTRY_EH,
            self::CARD_COUNTRY_ER,
            self::CARD_COUNTRY_ES,
            self::CARD_COUNTRY_ET,
            self::CARD_COUNTRY_EU,
            self::CARD_COUNTRY_FI,
            self::CARD_COUNTRY_FJ,
            self::CARD_COUNTRY_FK,
            self::CARD_COUNTRY_FM,
            self::CARD_COUNTRY_FO,
            self::CARD_COUNTRY_FR,
            self::CARD_COUNTRY_FX,
            self::CARD_COUNTRY_GA,
            self::CARD_COUNTRY_GB,
            self::CARD_COUNTRY_GD,
            self::CARD_COUNTRY_GE,
            self::CARD_COUNTRY_GF,
            self::CARD_COUNTRY_GG,
            self::CARD_COUNTRY_GH,
            self::CARD_COUNTRY_GI,
            self::CARD_COUNTRY_GL,
            self::CARD_COUNTRY_GM,
            self::CARD_COUNTRY_GN,
            self::CARD_COUNTRY_GP,
            self::CARD_COUNTRY_GQ,
            self::CARD_COUNTRY_GR,
            self::CARD_COUNTRY_GS,
            self::CARD_COUNTRY_GT,
            self::CARD_COUNTRY_GU,
            self::CARD_COUNTRY_GW,
            self::CARD_COUNTRY_GY,
            self::CARD_COUNTRY_HK,
            self::CARD_COUNTRY_HM,
            self::CARD_COUNTRY_HN,
            self::CARD_COUNTRY_HR,
            self::CARD_COUNTRY_HT,
            self::CARD_COUNTRY_HU,
            self::CARD_COUNTRY_IC,
            self::CARD_COUNTRY_ID,
            self::CARD_COUNTRY_IE,
            self::CARD_COUNTRY_IL,
            self::CARD_COUNTRY_IM,
            self::CARD_COUNTRY_IN,
            self::CARD_COUNTRY_IO,
            self::CARD_COUNTRY_IQ,
            self::CARD_COUNTRY_IR,
            self::CARD_COUNTRY_IS,
            self::CARD_COUNTRY_IT,
            self::CARD_COUNTRY_JE,
            self::CARD_COUNTRY_JM,
            self::CARD_COUNTRY_JO,
            self::CARD_COUNTRY_JP,
            self::CARD_COUNTRY_KE,
            self::CARD_COUNTRY_KG,
            self::CARD_COUNTRY_KH,
            self::CARD_COUNTRY_KI,
            self::CARD_COUNTRY_KM,
            self::CARD_COUNTRY_KN,
            self::CARD_COUNTRY_KP,
            self::CARD_COUNTRY_KR,
            self::CARD_COUNTRY_KW,
            self::CARD_COUNTRY_KY,
            self::CARD_COUNTRY_KZ,
            self::CARD_COUNTRY_LA,
            self::CARD_COUNTRY_LB,
            self::CARD_COUNTRY_LC,
            self::CARD_COUNTRY_LI,
            self::CARD_COUNTRY_LK,
            self::CARD_COUNTRY_LR,
            self::CARD_COUNTRY_LS,
            self::CARD_COUNTRY_LT,
            self::CARD_COUNTRY_LU,
            self::CARD_COUNTRY_LV,
            self::CARD_COUNTRY_LY,
            self::CARD_COUNTRY_MA,
            self::CARD_COUNTRY_MC,
            self::CARD_COUNTRY_MD,
            self::CARD_COUNTRY_ME,
            self::CARD_COUNTRY_MF,
            self::CARD_COUNTRY_MG,
            self::CARD_COUNTRY_MH,
            self::CARD_COUNTRY_MK,
            self::CARD_COUNTRY_ML,
            self::CARD_COUNTRY_MM,
            self::CARD_COUNTRY_MN,
            self::CARD_COUNTRY_MO,
            self::CARD_COUNTRY_MP,
            self::CARD_COUNTRY_MQ,
            self::CARD_COUNTRY_MR,
            self::CARD_COUNTRY_MS,
            self::CARD_COUNTRY_MT,
            self::CARD_COUNTRY_MU,
            self::CARD_COUNTRY_MV,
            self::CARD_COUNTRY_MW,
            self::CARD_COUNTRY_MX,
            self::CARD_COUNTRY_MY,
            self::CARD_COUNTRY_MZ,
            self::CARD_COUNTRY_NA,
            self::CARD_COUNTRY_NC,
            self::CARD_COUNTRY_NE,
            self::CARD_COUNTRY_NF,
            self::CARD_COUNTRY_NG,
            self::CARD_COUNTRY_NI,
            self::CARD_COUNTRY_NL,
            self::CARD_COUNTRY_NO,
            self::CARD_COUNTRY_NP,
            self::CARD_COUNTRY_NR,
            self::CARD_COUNTRY_NT,
            self::CARD_COUNTRY_NU,
            self::CARD_COUNTRY_NZ,
            self::CARD_COUNTRY_OM,
            self::CARD_COUNTRY_PA,
            self::CARD_COUNTRY_PE,
            self::CARD_COUNTRY_PF,
            self::CARD_COUNTRY_PG,
            self::CARD_COUNTRY_PH,
            self::CARD_COUNTRY_PK,
            self::CARD_COUNTRY_PL,
            self::CARD_COUNTRY_PM,
            self::CARD_COUNTRY_PN,
            self::CARD_COUNTRY_PR,
            self::CARD_COUNTRY_PS,
            self::CARD_COUNTRY_PT,
            self::CARD_COUNTRY_PW,
            self::CARD_COUNTRY_PY,
            self::CARD_COUNTRY_QA,
            self::CARD_COUNTRY_RE,
            self::CARD_COUNTRY_RO,
            self::CARD_COUNTRY_RS,
            self::CARD_COUNTRY_RU,
            self::CARD_COUNTRY_RW,
            self::CARD_COUNTRY_SA,
            self::CARD_COUNTRY_SB,
            self::CARD_COUNTRY_SC,
            self::CARD_COUNTRY_SD,
            self::CARD_COUNTRY_SE,
            self::CARD_COUNTRY_SF,
            self::CARD_COUNTRY_SG,
            self::CARD_COUNTRY_SH,
            self::CARD_COUNTRY_SI,
            self::CARD_COUNTRY_SJ,
            self::CARD_COUNTRY_SK,
            self::CARD_COUNTRY_SL,
            self::CARD_COUNTRY_SM,
            self::CARD_COUNTRY_SN,
            self::CARD_COUNTRY_SO,
            self::CARD_COUNTRY_SR,
            self::CARD_COUNTRY_SS,
            self::CARD_COUNTRY_ST,
            self::CARD_COUNTRY_SU,
            self::CARD_COUNTRY_SV,
            self::CARD_COUNTRY_SX,
            self::CARD_COUNTRY_SY,
            self::CARD_COUNTRY_SZ,
            self::CARD_COUNTRY_TA,
            self::CARD_COUNTRY_TC,
            self::CARD_COUNTRY_TD,
            self::CARD_COUNTRY_TF,
            self::CARD_COUNTRY_TG,
            self::CARD_COUNTRY_TH,
            self::CARD_COUNTRY_TJ,
            self::CARD_COUNTRY_TK,
            self::CARD_COUNTRY_TL,
            self::CARD_COUNTRY_TM,
            self::CARD_COUNTRY_TN,
            self::CARD_COUNTRY_TO,
            self::CARD_COUNTRY_TP,
            self::CARD_COUNTRY_TR,
            self::CARD_COUNTRY_TT,
            self::CARD_COUNTRY_TV,
            self::CARD_COUNTRY_TW,
            self::CARD_COUNTRY_TZ,
            self::CARD_COUNTRY_UA,
            self::CARD_COUNTRY_UG,
            self::CARD_COUNTRY_UK,
            self::CARD_COUNTRY_UM,
            self::CARD_COUNTRY_US,
            self::CARD_COUNTRY_UY,
            self::CARD_COUNTRY_UZ,
            self::CARD_COUNTRY_VA,
            self::CARD_COUNTRY_VC,
            self::CARD_COUNTRY_VE,
            self::CARD_COUNTRY_VG,
            self::CARD_COUNTRY_VI,
            self::CARD_COUNTRY_VN,
            self::CARD_COUNTRY_VU,
            self::CARD_COUNTRY_WF,
            self::CARD_COUNTRY_WS,
            self::CARD_COUNTRY_XK,
            self::CARD_COUNTRY_YE,
            self::CARD_COUNTRY_YT,
            self::CARD_COUNTRY_YU,
            self::CARD_COUNTRY_ZA,
            self::CARD_COUNTRY_ZM,
            self::CARD_COUNTRY_ZR,
            self::CARD_COUNTRY_ZW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['fingerprint'] = isset($data['fingerprint']) ? $data['fingerprint'] : null;
        $this->container['agreement_id'] = isset($data['agreement_id']) ? $data['agreement_id'] : null;
        $this->container['transaction_card_type'] = isset($data['transaction_card_type']) ? $data['transaction_card_type'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['pan_type'] = isset($data['pan_type']) ? $data['pan_type'] : null;
        $this->container['card_country'] = isset($data['card_country']) ? $data['card_country'] : null;
        $this->container['exp_month'] = isset($data['exp_month']) ? $data['exp_month'] : null;
        $this->container['exp_year'] = isset($data['exp_year']) ? $data['exp_year'] : null;
        $this->container['masked_card_number'] = isset($data['masked_card_number']) ? $data['masked_card_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransactionCardTypeAllowableValues();
        if (!is_null($this->container['transaction_card_type']) && !in_array($this->container['transaction_card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transaction_card_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['card_type']) && !in_array($this->container['card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['payment_type']) && !in_array($this->container['payment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPanTypeAllowableValues();
        if (!is_null($this->container['pan_type']) && !in_array($this->container['pan_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pan_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardCountryAllowableValues();
        if (!is_null($this->container['card_country']) && !in_array($this->container['card_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_country', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip ip
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets fingerprint
     *
     * @return string
     */
    public function getFingerprint()
    {
        return $this->container['fingerprint'];
    }

    /**
     * Sets fingerprint
     *
     * @param string $fingerprint fingerprint
     *
     * @return $this
     */
    public function setFingerprint($fingerprint)
    {
        $this->container['fingerprint'] = $fingerprint;

        return $this;
    }

    /**
     * Gets agreement_id
     *
     * @return string
     */
    public function getAgreementId()
    {
        return $this->container['agreement_id'];
    }

    /**
     * Sets agreement_id
     *
     * @param string $agreement_id agreement_id
     *
     * @return $this
     */
    public function setAgreementId($agreement_id)
    {
        $this->container['agreement_id'] = $agreement_id;

        return $this;
    }

    /**
     * Gets transaction_card_type
     *
     * @return string
     */
    public function getTransactionCardType()
    {
        return $this->container['transaction_card_type'];
    }

    /**
     * Sets transaction_card_type
     *
     * @param string $transaction_card_type transaction_card_type
     *
     * @return $this
     */
    public function setTransactionCardType($transaction_card_type)
    {
        $allowedValues = $this->getTransactionCardTypeAllowableValues();
        if (!is_null($transaction_card_type) && !in_array($transaction_card_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transaction_card_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_card_type'] = $transaction_card_type;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type card_type
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($card_type) && !in_array($card_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($payment_type) && !in_array($payment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets pan_type
     *
     * @return string
     */
    public function getPanType()
    {
        return $this->container['pan_type'];
    }

    /**
     * Sets pan_type
     *
     * @param string $pan_type pan_type
     *
     * @return $this
     */
    public function setPanType($pan_type)
    {
        $allowedValues = $this->getPanTypeAllowableValues();
        if (!is_null($pan_type) && !in_array($pan_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pan_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pan_type'] = $pan_type;

        return $this;
    }

    /**
     * Gets card_country
     *
     * @return string
     */
    public function getCardCountry()
    {
        return $this->container['card_country'];
    }

    /**
     * Sets card_country
     *
     * @param string $card_country card_country
     *
     * @return $this
     */
    public function setCardCountry($card_country)
    {
        $allowedValues = $this->getCardCountryAllowableValues();
        if (!is_null($card_country) && !in_array($card_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_country', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_country'] = $card_country;

        return $this;
    }

    /**
     * Gets exp_month
     *
     * @return int
     */
    public function getExpMonth()
    {
        return $this->container['exp_month'];
    }

    /**
     * Sets exp_month
     *
     * @param int $exp_month exp_month
     *
     * @return $this
     */
    public function setExpMonth($exp_month)
    {
        $this->container['exp_month'] = $exp_month;

        return $this;
    }

    /**
     * Gets exp_year
     *
     * @return int
     */
    public function getExpYear()
    {
        return $this->container['exp_year'];
    }

    /**
     * Sets exp_year
     *
     * @param int $exp_year exp_year
     *
     * @return $this
     */
    public function setExpYear($exp_year)
    {
        $this->container['exp_year'] = $exp_year;

        return $this;
    }

    /**
     * Gets masked_card_number
     *
     * @return string
     */
    public function getMaskedCardNumber()
    {
        return $this->container['masked_card_number'];
    }

    /**
     * Sets masked_card_number
     *
     * @param string $masked_card_number masked_card_number
     *
     * @return $this
     */
    public function setMaskedCardNumber($masked_card_number)
    {
        $this->container['masked_card_number'] = $masked_card_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
