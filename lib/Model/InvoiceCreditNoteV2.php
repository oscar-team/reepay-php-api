<?php
/**
 * InvoiceCreditNoteV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * InvoiceCreditNoteV2 Class Doc Comment
 *
 * @category Class
 * @description List of credit notes for current page
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceCreditNoteV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceCreditNoteV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'invoice' => 'string',
        'transaction' => 'string',
        'credit' => 'string',
        'amount' => 'int',
        'created' => '\DateTime',
        'currency' => 'string',
        'customer' => 'string',
        'subscription' => 'string',
        'credits' => '\Reepay\Model\CreditInvoice[]',
        'amount_vat' => 'int',
        'amount_ex_vat' => 'int',
        'credit_note_lines' => '\Reepay\Model\CreditNoteLine[]',
        'accounting_number' => 'string',
        'debtor_id' => 'int',
        'download_url' => 'string',
        'payable_amount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'invoice' => null,
        'transaction' => null,
        'credit' => null,
        'amount' => 'int32',
        'created' => 'date-time',
        'currency' => null,
        'customer' => null,
        'subscription' => null,
        'credits' => null,
        'amount_vat' => 'int32',
        'amount_ex_vat' => 'int32',
        'credit_note_lines' => null,
        'accounting_number' => null,
        'debtor_id' => 'int64',
        'download_url' => null,
        'payable_amount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'invoice' => 'invoice',
        'transaction' => 'transaction',
        'credit' => 'credit',
        'amount' => 'amount',
        'created' => 'created',
        'currency' => 'currency',
        'customer' => 'customer',
        'subscription' => 'subscription',
        'credits' => 'credits',
        'amount_vat' => 'amount_vat',
        'amount_ex_vat' => 'amount_ex_vat',
        'credit_note_lines' => 'credit_note_lines',
        'accounting_number' => 'accounting_number',
        'debtor_id' => 'debtor_id',
        'download_url' => 'download_url',
        'payable_amount' => 'payable_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'invoice' => 'setInvoice',
        'transaction' => 'setTransaction',
        'credit' => 'setCredit',
        'amount' => 'setAmount',
        'created' => 'setCreated',
        'currency' => 'setCurrency',
        'customer' => 'setCustomer',
        'subscription' => 'setSubscription',
        'credits' => 'setCredits',
        'amount_vat' => 'setAmountVat',
        'amount_ex_vat' => 'setAmountExVat',
        'credit_note_lines' => 'setCreditNoteLines',
        'accounting_number' => 'setAccountingNumber',
        'debtor_id' => 'setDebtorId',
        'download_url' => 'setDownloadUrl',
        'payable_amount' => 'setPayableAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'invoice' => 'getInvoice',
        'transaction' => 'getTransaction',
        'credit' => 'getCredit',
        'amount' => 'getAmount',
        'created' => 'getCreated',
        'currency' => 'getCurrency',
        'customer' => 'getCustomer',
        'subscription' => 'getSubscription',
        'credits' => 'getCredits',
        'amount_vat' => 'getAmountVat',
        'amount_ex_vat' => 'getAmountExVat',
        'credit_note_lines' => 'getCreditNoteLines',
        'accounting_number' => 'getAccountingNumber',
        'debtor_id' => 'getDebtorId',
        'download_url' => 'getDownloadUrl',
        'payable_amount' => 'getPayableAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['transaction'] = isset($data['transaction']) ? $data['transaction'] : null;
        $this->container['credit'] = isset($data['credit']) ? $data['credit'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['credits'] = isset($data['credits']) ? $data['credits'] : null;
        $this->container['amount_vat'] = isset($data['amount_vat']) ? $data['amount_vat'] : null;
        $this->container['amount_ex_vat'] = isset($data['amount_ex_vat']) ? $data['amount_ex_vat'] : null;
        $this->container['credit_note_lines'] = isset($data['credit_note_lines']) ? $data['credit_note_lines'] : null;
        $this->container['accounting_number'] = isset($data['accounting_number']) ? $data['accounting_number'] : null;
        $this->container['debtor_id'] = isset($data['debtor_id']) ? $data['debtor_id'] : null;
        $this->container['download_url'] = isset($data['download_url']) ? $data['download_url'] : null;
        $this->container['payable_amount'] = isset($data['payable_amount']) ? $data['payable_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['invoice'] === null) {
            $invalidProperties[] = "'invoice' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['credits'] === null) {
            $invalidProperties[] = "'credits' can't be null";
        }
        if ($this->container['amount_vat'] === null) {
            $invalidProperties[] = "'amount_vat' can't be null";
        }
        if ($this->container['credit_note_lines'] === null) {
            $invalidProperties[] = "'credit_note_lines' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Credit note id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return string
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param string $invoice Invoice credited by this note
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return string
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param string $transaction Refund transaction id if credit note has an associated refund
     *
     * @return $this
     */
    public function setTransaction($transaction)
    {
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets credit
     *
     * @return string
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param string $credit Credit reference if the credit note relates to a subscription credit
     *
     * @return $this
     */
    public function setCredit($credit)
    {
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Credit note amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Creation date for note, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Credit note currency in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer Customer handle
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return string
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param string $subscription Subscription handle, will be null for a one-time customer invoice
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return \Reepay\Model\CreditInvoice[]
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param \Reepay\Model\CreditInvoice[] $credits Credits applied to credit note
     *
     * @return $this
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets amount_vat
     *
     * @return int
     */
    public function getAmountVat()
    {
        return $this->container['amount_vat'];
    }

    /**
     * Sets amount_vat
     *
     * @param int $amount_vat Credit note vat amount calculated as rounded summed fractional vats for each credit note lines
     *
     * @return $this
     */
    public function setAmountVat($amount_vat)
    {
        $this->container['amount_vat'] = $amount_vat;

        return $this;
    }

    /**
     * Gets amount_ex_vat
     *
     * @return int
     */
    public function getAmountExVat()
    {
        return $this->container['amount_ex_vat'];
    }

    /**
     * Sets amount_ex_vat
     *
     * @param int $amount_ex_vat Credit note total amount excluding VAT calculated as summed amounts excl. vats for each credit note lines
     *
     * @return $this
     */
    public function setAmountExVat($amount_ex_vat)
    {
        $this->container['amount_ex_vat'] = $amount_ex_vat;

        return $this;
    }

    /**
     * Gets credit_note_lines
     *
     * @return \Reepay\Model\CreditNoteLine[]
     */
    public function getCreditNoteLines()
    {
        return $this->container['credit_note_lines'];
    }

    /**
     * Sets credit_note_lines
     *
     * @param \Reepay\Model\CreditNoteLine[] $credit_note_lines Credit note lines
     *
     * @return $this
     */
    public function setCreditNoteLines($credit_note_lines)
    {
        $this->container['credit_note_lines'] = $credit_note_lines;

        return $this;
    }

    /**
     * Gets accounting_number
     *
     * @return string
     */
    public function getAccountingNumber()
    {
        return $this->container['accounting_number'];
    }

    /**
     * Sets accounting_number
     *
     * @param string $accounting_number Credit note accounting number
     *
     * @return $this
     */
    public function setAccountingNumber($accounting_number)
    {
        $this->container['accounting_number'] = $accounting_number;

        return $this;
    }

    /**
     * Gets debtor_id
     *
     * @return int
     */
    public function getDebtorId()
    {
        return $this->container['debtor_id'];
    }

    /**
     * Sets debtor_id
     *
     * @param int $debtor_id Customer debtor id
     *
     * @return $this
     */
    public function setDebtorId($debtor_id)
    {
        $this->container['debtor_id'] = $debtor_id;

        return $this;
    }

    /**
     * Gets download_url
     *
     * @return string
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     *
     * @param string $download_url Url to credit note pdf
     *
     * @return $this
     */
    public function setDownloadUrl($download_url)
    {
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets payable_amount
     *
     * @return int
     */
    public function getPayableAmount()
    {
        return $this->container['payable_amount'];
    }

    /**
     * Sets payable_amount
     *
     * @param int $payable_amount The credit note amount to be payed including VAT
     *
     * @return $this
     */
    public function setPayableAmount($payable_amount)
    {
        $this->container['payable_amount'] = $payable_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
