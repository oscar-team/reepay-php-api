<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'handle' => 'string',
        'customer' => 'string',
        'subscription' => 'string',
        'plan' => 'string',
        'state' => 'string',
        'processing' => 'bool',
        'type' => 'string',
        'amount' => 'int',
        'number' => 'int',
        'currency' => 'string',
        'due' => '\DateTime',
        'failed' => '\DateTime',
        'settled' => '\DateTime',
        'cancelled' => '\DateTime',
        'authorized' => '\DateTime',
        'credits' => '\Reepay\Model\CreditInvoice[]',
        'created' => '\DateTime',
        'plan_version' => 'int',
        'dunning_plan' => 'string',
        'discount_amount' => 'int',
        'org_amount' => 'int',
        'amount_vat' => 'int',
        'amount_ex_vat' => 'int',
        'settled_amount' => 'int',
        'refunded_amount' => 'int',
        'authorized_amount' => 'int',
        'credited_amount' => 'int',
        'period_number' => 'int',
        'recurring_payment_method' => 'string',
        'order_lines' => '\Reepay\Model\OrderLine[]',
        'additional_costs' => 'string[]',
        'transactions' => '\Reepay\Model\Transaction[]',
        'dunning_start' => '\DateTime',
        'dunning_count' => 'int',
        'dunning_expired' => '\DateTime',
        'period_from' => '\DateTime',
        'period_to' => '\DateTime',
        'settle_later' => 'bool',
        'settle_later_payment_method' => 'string',
        'billing_address' => '\Reepay\Model\InvoiceBillingAddress',
        'shipping_address' => '\Reepay\Model\InvoiceShippingAddress',
        'accounting_number' => 'string',
        'debtor_id' => 'int',
        'download_url' => 'string',
        'accounting_created_date' => '\DateTime',
        'credit_notes' => '\Reepay\Model\InvoiceCreditNote[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'handle' => null,
        'customer' => null,
        'subscription' => null,
        'plan' => null,
        'state' => null,
        'processing' => null,
        'type' => null,
        'amount' => 'int32',
        'number' => 'int32',
        'currency' => null,
        'due' => 'date-time',
        'failed' => 'date-time',
        'settled' => 'date-time',
        'cancelled' => 'date-time',
        'authorized' => 'date-time',
        'credits' => null,
        'created' => 'date-time',
        'plan_version' => 'int32',
        'dunning_plan' => null,
        'discount_amount' => 'int32',
        'org_amount' => 'int32',
        'amount_vat' => 'int32',
        'amount_ex_vat' => 'int32',
        'settled_amount' => 'int32',
        'refunded_amount' => 'int32',
        'authorized_amount' => 'int32',
        'credited_amount' => 'int32',
        'period_number' => 'int32',
        'recurring_payment_method' => null,
        'order_lines' => null,
        'additional_costs' => null,
        'transactions' => null,
        'dunning_start' => 'date-time',
        'dunning_count' => 'int32',
        'dunning_expired' => 'date-time',
        'period_from' => 'date-time',
        'period_to' => 'date-time',
        'settle_later' => null,
        'settle_later_payment_method' => null,
        'billing_address' => null,
        'shipping_address' => null,
        'accounting_number' => null,
        'debtor_id' => 'int64',
        'download_url' => null,
        'accounting_created_date' => 'date-time',
        'credit_notes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'handle' => 'handle',
        'customer' => 'customer',
        'subscription' => 'subscription',
        'plan' => 'plan',
        'state' => 'state',
        'processing' => 'processing',
        'type' => 'type',
        'amount' => 'amount',
        'number' => 'number',
        'currency' => 'currency',
        'due' => 'due',
        'failed' => 'failed',
        'settled' => 'settled',
        'cancelled' => 'cancelled',
        'authorized' => 'authorized',
        'credits' => 'credits',
        'created' => 'created',
        'plan_version' => 'plan_version',
        'dunning_plan' => 'dunning_plan',
        'discount_amount' => 'discount_amount',
        'org_amount' => 'org_amount',
        'amount_vat' => 'amount_vat',
        'amount_ex_vat' => 'amount_ex_vat',
        'settled_amount' => 'settled_amount',
        'refunded_amount' => 'refunded_amount',
        'authorized_amount' => 'authorized_amount',
        'credited_amount' => 'credited_amount',
        'period_number' => 'period_number',
        'recurring_payment_method' => 'recurring_payment_method',
        'order_lines' => 'order_lines',
        'additional_costs' => 'additional_costs',
        'transactions' => 'transactions',
        'dunning_start' => 'dunning_start',
        'dunning_count' => 'dunning_count',
        'dunning_expired' => 'dunning_expired',
        'period_from' => 'period_from',
        'period_to' => 'period_to',
        'settle_later' => 'settle_later',
        'settle_later_payment_method' => 'settle_later_payment_method',
        'billing_address' => 'billing_address',
        'shipping_address' => 'shipping_address',
        'accounting_number' => 'accounting_number',
        'debtor_id' => 'debtor_id',
        'download_url' => 'download_url',
        'accounting_created_date' => 'accounting_created_date',
        'credit_notes' => 'credit_notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'handle' => 'setHandle',
        'customer' => 'setCustomer',
        'subscription' => 'setSubscription',
        'plan' => 'setPlan',
        'state' => 'setState',
        'processing' => 'setProcessing',
        'type' => 'setType',
        'amount' => 'setAmount',
        'number' => 'setNumber',
        'currency' => 'setCurrency',
        'due' => 'setDue',
        'failed' => 'setFailed',
        'settled' => 'setSettled',
        'cancelled' => 'setCancelled',
        'authorized' => 'setAuthorized',
        'credits' => 'setCredits',
        'created' => 'setCreated',
        'plan_version' => 'setPlanVersion',
        'dunning_plan' => 'setDunningPlan',
        'discount_amount' => 'setDiscountAmount',
        'org_amount' => 'setOrgAmount',
        'amount_vat' => 'setAmountVat',
        'amount_ex_vat' => 'setAmountExVat',
        'settled_amount' => 'setSettledAmount',
        'refunded_amount' => 'setRefundedAmount',
        'authorized_amount' => 'setAuthorizedAmount',
        'credited_amount' => 'setCreditedAmount',
        'period_number' => 'setPeriodNumber',
        'recurring_payment_method' => 'setRecurringPaymentMethod',
        'order_lines' => 'setOrderLines',
        'additional_costs' => 'setAdditionalCosts',
        'transactions' => 'setTransactions',
        'dunning_start' => 'setDunningStart',
        'dunning_count' => 'setDunningCount',
        'dunning_expired' => 'setDunningExpired',
        'period_from' => 'setPeriodFrom',
        'period_to' => 'setPeriodTo',
        'settle_later' => 'setSettleLater',
        'settle_later_payment_method' => 'setSettleLaterPaymentMethod',
        'billing_address' => 'setBillingAddress',
        'shipping_address' => 'setShippingAddress',
        'accounting_number' => 'setAccountingNumber',
        'debtor_id' => 'setDebtorId',
        'download_url' => 'setDownloadUrl',
        'accounting_created_date' => 'setAccountingCreatedDate',
        'credit_notes' => 'setCreditNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'handle' => 'getHandle',
        'customer' => 'getCustomer',
        'subscription' => 'getSubscription',
        'plan' => 'getPlan',
        'state' => 'getState',
        'processing' => 'getProcessing',
        'type' => 'getType',
        'amount' => 'getAmount',
        'number' => 'getNumber',
        'currency' => 'getCurrency',
        'due' => 'getDue',
        'failed' => 'getFailed',
        'settled' => 'getSettled',
        'cancelled' => 'getCancelled',
        'authorized' => 'getAuthorized',
        'credits' => 'getCredits',
        'created' => 'getCreated',
        'plan_version' => 'getPlanVersion',
        'dunning_plan' => 'getDunningPlan',
        'discount_amount' => 'getDiscountAmount',
        'org_amount' => 'getOrgAmount',
        'amount_vat' => 'getAmountVat',
        'amount_ex_vat' => 'getAmountExVat',
        'settled_amount' => 'getSettledAmount',
        'refunded_amount' => 'getRefundedAmount',
        'authorized_amount' => 'getAuthorizedAmount',
        'credited_amount' => 'getCreditedAmount',
        'period_number' => 'getPeriodNumber',
        'recurring_payment_method' => 'getRecurringPaymentMethod',
        'order_lines' => 'getOrderLines',
        'additional_costs' => 'getAdditionalCosts',
        'transactions' => 'getTransactions',
        'dunning_start' => 'getDunningStart',
        'dunning_count' => 'getDunningCount',
        'dunning_expired' => 'getDunningExpired',
        'period_from' => 'getPeriodFrom',
        'period_to' => 'getPeriodTo',
        'settle_later' => 'getSettleLater',
        'settle_later_payment_method' => 'getSettleLaterPaymentMethod',
        'billing_address' => 'getBillingAddress',
        'shipping_address' => 'getShippingAddress',
        'accounting_number' => 'getAccountingNumber',
        'debtor_id' => 'getDebtorId',
        'download_url' => 'getDownloadUrl',
        'accounting_created_date' => 'getAccountingCreatedDate',
        'credit_notes' => 'getCreditNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_CREATED = 'created';
    const STATE_PENDING = 'pending';
    const STATE_DUNNING = 'dunning';
    const STATE_SETTLED = 'settled';
    const STATE_AUTHORIZED = 'authorized';
    const STATE_CANCELLED = 'cancelled';
    const STATE_FAILED = 'failed';
    const TYPE_S = 's';
    const TYPE_SO = 'so';
    const TYPE_SOI = 'soi';
    const TYPE_CO = 'co';
    const TYPE_CH = 'ch';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_CREATED,
            self::STATE_PENDING,
            self::STATE_DUNNING,
            self::STATE_SETTLED,
            self::STATE_AUTHORIZED,
            self::STATE_CANCELLED,
            self::STATE_FAILED,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_S,
            self::TYPE_SO,
            self::TYPE_SOI,
            self::TYPE_CO,
            self::TYPE_CH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['handle'] = isset($data['handle']) ? $data['handle'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['processing'] = isset($data['processing']) ? $data['processing'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['due'] = isset($data['due']) ? $data['due'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['settled'] = isset($data['settled']) ? $data['settled'] : null;
        $this->container['cancelled'] = isset($data['cancelled']) ? $data['cancelled'] : null;
        $this->container['authorized'] = isset($data['authorized']) ? $data['authorized'] : null;
        $this->container['credits'] = isset($data['credits']) ? $data['credits'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['plan_version'] = isset($data['plan_version']) ? $data['plan_version'] : null;
        $this->container['dunning_plan'] = isset($data['dunning_plan']) ? $data['dunning_plan'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['org_amount'] = isset($data['org_amount']) ? $data['org_amount'] : null;
        $this->container['amount_vat'] = isset($data['amount_vat']) ? $data['amount_vat'] : null;
        $this->container['amount_ex_vat'] = isset($data['amount_ex_vat']) ? $data['amount_ex_vat'] : null;
        $this->container['settled_amount'] = isset($data['settled_amount']) ? $data['settled_amount'] : null;
        $this->container['refunded_amount'] = isset($data['refunded_amount']) ? $data['refunded_amount'] : null;
        $this->container['authorized_amount'] = isset($data['authorized_amount']) ? $data['authorized_amount'] : null;
        $this->container['credited_amount'] = isset($data['credited_amount']) ? $data['credited_amount'] : null;
        $this->container['period_number'] = isset($data['period_number']) ? $data['period_number'] : null;
        $this->container['recurring_payment_method'] = isset($data['recurring_payment_method']) ? $data['recurring_payment_method'] : null;
        $this->container['order_lines'] = isset($data['order_lines']) ? $data['order_lines'] : null;
        $this->container['additional_costs'] = isset($data['additional_costs']) ? $data['additional_costs'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['dunning_start'] = isset($data['dunning_start']) ? $data['dunning_start'] : null;
        $this->container['dunning_count'] = isset($data['dunning_count']) ? $data['dunning_count'] : null;
        $this->container['dunning_expired'] = isset($data['dunning_expired']) ? $data['dunning_expired'] : null;
        $this->container['period_from'] = isset($data['period_from']) ? $data['period_from'] : null;
        $this->container['period_to'] = isset($data['period_to']) ? $data['period_to'] : null;
        $this->container['settle_later'] = isset($data['settle_later']) ? $data['settle_later'] : null;
        $this->container['settle_later_payment_method'] = isset($data['settle_later_payment_method']) ? $data['settle_later_payment_method'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['accounting_number'] = isset($data['accounting_number']) ? $data['accounting_number'] : null;
        $this->container['debtor_id'] = isset($data['debtor_id']) ? $data['debtor_id'] : null;
        $this->container['download_url'] = isset($data['download_url']) ? $data['download_url'] : null;
        $this->container['accounting_created_date'] = isset($data['accounting_created_date']) ? $data['accounting_created_date'] : null;
        $this->container['credit_notes'] = isset($data['credit_notes']) ? $data['credit_notes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['due'] === null) {
            $invalidProperties[] = "'due' can't be null";
        }
        if ($this->container['credits'] === null) {
            $invalidProperties[] = "'credits' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['discount_amount'] === null) {
            $invalidProperties[] = "'discount_amount' can't be null";
        }
        if ($this->container['org_amount'] === null) {
            $invalidProperties[] = "'org_amount' can't be null";
        }
        if ($this->container['amount_vat'] === null) {
            $invalidProperties[] = "'amount_vat' can't be null";
        }
        if ($this->container['amount_ex_vat'] === null) {
            $invalidProperties[] = "'amount_ex_vat' can't be null";
        }
        if ($this->container['settled_amount'] === null) {
            $invalidProperties[] = "'settled_amount' can't be null";
        }
        if ($this->container['refunded_amount'] === null) {
            $invalidProperties[] = "'refunded_amount' can't be null";
        }
        if ($this->container['order_lines'] === null) {
            $invalidProperties[] = "'order_lines' can't be null";
        }
        if ($this->container['additional_costs'] === null) {
            $invalidProperties[] = "'additional_costs' can't be null";
        }
        if ($this->container['transactions'] === null) {
            $invalidProperties[] = "'transactions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Invoice id assigned by Reepay
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle. Provided at on-demand invoice/charge creation or set to `inv-<invoice_number>` for automatically created subscription invoices
     *
     * @return $this
     */
    public function setHandle($handle)
    {
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer Customer handle
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return string
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param string $subscription Subscription handle, will be null for a one-time customer invoice
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return string
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string $plan Subscription plan handle for the plan used to automatically create the invoice or the case that an on-demand subscription invoice has been created that should include a plan order line
     *
     * @return $this
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The invoice state one of the following: `created`, `pending`, `dunning`, `settled`, `cancelled`, `authorized`, `failed`
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets processing
     *
     * @return bool
     */
    public function getProcessing()
    {
        return $this->container['processing'];
    }

    /**
     * Sets processing
     *
     * @param bool $processing For asynchronous payment methods, e.g. MobilePay subscriptions, this flag indicates that an invoice transaction is in state processing and is awaiting result.
     *
     * @return $this
     */
    public function setProcessing($processing)
    {
        $this->container['processing'] = $processing;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of invoice: `s` - subscription recurring, `so` - subscription one-time, `soi` - subscription one-time instant, `co` - customer one-time, `ch` - charge
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount The invoice amount including VAT
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number Sequential invoice number. Only present for subscription and customer invoices.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Invoice currency in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets due
     *
     * @return \DateTime
     */
    public function getDue()
    {
        return $this->container['due'];
    }

    /**
     * Sets due
     *
     * @param \DateTime $due When is the invoice due, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setDue($due)
    {
        $this->container['due'] = $due;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return \DateTime
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param \DateTime $failed When the invoice failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets settled
     *
     * @return \DateTime
     */
    public function getSettled()
    {
        return $this->container['settled'];
    }

    /**
     * Sets settled
     *
     * @param \DateTime $settled When the invoice settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setSettled($settled)
    {
        $this->container['settled'] = $settled;

        return $this;
    }

    /**
     * Gets cancelled
     *
     * @return \DateTime
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     *
     * @param \DateTime $cancelled When the invoice was cancelled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setCancelled($cancelled)
    {
        $this->container['cancelled'] = $cancelled;

        return $this;
    }

    /**
     * Gets authorized
     *
     * @return \DateTime
     */
    public function getAuthorized()
    {
        return $this->container['authorized'];
    }

    /**
     * Sets authorized
     *
     * @param \DateTime $authorized When the invoice was authorized, if the invoice went through an authorize and settle flow, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setAuthorized($authorized)
    {
        $this->container['authorized'] = $authorized;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return \Reepay\Model\CreditInvoice[]
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param \Reepay\Model\CreditInvoice[] $credits Credits applied to invoice
     *
     * @return $this
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created When the invoice was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets plan_version
     *
     * @return int
     */
    public function getPlanVersion()
    {
        return $this->container['plan_version'];
    }

    /**
     * Sets plan_version
     *
     * @param int $plan_version Subscription plan version
     *
     * @return $this
     */
    public function setPlanVersion($plan_version)
    {
        $this->container['plan_version'] = $plan_version;

        return $this;
    }

    /**
     * Gets dunning_plan
     *
     * @return string
     */
    public function getDunningPlan()
    {
        return $this->container['dunning_plan'];
    }

    /**
     * Sets dunning_plan
     *
     * @param string $dunning_plan Dunning plan handle
     *
     * @return $this
     */
    public function setDunningPlan($dunning_plan)
    {
        $this->container['dunning_plan'] = $dunning_plan;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return int
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param int $discount_amount The potential discount amount deducted from the invoice amount including VAT
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets org_amount
     *
     * @return int
     */
    public function getOrgAmount()
    {
        return $this->container['org_amount'];
    }

    /**
     * Sets org_amount
     *
     * @param int $org_amount The invoice original amount including VAT, may differ from amount if adjustments have been applied for the invoice
     *
     * @return $this
     */
    public function setOrgAmount($org_amount)
    {
        $this->container['org_amount'] = $org_amount;

        return $this;
    }

    /**
     * Gets amount_vat
     *
     * @return int
     */
    public function getAmountVat()
    {
        return $this->container['amount_vat'];
    }

    /**
     * Sets amount_vat
     *
     * @param int $amount_vat The invoice vat amount calculated as rounded summed fractional vats for each orderline
     *
     * @return $this
     */
    public function setAmountVat($amount_vat)
    {
        $this->container['amount_vat'] = $amount_vat;

        return $this;
    }

    /**
     * Gets amount_ex_vat
     *
     * @return int
     */
    public function getAmountExVat()
    {
        return $this->container['amount_ex_vat'];
    }

    /**
     * Sets amount_ex_vat
     *
     * @param int $amount_ex_vat The invoice amount without vat
     *
     * @return $this
     */
    public function setAmountExVat($amount_ex_vat)
    {
        $this->container['amount_ex_vat'] = $amount_ex_vat;

        return $this;
    }

    /**
     * Gets settled_amount
     *
     * @return int
     */
    public function getSettledAmount()
    {
        return $this->container['settled_amount'];
    }

    /**
     * Sets settled_amount
     *
     * @param int $settled_amount Settled amount
     *
     * @return $this
     */
    public function setSettledAmount($settled_amount)
    {
        $this->container['settled_amount'] = $settled_amount;

        return $this;
    }

    /**
     * Gets refunded_amount
     *
     * @return int
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }

    /**
     * Sets refunded_amount
     *
     * @param int $refunded_amount Refunded amount
     *
     * @return $this
     */
    public function setRefundedAmount($refunded_amount)
    {
        $this->container['refunded_amount'] = $refunded_amount;

        return $this;
    }

    /**
     * Gets authorized_amount
     *
     * @return int
     */
    public function getAuthorizedAmount()
    {
        return $this->container['authorized_amount'];
    }

    /**
     * Sets authorized_amount
     *
     * @param int $authorized_amount Authorized amount
     *
     * @return $this
     */
    public function setAuthorizedAmount($authorized_amount)
    {
        $this->container['authorized_amount'] = $authorized_amount;

        return $this;
    }

    /**
     * Gets credited_amount
     *
     * @return int
     */
    public function getCreditedAmount()
    {
        return $this->container['credited_amount'];
    }

    /**
     * Sets credited_amount
     *
     * @param int $credited_amount Credited amount
     *
     * @return $this
     */
    public function setCreditedAmount($credited_amount)
    {
        $this->container['credited_amount'] = $credited_amount;

        return $this;
    }

    /**
     * Gets period_number
     *
     * @return int
     */
    public function getPeriodNumber()
    {
        return $this->container['period_number'];
    }

    /**
     * Sets period_number
     *
     * @param int $period_number The subscription period this invoice is for
     *
     * @return $this
     */
    public function setPeriodNumber($period_number)
    {
        $this->container['period_number'] = $period_number;

        return $this;
    }

    /**
     * Gets recurring_payment_method
     *
     * @return string
     */
    public function getRecurringPaymentMethod()
    {
        return $this->container['recurring_payment_method'];
    }

    /**
     * Sets recurring_payment_method
     *
     * @param string $recurring_payment_method Optional reference to recurring payment method created in conjunction with charging
     *
     * @return $this
     */
    public function setRecurringPaymentMethod($recurring_payment_method)
    {
        $this->container['recurring_payment_method'] = $recurring_payment_method;

        return $this;
    }

    /**
     * Gets order_lines
     *
     * @return \Reepay\Model\OrderLine[]
     */
    public function getOrderLines()
    {
        return $this->container['order_lines'];
    }

    /**
     * Sets order_lines
     *
     * @param \Reepay\Model\OrderLine[] $order_lines Order lines for invoice sorted by descending timestamp
     *
     * @return $this
     */
    public function setOrderLines($order_lines)
    {
        $this->container['order_lines'] = $order_lines;

        return $this;
    }

    /**
     * Gets additional_costs
     *
     * @return string[]
     */
    public function getAdditionalCosts()
    {
        return $this->container['additional_costs'];
    }

    /**
     * Sets additional_costs
     *
     * @param string[] $additional_costs Additional cost handles for any additional costs added to this invoice
     *
     * @return $this
     */
    public function setAdditionalCosts($additional_costs)
    {
        $this->container['additional_costs'] = $additional_costs;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Reepay\Model\Transaction[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Reepay\Model\Transaction[] $transactions Invoice transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets dunning_start
     *
     * @return \DateTime
     */
    public function getDunningStart()
    {
        return $this->container['dunning_start'];
    }

    /**
     * Sets dunning_start
     *
     * @param \DateTime $dunning_start When dunning for the invoice was started, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setDunningStart($dunning_start)
    {
        $this->container['dunning_start'] = $dunning_start;

        return $this;
    }

    /**
     * Gets dunning_count
     *
     * @return int
     */
    public function getDunningCount()
    {
        return $this->container['dunning_count'];
    }

    /**
     * Sets dunning_count
     *
     * @param int $dunning_count Number of dunning events for invoice (number of reminders sent)
     *
     * @return $this
     */
    public function setDunningCount($dunning_count)
    {
        $this->container['dunning_count'] = $dunning_count;

        return $this;
    }

    /**
     * Gets dunning_expired
     *
     * @return \DateTime
     */
    public function getDunningExpired()
    {
        return $this->container['dunning_expired'];
    }

    /**
     * Sets dunning_expired
     *
     * @param \DateTime $dunning_expired When dunning for the invoice expired, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setDunningExpired($dunning_expired)
    {
        $this->container['dunning_expired'] = $dunning_expired;

        return $this;
    }

    /**
     * Gets period_from
     *
     * @return \DateTime
     */
    public function getPeriodFrom()
    {
        return $this->container['period_from'];
    }

    /**
     * Sets period_from
     *
     * @param \DateTime $period_from The start of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setPeriodFrom($period_from)
    {
        $this->container['period_from'] = $period_from;

        return $this;
    }

    /**
     * Gets period_to
     *
     * @return \DateTime
     */
    public function getPeriodTo()
    {
        return $this->container['period_to'];
    }

    /**
     * Sets period_to
     *
     * @param \DateTime $period_to The end of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setPeriodTo($period_to)
    {
        $this->container['period_to'] = $period_to;

        return $this;
    }

    /**
     * Gets settle_later
     *
     * @return bool
     */
    public function getSettleLater()
    {
        return $this->container['settle_later'];
    }

    /**
     * Sets settle_later
     *
     * @param bool $settle_later Whether this is a customer one-time invoice that will be settled later
     *
     * @return $this
     */
    public function setSettleLater($settle_later)
    {
        $this->container['settle_later'] = $settle_later;

        return $this;
    }

    /**
     * Gets settle_later_payment_method
     *
     * @return string
     */
    public function getSettleLaterPaymentMethod()
    {
        return $this->container['settle_later_payment_method'];
    }

    /**
     * Sets settle_later_payment_method
     *
     * @param string $settle_later_payment_method The payment method to use for a later settle of a one-time customer invoice
     *
     * @return $this
     */
    public function setSettleLaterPaymentMethod($settle_later_payment_method)
    {
        $this->container['settle_later_payment_method'] = $settle_later_payment_method;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Reepay\Model\InvoiceBillingAddress
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Reepay\Model\InvoiceBillingAddress $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \Reepay\Model\InvoiceShippingAddress
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \Reepay\Model\InvoiceShippingAddress $shipping_address shipping_address
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets accounting_number
     *
     * @return string
     */
    public function getAccountingNumber()
    {
        return $this->container['accounting_number'];
    }

    /**
     * Sets accounting_number
     *
     * @param string $accounting_number Invoice accounting number
     *
     * @return $this
     */
    public function setAccountingNumber($accounting_number)
    {
        $this->container['accounting_number'] = $accounting_number;

        return $this;
    }

    /**
     * Gets debtor_id
     *
     * @return int
     */
    public function getDebtorId()
    {
        return $this->container['debtor_id'];
    }

    /**
     * Sets debtor_id
     *
     * @param int $debtor_id Customer debtor id
     *
     * @return $this
     */
    public function setDebtorId($debtor_id)
    {
        $this->container['debtor_id'] = $debtor_id;

        return $this;
    }

    /**
     * Gets download_url
     *
     * @return string
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     *
     * @param string $download_url Url to invoice pdf
     *
     * @return $this
     */
    public function setDownloadUrl($download_url)
    {
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets accounting_created_date
     *
     * @return \DateTime
     */
    public function getAccountingCreatedDate()
    {
        return $this->container['accounting_created_date'];
    }

    /**
     * Sets accounting_created_date
     *
     * @param \DateTime $accounting_created_date When the accounting invoice was created. An accounting invoice is created when a non-charging invoice is created with the state `pending` or the invoice moved from state `created`. Timestamp in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setAccountingCreatedDate($accounting_created_date)
    {
        $this->container['accounting_created_date'] = $accounting_created_date;

        return $this;
    }

    /**
     * Gets credit_notes
     *
     * @return \Reepay\Model\InvoiceCreditNote[]
     */
    public function getCreditNotes()
    {
        return $this->container['credit_notes'];
    }

    /**
     * Sets credit_notes
     *
     * @param \Reepay\Model\InvoiceCreditNote[] $credit_notes Invoice credit notes
     *
     * @return $this
     */
    public function setCreditNotes($credit_notes)
    {
        $this->container['credit_notes'] = $credit_notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
