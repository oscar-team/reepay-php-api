<?php
/**
 * CardGatewayAgreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * CardGatewayAgreement Class Doc Comment
 *
 * @category Class
 * @description Card gateway agreement details in case of card gateway
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CardGatewayAgreement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CardGatewayAgreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currencies' => 'string[]',
        'surcharge' => 'bool',
        'name' => 'string',
        'provider' => 'string',
        'card_types' => 'string[]',
        'payment_types' => 'string[]',
        'provider_settings' => 'map[string,object]',
        'fee_configuration' => 'map[string,object][]',
        'threed_secure' => 'bool',
        'threed_secure_recurring' => 'bool',
        'secured_by_nets' => 'bool',
        'secured_by_nets_recurring' => 'bool',
        'default_require_sca' => 'bool',
        'disallow_threed_secure_attempted' => 'bool',
        'payout' => 'bool',
        'vts_configuration' => '\Reepay\Model\EmvConfiguration',
        'scof_configuration' => '\Reepay\Model\EmvConfiguration',
        'gw_ref' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currencies' => null,
        'surcharge' => null,
        'name' => null,
        'provider' => null,
        'card_types' => null,
        'payment_types' => null,
        'provider_settings' => null,
        'fee_configuration' => null,
        'threed_secure' => null,
        'threed_secure_recurring' => null,
        'secured_by_nets' => null,
        'secured_by_nets_recurring' => null,
        'default_require_sca' => null,
        'disallow_threed_secure_attempted' => null,
        'payout' => null,
        'vts_configuration' => null,
        'scof_configuration' => null,
        'gw_ref' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currencies' => 'currencies',
        'surcharge' => 'surcharge',
        'name' => 'name',
        'provider' => 'provider',
        'card_types' => 'card_types',
        'payment_types' => 'payment_types',
        'provider_settings' => 'provider_settings',
        'fee_configuration' => 'fee_configuration',
        'threed_secure' => 'threed_secure',
        'threed_secure_recurring' => 'threed_secure_recurring',
        'secured_by_nets' => 'secured_by_nets',
        'secured_by_nets_recurring' => 'secured_by_nets_recurring',
        'default_require_sca' => 'default_require_sca',
        'disallow_threed_secure_attempted' => 'disallow_threed_secure_attempted',
        'payout' => 'payout',
        'vts_configuration' => 'vts_configuration',
        'scof_configuration' => 'scof_configuration',
        'gw_ref' => 'gw_ref'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currencies' => 'setCurrencies',
        'surcharge' => 'setSurcharge',
        'name' => 'setName',
        'provider' => 'setProvider',
        'card_types' => 'setCardTypes',
        'payment_types' => 'setPaymentTypes',
        'provider_settings' => 'setProviderSettings',
        'fee_configuration' => 'setFeeConfiguration',
        'threed_secure' => 'setThreedSecure',
        'threed_secure_recurring' => 'setThreedSecureRecurring',
        'secured_by_nets' => 'setSecuredByNets',
        'secured_by_nets_recurring' => 'setSecuredByNetsRecurring',
        'default_require_sca' => 'setDefaultRequireSca',
        'disallow_threed_secure_attempted' => 'setDisallowThreedSecureAttempted',
        'payout' => 'setPayout',
        'vts_configuration' => 'setVtsConfiguration',
        'scof_configuration' => 'setScofConfiguration',
        'gw_ref' => 'setGwRef'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currencies' => 'getCurrencies',
        'surcharge' => 'getSurcharge',
        'name' => 'getName',
        'provider' => 'getProvider',
        'card_types' => 'getCardTypes',
        'payment_types' => 'getPaymentTypes',
        'provider_settings' => 'getProviderSettings',
        'fee_configuration' => 'getFeeConfiguration',
        'threed_secure' => 'getThreedSecure',
        'threed_secure_recurring' => 'getThreedSecureRecurring',
        'secured_by_nets' => 'getSecuredByNets',
        'secured_by_nets_recurring' => 'getSecuredByNetsRecurring',
        'default_require_sca' => 'getDefaultRequireSca',
        'disallow_threed_secure_attempted' => 'getDisallowThreedSecureAttempted',
        'payout' => 'getPayout',
        'vts_configuration' => 'getVtsConfiguration',
        'scof_configuration' => 'getScofConfiguration',
        'gw_ref' => 'getGwRef'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROVIDER_TEST = 'test';
    const PROVIDER_DIBS = 'dibs';
    const PROVIDER_DIBS_TEST = 'dibs_test';
    const PAYMENT_TYPES_CARD = 'card';
    const PAYMENT_TYPES_APPLEPAY = 'applepay';
    const PAYMENT_TYPES_GOOGLEPAY = 'googlepay';
    const PAYMENT_TYPES_MOBILEPAY = 'mobilepay';
    const PAYMENT_TYPES_VIPPS = 'vipps';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProviderAllowableValues()
    {
        return [
            self::PROVIDER_TEST,
            self::PROVIDER_DIBS,
            self::PROVIDER_DIBS_TEST,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypesAllowableValues()
    {
        return [
            self::PAYMENT_TYPES_CARD,
            self::PAYMENT_TYPES_APPLEPAY,
            self::PAYMENT_TYPES_GOOGLEPAY,
            self::PAYMENT_TYPES_MOBILEPAY,
            self::PAYMENT_TYPES_VIPPS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currencies'] = isset($data['currencies']) ? $data['currencies'] : null;
        $this->container['surcharge'] = isset($data['surcharge']) ? $data['surcharge'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['card_types'] = isset($data['card_types']) ? $data['card_types'] : null;
        $this->container['payment_types'] = isset($data['payment_types']) ? $data['payment_types'] : null;
        $this->container['provider_settings'] = isset($data['provider_settings']) ? $data['provider_settings'] : null;
        $this->container['fee_configuration'] = isset($data['fee_configuration']) ? $data['fee_configuration'] : null;
        $this->container['threed_secure'] = isset($data['threed_secure']) ? $data['threed_secure'] : null;
        $this->container['threed_secure_recurring'] = isset($data['threed_secure_recurring']) ? $data['threed_secure_recurring'] : null;
        $this->container['secured_by_nets'] = isset($data['secured_by_nets']) ? $data['secured_by_nets'] : null;
        $this->container['secured_by_nets_recurring'] = isset($data['secured_by_nets_recurring']) ? $data['secured_by_nets_recurring'] : null;
        $this->container['default_require_sca'] = isset($data['default_require_sca']) ? $data['default_require_sca'] : null;
        $this->container['disallow_threed_secure_attempted'] = isset($data['disallow_threed_secure_attempted']) ? $data['disallow_threed_secure_attempted'] : null;
        $this->container['payout'] = isset($data['payout']) ? $data['payout'] : null;
        $this->container['vts_configuration'] = isset($data['vts_configuration']) ? $data['vts_configuration'] : null;
        $this->container['scof_configuration'] = isset($data['scof_configuration']) ? $data['scof_configuration'] : null;
        $this->container['gw_ref'] = isset($data['gw_ref']) ? $data['gw_ref'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currencies'] === null) {
            $invalidProperties[] = "'currencies' can't be null";
        }
        if ($this->container['provider'] === null) {
            $invalidProperties[] = "'provider' can't be null";
        }
        $allowedValues = $this->getProviderAllowableValues();
        if (!is_null($this->container['provider']) && !in_array($this->container['provider'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'provider', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['gw_ref'] === null) {
            $invalidProperties[] = "'gw_ref' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currencies
     *
     * @return string[]
     */
    public function getCurrencies()
    {
        return $this->container['currencies'];
    }

    /**
     * Sets currencies
     *
     * @param string[] $currencies Set of currencies supported by agreement. Each currency in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code.
     *
     * @return $this
     */
    public function setCurrencies($currencies)
    {
        $this->container['currencies'] = $currencies;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return bool
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param bool $surcharge Add acquirer surcharge fee if possible
     *
     * @return $this
     */
    public function setSurcharge($surcharge)
    {
        $this->container['surcharge'] = $surcharge;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Optional name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider Card gateway provider type
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $allowedValues = $this->getProviderAllowableValues();
        if (!in_array($provider, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'provider', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets card_types
     *
     * @return string[]
     */
    public function getCardTypes()
    {
        return $this->container['card_types'];
    }

    /**
     * Sets card_types
     *
     * @param string[] $card_types Card types supported by agreement
     *
     * @return $this
     */
    public function setCardTypes($card_types)
    {
        $this->container['card_types'] = $card_types;

        return $this;
    }

    /**
     * Gets payment_types
     *
     * @return string[]
     */
    public function getPaymentTypes()
    {
        return $this->container['payment_types'];
    }

    /**
     * Sets payment_types
     *
     * @param string[] $payment_types Set of supported payment types for agreement: `card`, `applepay`, `googlepay`, `mobilepay`, `vipps`. If not defined defaults to all.
     *
     * @return $this
     */
    public function setPaymentTypes($payment_types)
    {
        $allowedValues = $this->getPaymentTypesAllowableValues();
        if (!is_null($payment_types) && array_diff($payment_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_types'] = $payment_types;

        return $this;
    }

    /**
     * Gets provider_settings
     *
     * @return map[string,object]
     */
    public function getProviderSettings()
    {
        return $this->container['provider_settings'];
    }

    /**
     * Sets provider_settings
     *
     * @param map[string,object] $provider_settings Key value map of provider settings
     *
     * @return $this
     */
    public function setProviderSettings($provider_settings)
    {
        $this->container['provider_settings'] = $provider_settings;

        return $this;
    }

    /**
     * Gets fee_configuration
     *
     * @return map[string,object][]
     */
    public function getFeeConfiguration()
    {
        return $this->container['fee_configuration'];
    }

    /**
     * Sets fee_configuration
     *
     * @param map[string,object][] $fee_configuration Prioritized list of fee configuration entries
     *
     * @return $this
     */
    public function setFeeConfiguration($fee_configuration)
    {
        $this->container['fee_configuration'] = $fee_configuration;

        return $this;
    }

    /**
     * Gets threed_secure
     *
     * @return bool
     */
    public function getThreedSecure()
    {
        return $this->container['threed_secure'];
    }

    /**
     * Sets threed_secure
     *
     * @param bool $threed_secure Use 3DSecure for non-recurring payments (if supported by provider)
     *
     * @return $this
     */
    public function setThreedSecure($threed_secure)
    {
        $this->container['threed_secure'] = $threed_secure;

        return $this;
    }

    /**
     * Gets threed_secure_recurring
     *
     * @return bool
     */
    public function getThreedSecureRecurring()
    {
        return $this->container['threed_secure_recurring'];
    }

    /**
     * Sets threed_secure_recurring
     *
     * @param bool $threed_secure_recurring Use 3DSecure for recurring payments (if supported by provider)
     *
     * @return $this
     */
    public function setThreedSecureRecurring($threed_secure_recurring)
    {
        $this->container['threed_secure_recurring'] = $threed_secure_recurring;

        return $this;
    }

    /**
     * Gets secured_by_nets
     *
     * @return bool
     */
    public function getSecuredByNets()
    {
        return $this->container['secured_by_nets'];
    }

    /**
     * Sets secured_by_nets
     *
     * @param bool $secured_by_nets Use Secured By Nets for non-recurring payments (if supported by provider)
     *
     * @return $this
     */
    public function setSecuredByNets($secured_by_nets)
    {
        $this->container['secured_by_nets'] = $secured_by_nets;

        return $this;
    }

    /**
     * Gets secured_by_nets_recurring
     *
     * @return bool
     */
    public function getSecuredByNetsRecurring()
    {
        return $this->container['secured_by_nets_recurring'];
    }

    /**
     * Sets secured_by_nets_recurring
     *
     * @param bool $secured_by_nets_recurring Use Secured By Nets for recurring payments (if supported by provider)
     *
     * @return $this
     */
    public function setSecuredByNetsRecurring($secured_by_nets_recurring)
    {
        $this->container['secured_by_nets_recurring'] = $secured_by_nets_recurring;

        return $this;
    }

    /**
     * Gets default_require_sca
     *
     * @return bool
     */
    public function getDefaultRequireSca()
    {
        return $this->container['default_require_sca'];
    }

    /**
     * Sets default_require_sca
     *
     * @param bool $default_require_sca Default behaviour if no specific SCA handing is defined in payment sessions. If enabled SCA will be required and un-enrolled cards will be declined.
     *
     * @return $this
     */
    public function setDefaultRequireSca($default_require_sca)
    {
        $this->container['default_require_sca'] = $default_require_sca;

        return $this;
    }

    /**
     * Gets disallow_threed_secure_attempted
     *
     * @return bool
     */
    public function getDisallowThreedSecureAttempted()
    {
        return $this->container['disallow_threed_secure_attempted'];
    }

    /**
     * Sets disallow_threed_secure_attempted
     *
     * @param bool $disallow_threed_secure_attempted Disallow 3D Secure status attempted which means that card issuer does not support 3D Secure so authentication could not be performed. An attempted 3D Secure flow normally results in liability shift.
     *
     * @return $this
     */
    public function setDisallowThreedSecureAttempted($disallow_threed_secure_attempted)
    {
        $this->container['disallow_threed_secure_attempted'] = $disallow_threed_secure_attempted;

        return $this;
    }

    /**
     * Gets payout
     *
     * @return bool
     */
    public function getPayout()
    {
        return $this->container['payout'];
    }

    /**
     * Sets payout
     *
     * @param bool $payout Use agreement for payout (if supported by provider)
     *
     * @return $this
     */
    public function setPayout($payout)
    {
        $this->container['payout'] = $payout;

        return $this;
    }

    /**
     * Gets vts_configuration
     *
     * @return \Reepay\Model\EmvConfiguration
     */
    public function getVtsConfiguration()
    {
        return $this->container['vts_configuration'];
    }

    /**
     * Sets vts_configuration
     *
     * @param \Reepay\Model\EmvConfiguration $vts_configuration vts_configuration
     *
     * @return $this
     */
    public function setVtsConfiguration($vts_configuration)
    {
        $this->container['vts_configuration'] = $vts_configuration;

        return $this;
    }

    /**
     * Gets scof_configuration
     *
     * @return \Reepay\Model\EmvConfiguration
     */
    public function getScofConfiguration()
    {
        return $this->container['scof_configuration'];
    }

    /**
     * Sets scof_configuration
     *
     * @param \Reepay\Model\EmvConfiguration $scof_configuration scof_configuration
     *
     * @return $this
     */
    public function setScofConfiguration($scof_configuration)
    {
        $this->container['scof_configuration'] = $scof_configuration;

        return $this;
    }

    /**
     * Gets gw_ref
     *
     * @return string
     */
    public function getGwRef()
    {
        return $this->container['gw_ref'];
    }

    /**
     * Sets gw_ref
     *
     * @param string $gw_ref Card gateway reference id
     *
     * @return $this
     */
    public function setGwRef($gw_ref)
    {
        $this->container['gw_ref'] = $gw_ref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
