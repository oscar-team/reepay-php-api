<?php
/**
 * StyleConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * StyleConfig Class Doc Comment
 *
 * @category Class
 * @description Optional style configuration
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StyleConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StyleConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled_button_color' => 'string',
        'disabled_button_color' => 'string',
        'enabled_continue_button_color' => 'string',
        'background_color' => 'string',
        'window_background_color' => 'string',
        'window_header_background_color' => 'string',
        'payment_header_background_color' => 'string',
        'footer_background_color' => 'string',
        'dark_mode' => 'bool',
        'payment_method_divider_color' => 'string',
        'window_header_box_shadow_color' => 'string',
        'footer_font' => '\Reepay\Model\FontConfig',
        'default_config' => '\Reepay\Model\DefaultConfig',
        'payment_method_title' => '\Reepay\Model\FontConfig',
        'payment_description' => '\Reepay\Model\FontConfig',
        'payment_amount' => '\Reepay\Model\FontConfig',
        'labels' => '\Reepay\Model\FontConfig',
        'pay_button' => '\Reepay\Model\FontConfig',
        'order_line_name' => '\Reepay\Model\FontConfig',
        'order_line_quantity' => '\Reepay\Model\FontConfig',
        'order_line_amount' => '\Reepay\Model\FontConfig',
        'inputs' => '\Reepay\Model\InputConfig',
        'box_shadow_color' => 'string',
        'company_name' => '\Reepay\Model\FontConfig',
        'company_address' => '\Reepay\Model\FontConfig',
        'title' => '\Reepay\Model\FontConfig',
        'sub_title' => '\Reepay\Model\FontConfig',
        'terms_line' => '\Reepay\Model\FontConfig',
        'pricing_item_title' => '\Reepay\Model\FontConfig',
        'pricing_item_row' => '\Reepay\Model\FontConfig'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled_button_color' => null,
        'disabled_button_color' => null,
        'enabled_continue_button_color' => null,
        'background_color' => null,
        'window_background_color' => null,
        'window_header_background_color' => null,
        'payment_header_background_color' => null,
        'footer_background_color' => null,
        'dark_mode' => null,
        'payment_method_divider_color' => null,
        'window_header_box_shadow_color' => null,
        'footer_font' => null,
        'default_config' => null,
        'payment_method_title' => null,
        'payment_description' => null,
        'payment_amount' => null,
        'labels' => null,
        'pay_button' => null,
        'order_line_name' => null,
        'order_line_quantity' => null,
        'order_line_amount' => null,
        'inputs' => null,
        'box_shadow_color' => null,
        'company_name' => null,
        'company_address' => null,
        'title' => null,
        'sub_title' => null,
        'terms_line' => null,
        'pricing_item_title' => null,
        'pricing_item_row' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled_button_color' => 'enabledButtonColor',
        'disabled_button_color' => 'disabledButtonColor',
        'enabled_continue_button_color' => 'enabledContinueButtonColor',
        'background_color' => 'backgroundColor',
        'window_background_color' => 'windowBackgroundColor',
        'window_header_background_color' => 'windowHeaderBackgroundColor',
        'payment_header_background_color' => 'paymentHeaderBackgroundColor',
        'footer_background_color' => 'footerBackgroundColor',
        'dark_mode' => 'darkMode',
        'payment_method_divider_color' => 'paymentMethodDividerColor',
        'window_header_box_shadow_color' => 'windowHeaderBoxShadowColor',
        'footer_font' => 'footerFont',
        'default_config' => 'defaultConfig',
        'payment_method_title' => 'paymentMethodTitle',
        'payment_description' => 'paymentDescription',
        'payment_amount' => 'paymentAmount',
        'labels' => 'labels',
        'pay_button' => 'payButton',
        'order_line_name' => 'orderLineName',
        'order_line_quantity' => 'orderLineQuantity',
        'order_line_amount' => 'orderLineAmount',
        'inputs' => 'inputs',
        'box_shadow_color' => 'boxShadowColor',
        'company_name' => 'companyName',
        'company_address' => 'companyAddress',
        'title' => 'title',
        'sub_title' => 'subTitle',
        'terms_line' => 'termsLine',
        'pricing_item_title' => 'pricingItemTitle',
        'pricing_item_row' => 'pricingItemRow'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled_button_color' => 'setEnabledButtonColor',
        'disabled_button_color' => 'setDisabledButtonColor',
        'enabled_continue_button_color' => 'setEnabledContinueButtonColor',
        'background_color' => 'setBackgroundColor',
        'window_background_color' => 'setWindowBackgroundColor',
        'window_header_background_color' => 'setWindowHeaderBackgroundColor',
        'payment_header_background_color' => 'setPaymentHeaderBackgroundColor',
        'footer_background_color' => 'setFooterBackgroundColor',
        'dark_mode' => 'setDarkMode',
        'payment_method_divider_color' => 'setPaymentMethodDividerColor',
        'window_header_box_shadow_color' => 'setWindowHeaderBoxShadowColor',
        'footer_font' => 'setFooterFont',
        'default_config' => 'setDefaultConfig',
        'payment_method_title' => 'setPaymentMethodTitle',
        'payment_description' => 'setPaymentDescription',
        'payment_amount' => 'setPaymentAmount',
        'labels' => 'setLabels',
        'pay_button' => 'setPayButton',
        'order_line_name' => 'setOrderLineName',
        'order_line_quantity' => 'setOrderLineQuantity',
        'order_line_amount' => 'setOrderLineAmount',
        'inputs' => 'setInputs',
        'box_shadow_color' => 'setBoxShadowColor',
        'company_name' => 'setCompanyName',
        'company_address' => 'setCompanyAddress',
        'title' => 'setTitle',
        'sub_title' => 'setSubTitle',
        'terms_line' => 'setTermsLine',
        'pricing_item_title' => 'setPricingItemTitle',
        'pricing_item_row' => 'setPricingItemRow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled_button_color' => 'getEnabledButtonColor',
        'disabled_button_color' => 'getDisabledButtonColor',
        'enabled_continue_button_color' => 'getEnabledContinueButtonColor',
        'background_color' => 'getBackgroundColor',
        'window_background_color' => 'getWindowBackgroundColor',
        'window_header_background_color' => 'getWindowHeaderBackgroundColor',
        'payment_header_background_color' => 'getPaymentHeaderBackgroundColor',
        'footer_background_color' => 'getFooterBackgroundColor',
        'dark_mode' => 'getDarkMode',
        'payment_method_divider_color' => 'getPaymentMethodDividerColor',
        'window_header_box_shadow_color' => 'getWindowHeaderBoxShadowColor',
        'footer_font' => 'getFooterFont',
        'default_config' => 'getDefaultConfig',
        'payment_method_title' => 'getPaymentMethodTitle',
        'payment_description' => 'getPaymentDescription',
        'payment_amount' => 'getPaymentAmount',
        'labels' => 'getLabels',
        'pay_button' => 'getPayButton',
        'order_line_name' => 'getOrderLineName',
        'order_line_quantity' => 'getOrderLineQuantity',
        'order_line_amount' => 'getOrderLineAmount',
        'inputs' => 'getInputs',
        'box_shadow_color' => 'getBoxShadowColor',
        'company_name' => 'getCompanyName',
        'company_address' => 'getCompanyAddress',
        'title' => 'getTitle',
        'sub_title' => 'getSubTitle',
        'terms_line' => 'getTermsLine',
        'pricing_item_title' => 'getPricingItemTitle',
        'pricing_item_row' => 'getPricingItemRow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled_button_color'] = isset($data['enabled_button_color']) ? $data['enabled_button_color'] : null;
        $this->container['disabled_button_color'] = isset($data['disabled_button_color']) ? $data['disabled_button_color'] : null;
        $this->container['enabled_continue_button_color'] = isset($data['enabled_continue_button_color']) ? $data['enabled_continue_button_color'] : null;
        $this->container['background_color'] = isset($data['background_color']) ? $data['background_color'] : null;
        $this->container['window_background_color'] = isset($data['window_background_color']) ? $data['window_background_color'] : null;
        $this->container['window_header_background_color'] = isset($data['window_header_background_color']) ? $data['window_header_background_color'] : null;
        $this->container['payment_header_background_color'] = isset($data['payment_header_background_color']) ? $data['payment_header_background_color'] : null;
        $this->container['footer_background_color'] = isset($data['footer_background_color']) ? $data['footer_background_color'] : null;
        $this->container['dark_mode'] = isset($data['dark_mode']) ? $data['dark_mode'] : null;
        $this->container['payment_method_divider_color'] = isset($data['payment_method_divider_color']) ? $data['payment_method_divider_color'] : null;
        $this->container['window_header_box_shadow_color'] = isset($data['window_header_box_shadow_color']) ? $data['window_header_box_shadow_color'] : null;
        $this->container['footer_font'] = isset($data['footer_font']) ? $data['footer_font'] : null;
        $this->container['default_config'] = isset($data['default_config']) ? $data['default_config'] : null;
        $this->container['payment_method_title'] = isset($data['payment_method_title']) ? $data['payment_method_title'] : null;
        $this->container['payment_description'] = isset($data['payment_description']) ? $data['payment_description'] : null;
        $this->container['payment_amount'] = isset($data['payment_amount']) ? $data['payment_amount'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['pay_button'] = isset($data['pay_button']) ? $data['pay_button'] : null;
        $this->container['order_line_name'] = isset($data['order_line_name']) ? $data['order_line_name'] : null;
        $this->container['order_line_quantity'] = isset($data['order_line_quantity']) ? $data['order_line_quantity'] : null;
        $this->container['order_line_amount'] = isset($data['order_line_amount']) ? $data['order_line_amount'] : null;
        $this->container['inputs'] = isset($data['inputs']) ? $data['inputs'] : null;
        $this->container['box_shadow_color'] = isset($data['box_shadow_color']) ? $data['box_shadow_color'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_address'] = isset($data['company_address']) ? $data['company_address'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['sub_title'] = isset($data['sub_title']) ? $data['sub_title'] : null;
        $this->container['terms_line'] = isset($data['terms_line']) ? $data['terms_line'] : null;
        $this->container['pricing_item_title'] = isset($data['pricing_item_title']) ? $data['pricing_item_title'] : null;
        $this->container['pricing_item_row'] = isset($data['pricing_item_row']) ? $data['pricing_item_row'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled_button_color
     *
     * @return string
     */
    public function getEnabledButtonColor()
    {
        return $this->container['enabled_button_color'];
    }

    /**
     * Sets enabled_button_color
     *
     * @param string $enabled_button_color enabled_button_color
     *
     * @return $this
     */
    public function setEnabledButtonColor($enabled_button_color)
    {
        $this->container['enabled_button_color'] = $enabled_button_color;

        return $this;
    }

    /**
     * Gets disabled_button_color
     *
     * @return string
     */
    public function getDisabledButtonColor()
    {
        return $this->container['disabled_button_color'];
    }

    /**
     * Sets disabled_button_color
     *
     * @param string $disabled_button_color disabled_button_color
     *
     * @return $this
     */
    public function setDisabledButtonColor($disabled_button_color)
    {
        $this->container['disabled_button_color'] = $disabled_button_color;

        return $this;
    }

    /**
     * Gets enabled_continue_button_color
     *
     * @return string
     */
    public function getEnabledContinueButtonColor()
    {
        return $this->container['enabled_continue_button_color'];
    }

    /**
     * Sets enabled_continue_button_color
     *
     * @param string $enabled_continue_button_color enabled_continue_button_color
     *
     * @return $this
     */
    public function setEnabledContinueButtonColor($enabled_continue_button_color)
    {
        $this->container['enabled_continue_button_color'] = $enabled_continue_button_color;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string $background_color background_color
     *
     * @return $this
     */
    public function setBackgroundColor($background_color)
    {
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets window_background_color
     *
     * @return string
     */
    public function getWindowBackgroundColor()
    {
        return $this->container['window_background_color'];
    }

    /**
     * Sets window_background_color
     *
     * @param string $window_background_color window_background_color
     *
     * @return $this
     */
    public function setWindowBackgroundColor($window_background_color)
    {
        $this->container['window_background_color'] = $window_background_color;

        return $this;
    }

    /**
     * Gets window_header_background_color
     *
     * @return string
     */
    public function getWindowHeaderBackgroundColor()
    {
        return $this->container['window_header_background_color'];
    }

    /**
     * Sets window_header_background_color
     *
     * @param string $window_header_background_color window_header_background_color
     *
     * @return $this
     */
    public function setWindowHeaderBackgroundColor($window_header_background_color)
    {
        $this->container['window_header_background_color'] = $window_header_background_color;

        return $this;
    }

    /**
     * Gets payment_header_background_color
     *
     * @return string
     */
    public function getPaymentHeaderBackgroundColor()
    {
        return $this->container['payment_header_background_color'];
    }

    /**
     * Sets payment_header_background_color
     *
     * @param string $payment_header_background_color payment_header_background_color
     *
     * @return $this
     */
    public function setPaymentHeaderBackgroundColor($payment_header_background_color)
    {
        $this->container['payment_header_background_color'] = $payment_header_background_color;

        return $this;
    }

    /**
     * Gets footer_background_color
     *
     * @return string
     */
    public function getFooterBackgroundColor()
    {
        return $this->container['footer_background_color'];
    }

    /**
     * Sets footer_background_color
     *
     * @param string $footer_background_color footer_background_color
     *
     * @return $this
     */
    public function setFooterBackgroundColor($footer_background_color)
    {
        $this->container['footer_background_color'] = $footer_background_color;

        return $this;
    }

    /**
     * Gets dark_mode
     *
     * @return bool
     */
    public function getDarkMode()
    {
        return $this->container['dark_mode'];
    }

    /**
     * Sets dark_mode
     *
     * @param bool $dark_mode dark_mode
     *
     * @return $this
     */
    public function setDarkMode($dark_mode)
    {
        $this->container['dark_mode'] = $dark_mode;

        return $this;
    }

    /**
     * Gets payment_method_divider_color
     *
     * @return string
     */
    public function getPaymentMethodDividerColor()
    {
        return $this->container['payment_method_divider_color'];
    }

    /**
     * Sets payment_method_divider_color
     *
     * @param string $payment_method_divider_color payment_method_divider_color
     *
     * @return $this
     */
    public function setPaymentMethodDividerColor($payment_method_divider_color)
    {
        $this->container['payment_method_divider_color'] = $payment_method_divider_color;

        return $this;
    }

    /**
     * Gets window_header_box_shadow_color
     *
     * @return string
     */
    public function getWindowHeaderBoxShadowColor()
    {
        return $this->container['window_header_box_shadow_color'];
    }

    /**
     * Sets window_header_box_shadow_color
     *
     * @param string $window_header_box_shadow_color window_header_box_shadow_color
     *
     * @return $this
     */
    public function setWindowHeaderBoxShadowColor($window_header_box_shadow_color)
    {
        $this->container['window_header_box_shadow_color'] = $window_header_box_shadow_color;

        return $this;
    }

    /**
     * Gets footer_font
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getFooterFont()
    {
        return $this->container['footer_font'];
    }

    /**
     * Sets footer_font
     *
     * @param \Reepay\Model\FontConfig $footer_font footer_font
     *
     * @return $this
     */
    public function setFooterFont($footer_font)
    {
        $this->container['footer_font'] = $footer_font;

        return $this;
    }

    /**
     * Gets default_config
     *
     * @return \Reepay\Model\DefaultConfig
     */
    public function getDefaultConfig()
    {
        return $this->container['default_config'];
    }

    /**
     * Sets default_config
     *
     * @param \Reepay\Model\DefaultConfig $default_config default_config
     *
     * @return $this
     */
    public function setDefaultConfig($default_config)
    {
        $this->container['default_config'] = $default_config;

        return $this;
    }

    /**
     * Gets payment_method_title
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getPaymentMethodTitle()
    {
        return $this->container['payment_method_title'];
    }

    /**
     * Sets payment_method_title
     *
     * @param \Reepay\Model\FontConfig $payment_method_title payment_method_title
     *
     * @return $this
     */
    public function setPaymentMethodTitle($payment_method_title)
    {
        $this->container['payment_method_title'] = $payment_method_title;

        return $this;
    }

    /**
     * Gets payment_description
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getPaymentDescription()
    {
        return $this->container['payment_description'];
    }

    /**
     * Sets payment_description
     *
     * @param \Reepay\Model\FontConfig $payment_description payment_description
     *
     * @return $this
     */
    public function setPaymentDescription($payment_description)
    {
        $this->container['payment_description'] = $payment_description;

        return $this;
    }

    /**
     * Gets payment_amount
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getPaymentAmount()
    {
        return $this->container['payment_amount'];
    }

    /**
     * Sets payment_amount
     *
     * @param \Reepay\Model\FontConfig $payment_amount payment_amount
     *
     * @return $this
     */
    public function setPaymentAmount($payment_amount)
    {
        $this->container['payment_amount'] = $payment_amount;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Reepay\Model\FontConfig $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets pay_button
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getPayButton()
    {
        return $this->container['pay_button'];
    }

    /**
     * Sets pay_button
     *
     * @param \Reepay\Model\FontConfig $pay_button pay_button
     *
     * @return $this
     */
    public function setPayButton($pay_button)
    {
        $this->container['pay_button'] = $pay_button;

        return $this;
    }

    /**
     * Gets order_line_name
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getOrderLineName()
    {
        return $this->container['order_line_name'];
    }

    /**
     * Sets order_line_name
     *
     * @param \Reepay\Model\FontConfig $order_line_name order_line_name
     *
     * @return $this
     */
    public function setOrderLineName($order_line_name)
    {
        $this->container['order_line_name'] = $order_line_name;

        return $this;
    }

    /**
     * Gets order_line_quantity
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getOrderLineQuantity()
    {
        return $this->container['order_line_quantity'];
    }

    /**
     * Sets order_line_quantity
     *
     * @param \Reepay\Model\FontConfig $order_line_quantity order_line_quantity
     *
     * @return $this
     */
    public function setOrderLineQuantity($order_line_quantity)
    {
        $this->container['order_line_quantity'] = $order_line_quantity;

        return $this;
    }

    /**
     * Gets order_line_amount
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getOrderLineAmount()
    {
        return $this->container['order_line_amount'];
    }

    /**
     * Sets order_line_amount
     *
     * @param \Reepay\Model\FontConfig $order_line_amount order_line_amount
     *
     * @return $this
     */
    public function setOrderLineAmount($order_line_amount)
    {
        $this->container['order_line_amount'] = $order_line_amount;

        return $this;
    }

    /**
     * Gets inputs
     *
     * @return \Reepay\Model\InputConfig
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param \Reepay\Model\InputConfig $inputs inputs
     *
     * @return $this
     */
    public function setInputs($inputs)
    {
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets box_shadow_color
     *
     * @return string
     */
    public function getBoxShadowColor()
    {
        return $this->container['box_shadow_color'];
    }

    /**
     * Sets box_shadow_color
     *
     * @param string $box_shadow_color box_shadow_color
     *
     * @return $this
     */
    public function setBoxShadowColor($box_shadow_color)
    {
        $this->container['box_shadow_color'] = $box_shadow_color;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param \Reepay\Model\FontConfig $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_address
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getCompanyAddress()
    {
        return $this->container['company_address'];
    }

    /**
     * Sets company_address
     *
     * @param \Reepay\Model\FontConfig $company_address company_address
     *
     * @return $this
     */
    public function setCompanyAddress($company_address)
    {
        $this->container['company_address'] = $company_address;

        return $this;
    }

    /**
     * Gets title
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param \Reepay\Model\FontConfig $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets sub_title
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getSubTitle()
    {
        return $this->container['sub_title'];
    }

    /**
     * Sets sub_title
     *
     * @param \Reepay\Model\FontConfig $sub_title sub_title
     *
     * @return $this
     */
    public function setSubTitle($sub_title)
    {
        $this->container['sub_title'] = $sub_title;

        return $this;
    }

    /**
     * Gets terms_line
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getTermsLine()
    {
        return $this->container['terms_line'];
    }

    /**
     * Sets terms_line
     *
     * @param \Reepay\Model\FontConfig $terms_line terms_line
     *
     * @return $this
     */
    public function setTermsLine($terms_line)
    {
        $this->container['terms_line'] = $terms_line;

        return $this;
    }

    /**
     * Gets pricing_item_title
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getPricingItemTitle()
    {
        return $this->container['pricing_item_title'];
    }

    /**
     * Sets pricing_item_title
     *
     * @param \Reepay\Model\FontConfig $pricing_item_title pricing_item_title
     *
     * @return $this
     */
    public function setPricingItemTitle($pricing_item_title)
    {
        $this->container['pricing_item_title'] = $pricing_item_title;

        return $this;
    }

    /**
     * Gets pricing_item_row
     *
     * @return \Reepay\Model\FontConfig
     */
    public function getPricingItemRow()
    {
        return $this->container['pricing_item_row'];
    }

    /**
     * Sets pricing_item_row
     *
     * @param \Reepay\Model\FontConfig $pricing_item_row pricing_item_row
     *
     * @return $this
     */
    public function setPricingItemRow($pricing_item_row)
    {
        $this->container['pricing_item_row'] = $pricing_item_row;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
