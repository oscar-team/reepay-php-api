<?php
/**
 * SubscriptionPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * SubscriptionPlan Class Doc Comment
 *
 * @category Class
 * @description Subscription plan
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionPlan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'version' => 'int',
        'handle' => 'string',
        'name' => 'string',
        'description' => 'string',
        'tax_policy' => 'string',
        'amount' => 'int',
        'quantity' => 'int',
        'amount_incl_vat' => 'bool',
        'vat' => 'float',
        'trial_interval_length' => 'int',
        'trial_interval_unit' => 'string',
        'setup_fee' => 'int',
        'setup_fee_text' => 'string',
        'currency' => 'string',
        'interval_length' => 'int',
        'schedule_type' => 'string',
        'schedule_fixed_day' => 'int',
        'base_month' => 'int',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'version' => 'int32',
        'handle' => null,
        'name' => null,
        'description' => null,
        'tax_policy' => null,
        'amount' => 'int32',
        'quantity' => 'int32',
        'amount_incl_vat' => null,
        'vat' => 'float',
        'trial_interval_length' => 'int32',
        'trial_interval_unit' => null,
        'setup_fee' => 'int32',
        'setup_fee_text' => null,
        'currency' => null,
        'interval_length' => 'int32',
        'schedule_type' => null,
        'schedule_fixed_day' => 'int32',
        'base_month' => 'int32',
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'handle' => 'handle',
        'name' => 'name',
        'description' => 'description',
        'tax_policy' => 'taxPolicy',
        'amount' => 'amount',
        'quantity' => 'quantity',
        'amount_incl_vat' => 'amount_incl_vat',
        'vat' => 'vat',
        'trial_interval_length' => 'trial_interval_length',
        'trial_interval_unit' => 'trial_interval_unit',
        'setup_fee' => 'setup_fee',
        'setup_fee_text' => 'setup_fee_text',
        'currency' => 'currency',
        'interval_length' => 'interval_length',
        'schedule_type' => 'schedule_type',
        'schedule_fixed_day' => 'schedule_fixed_day',
        'base_month' => 'base_month',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'handle' => 'setHandle',
        'name' => 'setName',
        'description' => 'setDescription',
        'tax_policy' => 'setTaxPolicy',
        'amount' => 'setAmount',
        'quantity' => 'setQuantity',
        'amount_incl_vat' => 'setAmountInclVat',
        'vat' => 'setVat',
        'trial_interval_length' => 'setTrialIntervalLength',
        'trial_interval_unit' => 'setTrialIntervalUnit',
        'setup_fee' => 'setSetupFee',
        'setup_fee_text' => 'setSetupFeeText',
        'currency' => 'setCurrency',
        'interval_length' => 'setIntervalLength',
        'schedule_type' => 'setScheduleType',
        'schedule_fixed_day' => 'setScheduleFixedDay',
        'base_month' => 'setBaseMonth',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'handle' => 'getHandle',
        'name' => 'getName',
        'description' => 'getDescription',
        'tax_policy' => 'getTaxPolicy',
        'amount' => 'getAmount',
        'quantity' => 'getQuantity',
        'amount_incl_vat' => 'getAmountInclVat',
        'vat' => 'getVat',
        'trial_interval_length' => 'getTrialIntervalLength',
        'trial_interval_unit' => 'getTrialIntervalUnit',
        'setup_fee' => 'getSetupFee',
        'setup_fee_text' => 'getSetupFeeText',
        'currency' => 'getCurrency',
        'interval_length' => 'getIntervalLength',
        'schedule_type' => 'getScheduleType',
        'schedule_fixed_day' => 'getScheduleFixedDay',
        'base_month' => 'getBaseMonth',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRIAL_INTERVAL_UNIT_MONTHS = 'months';
    const TRIAL_INTERVAL_UNIT_DAYS = 'days';
    const SCHEDULE_TYPE_MANUAL = 'manual';
    const SCHEDULE_TYPE_DAILY = 'daily';
    const SCHEDULE_TYPE_WEEKLY_FIXEDDAY = 'weekly_fixedday';
    const SCHEDULE_TYPE_MONTH_STARTDATE = 'month_startdate';
    const SCHEDULE_TYPE_MONTH_FIXEDDAY = 'month_fixedday';
    const SCHEDULE_TYPE_MONTH_LASTDAY = 'month_lastday';
    const STATE_ACTIVE = 'active';
    const STATE_DELETED = 'deleted';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrialIntervalUnitAllowableValues()
    {
        return [
            self::TRIAL_INTERVAL_UNIT_MONTHS,
            self::TRIAL_INTERVAL_UNIT_DAYS,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleTypeAllowableValues()
    {
        return [
            self::SCHEDULE_TYPE_MANUAL,
            self::SCHEDULE_TYPE_DAILY,
            self::SCHEDULE_TYPE_WEEKLY_FIXEDDAY,
            self::SCHEDULE_TYPE_MONTH_STARTDATE,
            self::SCHEDULE_TYPE_MONTH_FIXEDDAY,
            self::SCHEDULE_TYPE_MONTH_LASTDAY,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE
            self::STATE_DELETED
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['handle'] = isset($data['handle']) ? $data['handle'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['tax_policy'] = isset($data['tax_policy']) ? $data['tax_policy'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['amount_incl_vat'] = isset($data['amount_incl_vat']) ? $data['amount_incl_vat'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['trial_interval_length'] = isset($data['trial_interval_length']) ? $data['trial_interval_length'] : null;
        $this->container['trial_interval_unit'] = isset($data['trial_interval_unit']) ? $data['trial_interval_unit'] : null;
        $this->container['setup_fee'] = isset($data['setup_fee']) ? $data['setup_fee'] : null;
        $this->container['setup_fee_text'] = isset($data['setup_fee_text']) ? $data['setup_fee_text'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['interval_length'] = isset($data['interval_length']) ? $data['interval_length'] : null;
        $this->container['schedule_type'] = isset($data['schedule_type']) ? $data['schedule_type'] : null;
        $this->container['schedule_fixed_day'] = isset($data['schedule_fixed_day']) ? $data['schedule_fixed_day'] : null;
        $this->container['base_month'] = isset($data['base_month']) ? $data['base_month'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        $allowedValues = $this->getTrialIntervalUnitAllowableValues();
        if (!is_null($this->container['trial_interval_unit']) && !in_array($this->container['trial_interval_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'trial_interval_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['interval_length'] === null) {
            $invalidProperties[] = "'interval_length' can't be null";
        }
        if ($this->container['schedule_type'] === null) {
            $invalidProperties[] = "'schedule_type' can't be null";
        }
        $allowedValues = $this->getScheduleTypeAllowableValues();
        if (!is_null($this->container['schedule_type']) && !in_array($this->container['schedule_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'schedule_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Per account unique handle for the subscription plan. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle for the subscription plan. Max length 255 with allowable characters [a-zA-Z0-9_.-@].
     *
     * @return $this
     */
    public function setHandle($handle)
    {
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the plan
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the plan
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tax_policy
     *
     * @return string
     */
    public function getTaxPolicy()
    {
        return $this->container['tax_policy'];
    }

    /**
     * Sets tax_policy
     *
     * @param string $tax_policy Optional tax policy handle for this plan.
     *
     * @return $this
     */
    public function setTaxPolicy($tax_policy)
    {
        $this->container['tax_policy'] = $tax_policy;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Amount for the plan in the smallest unit for the account currency
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Optional default quantity of the subscription plan product for new subscriptions. Default is 1.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets amount_incl_vat
     *
     * @return bool
     */
    public function getAmountInclVat()
    {
        return $this->container['amount_incl_vat'];
    }

    /**
     * Sets amount_incl_vat
     *
     * @param bool $amount_incl_vat Whether the amount is including VAT. Default true.
     *
     * @return $this
     */
    public function setAmountInclVat($amount_incl_vat)
    {
        $this->container['amount_incl_vat'] = $amount_incl_vat;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float $vat Optional vat for this plan. Account default is used if none given.
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets trial_interval_length
     *
     * @return int
     */
    public function getTrialIntervalLength()
    {
        return $this->container['trial_interval_length'];
    }

    /**
     * Sets trial_interval_length
     *
     * @param int $trial_interval_length Free trial interval length. E.g. 1 month.
     *
     * @return $this
     */
    public function setTrialIntervalLength($trial_interval_length)
    {
        $this->container['trial_interval_length'] = $trial_interval_length;

        return $this;
    }

    /**
     * Gets trial_interval_unit
     *
     * @return string
     */
    public function getTrialIntervalUnit()
    {
        return $this->container['trial_interval_unit'];
    }

    /**
     * Sets trial_interval_unit
     *
     * @param string $trial_interval_unit Time unit for free trial period
     *
     * @return $this
     */
    public function setTrialIntervalUnit($trial_interval_unit)
    {
        $allowedValues = $this->getTrialIntervalUnitAllowableValues();
        if (!is_null($trial_interval_unit) && !in_array($trial_interval_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'trial_interval_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trial_interval_unit'] = $trial_interval_unit;

        return $this;
    }

    /**
     * Gets setup_fee
     *
     * @return int
     */
    public function getSetupFee()
    {
        return $this->container['setup_fee'];
    }

    /**
     * Sets setup_fee
     *
     * @param int $setup_fee Optional one-time setup fee billed with the first invoice or as a separate invoice depending on the setting `setup_fee_handling`.
     *
     * @return $this
     */
    public function setSetupFee($setup_fee)
    {
        $this->container['setup_fee'] = $setup_fee;

        return $this;
    }

    /**
     * Gets setup_fee_text
     *
     * @return string
     */
    public function getSetupFeeText()
    {
        return $this->container['setup_fee_text'];
    }

    /**
     * Sets setup_fee_text
     *
     * @param string $setup_fee_text Optional invoice order text for the setup fee
     *
     * @return $this
     */
    public function setSetupFeeText($setup_fee_text)
    {
        $this->container['setup_fee_text'] = $setup_fee_text;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency for the subscription plan in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) three letter alpha code
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets interval_length
     *
     * @return int
     */
    public function getIntervalLength()
    {
        return $this->container['interval_length'];
    }

    /**
     * Sets interval_length
     *
     * @param int $interval_length The length of intervals. E.g. every second month or every 14 days.
     *
     * @return $this
     */
    public function setIntervalLength($interval_length)
    {
        $this->container['interval_length'] = $interval_length;

        return $this;
    }

    /**
     * Gets schedule_type
     *
     * @return string
     */
    public function getScheduleType()
    {
        return $this->container['schedule_type'];
    }

    /**
     * Sets schedule_type
     *
     * @param string $schedule_type Scheduling type, one of the following: `manual`, `daily`, `weekly_fixedday`, `month_startdate`, `month_fixedday`, `month_lastday`. See documentation for descriptions of the different types.
     *
     * @return $this
     */
    public function setScheduleType($schedule_type)
    {
        $allowedValues = $this->getScheduleTypeAllowableValues();
        if (!in_array($schedule_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'schedule_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule_type'] = $schedule_type;

        return $this;
    }

    /**
     * Gets schedule_fixed_day
     *
     * @return int
     */
    public function getScheduleFixedDay()
    {
        return $this->container['schedule_fixed_day'];
    }

    /**
     * Sets schedule_fixed_day
     *
     * @param int $schedule_fixed_day If a fixed day scheduling type is used a fixed day must be provided. For months the allowed value is 1-28 for weeks it is 1-7
     *
     * @return $this
     */
    public function setScheduleFixedDay($schedule_fixed_day)
    {
        $this->container['schedule_fixed_day'] = $schedule_fixed_day;

        return $this;
    }

    /**
     * Gets base_month
     *
     * @return int
     */
    public function getBaseMonth()
    {
        return $this->container['base_month'];
    }

    /**
     * Sets base_month
     *
     * @param int $base_month For fixed month schedule types the base month can be used to control which months are eligible for start of first billing period. The eligible months are calculated as `base_month + k * interval_length` up to 12. E.g. to use quaterly billing in the months jan-apr-jul-oct, `base_month` 1 and `interval_length` 3 can be used. If not defined the first fixed day will be used as start of first billing period.
     *
     * @return $this
     */
    public function setBaseMonth($base_month)
    {
        $this->container['base_month'] = $base_month;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State of the subscription plan one of the following: `active`, `deleted`
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
