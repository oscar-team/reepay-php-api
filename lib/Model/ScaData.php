<?php
/**
 * ScaData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * ScaData Class Doc Comment
 *
 * @category Class
 * @description Customer data used in strong customer authentication to reduce the need for a lengthy authentication process and ensure less fraud. The data is not stored at Reepay and only used in the process of strong customer authentication. The data is used by card issuer to determine if a frictionless authentication flow can be used.
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScaData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScaData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'email' => 'string',
        'home_phone' => '\Reepay\Model\ScaPhoneNumber',
        'mobile_phone' => '\Reepay\Model\ScaPhoneNumber',
        'work_phone' => '\Reepay\Model\ScaPhoneNumber',
        'billing_address' => '\Reepay\Model\ScaBillingAddress',
        'shipping_address' => '\Reepay\Model\ScaShippingAddress',
        'address_match' => 'bool',
        'account_id' => 'string',
        'challenge_indicator' => 'string',
        'risk_indicator' => '\Reepay\Model\ScaRiskIndicator',
        'account_info' => '\Reepay\Model\ScaAccountInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'email' => null,
        'home_phone' => null,
        'mobile_phone' => null,
        'work_phone' => null,
        'billing_address' => null,
        'shipping_address' => null,
        'address_match' => null,
        'account_id' => null,
        'challenge_indicator' => null,
        'risk_indicator' => null,
        'account_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'email' => 'email',
        'home_phone' => 'home_phone',
        'mobile_phone' => 'mobile_phone',
        'work_phone' => 'work_phone',
        'billing_address' => 'billing_address',
        'shipping_address' => 'shipping_address',
        'address_match' => 'address_match',
        'account_id' => 'account_id',
        'challenge_indicator' => 'challenge_indicator',
        'risk_indicator' => 'risk_indicator',
        'account_info' => 'account_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'email' => 'setEmail',
        'home_phone' => 'setHomePhone',
        'mobile_phone' => 'setMobilePhone',
        'work_phone' => 'setWorkPhone',
        'billing_address' => 'setBillingAddress',
        'shipping_address' => 'setShippingAddress',
        'address_match' => 'setAddressMatch',
        'account_id' => 'setAccountId',
        'challenge_indicator' => 'setChallengeIndicator',
        'risk_indicator' => 'setRiskIndicator',
        'account_info' => 'setAccountInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'email' => 'getEmail',
        'home_phone' => 'getHomePhone',
        'mobile_phone' => 'getMobilePhone',
        'work_phone' => 'getWorkPhone',
        'billing_address' => 'getBillingAddress',
        'shipping_address' => 'getShippingAddress',
        'address_match' => 'getAddressMatch',
        'account_id' => 'getAccountId',
        'challenge_indicator' => 'getChallengeIndicator',
        'risk_indicator' => 'getRiskIndicator',
        'account_info' => 'getAccountInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHALLENGE_INDICATOR_PREFERENCE = 'preference';
    const CHALLENGE_INDICATOR_MANDATE = 'mandate';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChallengeIndicatorAllowableValues()
    {
        return [
            self::CHALLENGE_INDICATOR_PREFERENCE,
            self::CHALLENGE_INDICATOR_MANDATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['home_phone'] = isset($data['home_phone']) ? $data['home_phone'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['work_phone'] = isset($data['work_phone']) ? $data['work_phone'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['address_match'] = isset($data['address_match']) ? $data['address_match'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['challenge_indicator'] = isset($data['challenge_indicator']) ? $data['challenge_indicator'] : null;
        $this->container['risk_indicator'] = isset($data['risk_indicator']) ? $data['risk_indicator'] : null;
        $this->container['account_info'] = isset($data['account_info']) ? $data['account_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChallengeIndicatorAllowableValues();
        if (!is_null($this->container['challenge_indicator']) && !in_array($this->container['challenge_indicator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'challenge_indicator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Cardholder Name. If not provided information will be taken from customer or invoice addresses.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Cardholder Email. If not provided information will be taken from customer or invoice addresses. Must be RFC5322 compliant.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return \Reepay\Model\ScaPhoneNumber
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param \Reepay\Model\ScaPhoneNumber $home_phone home_phone
     *
     * @return $this
     */
    public function setHomePhone($home_phone)
    {
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return \Reepay\Model\ScaPhoneNumber
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param \Reepay\Model\ScaPhoneNumber $mobile_phone mobile_phone
     *
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return \Reepay\Model\ScaPhoneNumber
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param \Reepay\Model\ScaPhoneNumber $work_phone work_phone
     *
     * @return $this
     */
    public function setWorkPhone($work_phone)
    {
        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Reepay\Model\ScaBillingAddress
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Reepay\Model\ScaBillingAddress $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \Reepay\Model\ScaShippingAddress
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \Reepay\Model\ScaShippingAddress $shipping_address shipping_address
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets address_match
     *
     * @return bool
     */
    public function getAddressMatch()
    {
        return $this->container['address_match'];
    }

    /**
     * Sets address_match
     *
     * @param bool $address_match Indicate if Shipping Address and Billing Address are the same
     *
     * @return $this
     */
    public function setAddressMatch($address_match)
    {
        $this->container['address_match'] = $address_match;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id Cardholder Account Identifier. Customer id from own system. If not provided customer handle will be used.
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets challenge_indicator
     *
     * @return string
     */
    public function getChallengeIndicator()
    {
        return $this->container['challenge_indicator'];
    }

    /**
     * Sets challenge_indicator
     *
     * @param string $challenge_indicator Optional argument to control whether the cardholder should be posed with a challenge instead of a potential frictionless authentication flow. This could e.g. be used the first time a new customer makes a purchase to make sure they are strongly authenticated. Two values can be used: `preference` - cardholder should be given a challenge if issuer supports challenges, `mandate` - cardholder must be given a challenge and the authentication should be declined if the issuer does not support challenges.
     *
     * @return $this
     */
    public function setChallengeIndicator($challenge_indicator)
    {
        $allowedValues = $this->getChallengeIndicatorAllowableValues();
        if (!is_null($challenge_indicator) && !in_array($challenge_indicator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'challenge_indicator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['challenge_indicator'] = $challenge_indicator;

        return $this;
    }

    /**
     * Gets risk_indicator
     *
     * @return \Reepay\Model\ScaRiskIndicator
     */
    public function getRiskIndicator()
    {
        return $this->container['risk_indicator'];
    }

    /**
     * Sets risk_indicator
     *
     * @param \Reepay\Model\ScaRiskIndicator $risk_indicator risk_indicator
     *
     * @return $this
     */
    public function setRiskIndicator($risk_indicator)
    {
        $this->container['risk_indicator'] = $risk_indicator;

        return $this;
    }

    /**
     * Gets account_info
     *
     * @return \Reepay\Model\ScaAccountInfo
     */
    public function getAccountInfo()
    {
        return $this->container['account_info'];
    }

    /**
     * Sets account_info
     *
     * @param \Reepay\Model\ScaAccountInfo $account_info account_info
     *
     * @return $this
     */
    public function setAccountInfo($account_info)
    {
        $this->container['account_info'] = $account_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
