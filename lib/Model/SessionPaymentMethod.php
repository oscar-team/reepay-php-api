<?php
/**
 * SessionPaymentMethod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * SessionPaymentMethod Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SessionPaymentMethod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SessionPaymentMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'currencies' => 'string[]',
        'secure_verification' => 'bool',
        'tink_merchant_id' => 'string',
        'offline_payment_type_name' => 'string',
        'offline_payment_type_handle' => 'string',
        'offline_payment_type_description' => 'string',
        'offline_payment_type_instructions' => 'string',
        'offline_payment_type_logo' => 'string',
        'card_type' => 'string',
        'sca_rule' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'currencies' => null,
        'secure_verification' => null,
        'tink_merchant_id' => null,
        'offline_payment_type_name' => null,
        'offline_payment_type_handle' => null,
        'offline_payment_type_description' => null,
        'offline_payment_type_instructions' => null,
        'offline_payment_type_logo' => null,
        'card_type' => null,
        'sca_rule' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'currencies' => 'currencies',
        'secure_verification' => 'secureVerification',
        'tink_merchant_id' => 'tinkMerchantId',
        'offline_payment_type_name' => 'offlinePaymentTypeName',
        'offline_payment_type_handle' => 'offlinePaymentTypeHandle',
        'offline_payment_type_description' => 'offlinePaymentTypeDescription',
        'offline_payment_type_instructions' => 'offlinePaymentTypeInstructions',
        'offline_payment_type_logo' => 'offlinePaymentTypeLogo',
        'card_type' => 'card_type',
        'sca_rule' => 'sca_rule'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'currencies' => 'setCurrencies',
        'secure_verification' => 'setSecureVerification',
        'tink_merchant_id' => 'setTinkMerchantId',
        'offline_payment_type_name' => 'setOfflinePaymentTypeName',
        'offline_payment_type_handle' => 'setOfflinePaymentTypeHandle',
        'offline_payment_type_description' => 'setOfflinePaymentTypeDescription',
        'offline_payment_type_instructions' => 'setOfflinePaymentTypeInstructions',
        'offline_payment_type_logo' => 'setOfflinePaymentTypeLogo',
        'card_type' => 'setCardType',
        'sca_rule' => 'setScaRule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'currencies' => 'getCurrencies',
        'secure_verification' => 'getSecureVerification',
        'tink_merchant_id' => 'getTinkMerchantId',
        'offline_payment_type_name' => 'getOfflinePaymentTypeName',
        'offline_payment_type_handle' => 'getOfflinePaymentTypeHandle',
        'offline_payment_type_description' => 'getOfflinePaymentTypeDescription',
        'offline_payment_type_instructions' => 'getOfflinePaymentTypeInstructions',
        'offline_payment_type_logo' => 'getOfflinePaymentTypeLogo',
        'card_type' => 'getCardType',
        'sca_rule' => 'getScaRule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_CARD = 'CARD';
    const TYPE_ANYDAY = 'ANYDAY';
    const TYPE_APPLEPAY = 'APPLEPAY';
    const TYPE_GOOGLEPAY = 'GOOGLEPAY';
    const TYPE_PAYPAL = 'PAYPAL';
    const TYPE_SWISH = 'SWISH';
    const TYPE_VIABILL = 'VIABILL';
    const TYPE_VIPPS = 'VIPPS';
    const TYPE_VIPPS_RECURRING = 'VIPPS_RECURRING';
    const TYPE_MOBILEPAY = 'MOBILEPAY';
    const TYPE_MOBILEPAY_SUBSCRIPTIONS = 'MOBILEPAY_SUBSCRIPTIONS';
    const TYPE_KLARNA_PAY_NOW = 'KLARNA_PAY_NOW';
    const TYPE_KLARNA_PAY_LATER = 'KLARNA_PAY_LATER';
    const TYPE_KLARNA_SLICE_IT = 'KLARNA_SLICE_IT';
    const TYPE_KLARNA_DIRECT_BANK_TRANSFER = 'KLARNA_DIRECT_BANK_TRANSFER';
    const TYPE_KLARNA_DIRECT_DEBIT = 'KLARNA_DIRECT_DEBIT';
    const TYPE_RESURS = 'RESURS';
    const TYPE_EMV_TOKEN = 'EMV_TOKEN';
    const TYPE_PP_BANCONTACT = 'PP_BANCONTACT';
    const TYPE_PP_BLIK = 'PP_BLIK';
    const TYPE_PP_BLIK_OC = 'PP_BLIK_OC';
    const TYPE_PP_EPS = 'PP_EPS';
    const TYPE_PP_ESTONIA_BANKS = 'PP_ESTONIA_BANKS';
    const TYPE_PP_GIROPAY = 'PP_GIROPAY';
    const TYPE_PP_IDEAL = 'PP_IDEAL';
    const TYPE_PP_LATVIA_BANKS = 'PP_LATVIA_BANKS';
    const TYPE_PP_LITHUANIA_BANKS = 'PP_LITHUANIA_BANKS';
    const TYPE_PP_MB_WAY = 'PP_MB_WAY';
    const TYPE_PP_MULTIBANCO = 'PP_MULTIBANCO';
    const TYPE_PP_MYBANK = 'PP_MYBANK';
    const TYPE_PP_P24 = 'PP_P24';
    const TYPE_PP_PAYCONIQ = 'PP_PAYCONIQ';
    const TYPE_PP_PAYSAFECARD = 'PP_PAYSAFECARD';
    const TYPE_PP_PAYSERA = 'PP_PAYSERA';
    const TYPE_PP_POSTFINANCE = 'PP_POSTFINANCE';
    const TYPE_PP_SATISPAY = 'PP_SATISPAY';
    const TYPE_PP_SEPA = 'PP_SEPA';
    const TYPE_PP_TRUSTLY = 'PP_TRUSTLY';
    const TYPE_PP_VERKKOPANKKI = 'PP_VERKKOPANKKI';
    const TYPE_PP_WECHATPAY = 'PP_WECHATPAY';
    const TYPE_PE_SANTANDER = 'PE_SANTANDER';
    const TYPE_MANUAL = 'MANUAL';
    const TYPE_OFFLINE_BANK_TRANSFER = 'OFFLINE_BANK_TRANSFER';
    const TYPE_OFFLINE_CASH = 'OFFLINE_CASH';
    const TYPE_OFFLINE_OTHER = 'OFFLINE_OTHER';
    const CARD_TYPE_UNKNOWN = 'UNKNOWN';
    const CARD_TYPE_VISA = 'VISA';
    const CARD_TYPE_MC = 'MC';
    const CARD_TYPE_DANKORT = 'DANKORT';
    const CARD_TYPE_VISA_DK = 'VISA_DK';
    const CARD_TYPE_FFK = 'FFK';
    const CARD_TYPE_VISA_ELEC = 'VISA_ELEC';
    const CARD_TYPE_MAESTRO = 'MAESTRO';
    const CARD_TYPE_LASER = 'LASER';
    const CARD_TYPE_AMEX = 'AMEX';
    const CARD_TYPE_DINERS = 'DINERS';
    const CARD_TYPE_DISCOVER = 'DISCOVER';
    const CARD_TYPE_JCB = 'JCB';
    const CARD_TYPE_CHINA_UNION_PAY = 'CHINA_UNION_PAY';
    const SCA_RULE_USE_SCA_IF_AVAILABLE_PREAUTH = 'USE_SCA_IF_AVAILABLE_PREAUTH';
    const SCA_RULE_USE_SCA_IF_AVAILABLE_AUTH = 'USE_SCA_IF_AVAILABLE_AUTH';
    const SCA_RULE_MUST_USE_SCA_PREAUTH = 'MUST_USE_SCA_PREAUTH';
    const SCA_RULE_MUST_USE_SCA_AUTH = 'MUST_USE_SCA_AUTH';
    const SCA_RULE_DO_NOT_USE_SCA = 'DO_NOT_USE_SCA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CARD,
            self::TYPE_ANYDAY,
            self::TYPE_APPLEPAY,
            self::TYPE_GOOGLEPAY,
            self::TYPE_PAYPAL,
            self::TYPE_SWISH,
            self::TYPE_VIABILL,
            self::TYPE_VIPPS,
            self::TYPE_VIPPS_RECURRING,
            self::TYPE_MOBILEPAY,
            self::TYPE_MOBILEPAY_SUBSCRIPTIONS,
            self::TYPE_KLARNA_PAY_NOW,
            self::TYPE_KLARNA_PAY_LATER,
            self::TYPE_KLARNA_SLICE_IT,
            self::TYPE_KLARNA_DIRECT_BANK_TRANSFER,
            self::TYPE_KLARNA_DIRECT_DEBIT,
            self::TYPE_RESURS,
            self::TYPE_EMV_TOKEN,
            self::TYPE_PP_BANCONTACT,
            self::TYPE_PP_BLIK,
            self::TYPE_PP_BLIK_OC,
            self::TYPE_PP_EPS,
            self::TYPE_PP_ESTONIA_BANKS,
            self::TYPE_PP_GIROPAY,
            self::TYPE_PP_IDEAL,
            self::TYPE_PP_LATVIA_BANKS,
            self::TYPE_PP_LITHUANIA_BANKS,
            self::TYPE_PP_MB_WAY,
            self::TYPE_PP_MULTIBANCO,
            self::TYPE_PP_MYBANK,
            self::TYPE_PP_P24,
            self::TYPE_PP_PAYCONIQ,
            self::TYPE_PP_PAYSAFECARD,
            self::TYPE_PP_PAYSERA,
            self::TYPE_PP_POSTFINANCE,
            self::TYPE_PP_SATISPAY,
            self::TYPE_PP_SEPA,
            self::TYPE_PP_TRUSTLY,
            self::TYPE_PP_VERKKOPANKKI,
            self::TYPE_PP_WECHATPAY,
            self::TYPE_PE_SANTANDER,
            self::TYPE_MANUAL,
            self::TYPE_OFFLINE_BANK_TRANSFER,
            self::TYPE_OFFLINE_CASH,
            self::TYPE_OFFLINE_OTHER,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_UNKNOWN,
            self::CARD_TYPE_VISA,
            self::CARD_TYPE_MC,
            self::CARD_TYPE_DANKORT,
            self::CARD_TYPE_VISA_DK,
            self::CARD_TYPE_FFK,
            self::CARD_TYPE_VISA_ELEC,
            self::CARD_TYPE_MAESTRO,
            self::CARD_TYPE_LASER,
            self::CARD_TYPE_AMEX,
            self::CARD_TYPE_DINERS,
            self::CARD_TYPE_DISCOVER,
            self::CARD_TYPE_JCB,
            self::CARD_TYPE_CHINA_UNION_PAY,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScaRuleAllowableValues()
    {
        return [
            self::SCA_RULE_USE_SCA_IF_AVAILABLE_PREAUTH
            self::SCA_RULE_USE_SCA_IF_AVAILABLE_AUTH
            self::SCA_RULE_MUST_USE_SCA_PREAUTH
            self::SCA_RULE_MUST_USE_SCA_AUTH
            self::SCA_RULE_DO_NOT_USE_SCA
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['currencies'] = isset($data['currencies']) ? $data['currencies'] : null;
        $this->container['secure_verification'] = isset($data['secure_verification']) ? $data['secure_verification'] : null;
        $this->container['tink_merchant_id'] = isset($data['tink_merchant_id']) ? $data['tink_merchant_id'] : null;
        $this->container['offline_payment_type_name'] = isset($data['offline_payment_type_name']) ? $data['offline_payment_type_name'] : null;
        $this->container['offline_payment_type_handle'] = isset($data['offline_payment_type_handle']) ? $data['offline_payment_type_handle'] : null;
        $this->container['offline_payment_type_description'] = isset($data['offline_payment_type_description']) ? $data['offline_payment_type_description'] : null;
        $this->container['offline_payment_type_instructions'] = isset($data['offline_payment_type_instructions']) ? $data['offline_payment_type_instructions'] : null;
        $this->container['offline_payment_type_logo'] = isset($data['offline_payment_type_logo']) ? $data['offline_payment_type_logo'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['sca_rule'] = isset($data['sca_rule']) ? $data['sca_rule'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['card_type']) && !in_array($this->container['card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScaRuleAllowableValues();
        if (!is_null($this->container['sca_rule']) && !in_array($this->container['sca_rule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sca_rule', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets currencies
     *
     * @return string[]
     */
    public function getCurrencies()
    {
        return $this->container['currencies'];
    }

    /**
     * Sets currencies
     *
     * @param string[] $currencies currencies
     *
     * @return $this
     */
    public function setCurrencies($currencies)
    {
        $this->container['currencies'] = $currencies;

        return $this;
    }

    /**
     * Gets secure_verification
     *
     * @return bool
     */
    public function getSecureVerification()
    {
        return $this->container['secure_verification'];
    }

    /**
     * Sets secure_verification
     *
     * @param bool $secure_verification secure_verification
     *
     * @return $this
     */
    public function setSecureVerification($secure_verification)
    {
        $this->container['secure_verification'] = $secure_verification;

        return $this;
    }

    /**
     * Gets tink_merchant_id
     *
     * @return string
     */
    public function getTinkMerchantId()
    {
        return $this->container['tink_merchant_id'];
    }

    /**
     * Sets tink_merchant_id
     *
     * @param string $tink_merchant_id tink_merchant_id
     *
     * @return $this
     */
    public function setTinkMerchantId($tink_merchant_id)
    {
        $this->container['tink_merchant_id'] = $tink_merchant_id;

        return $this;
    }

    /**
     * Gets offline_payment_type_name
     *
     * @return string
     */
    public function getOfflinePaymentTypeName()
    {
        return $this->container['offline_payment_type_name'];
    }

    /**
     * Sets offline_payment_type_name
     *
     * @param string $offline_payment_type_name offline_payment_type_name
     *
     * @return $this
     */
    public function setOfflinePaymentTypeName($offline_payment_type_name)
    {
        $this->container['offline_payment_type_name'] = $offline_payment_type_name;

        return $this;
    }

    /**
     * Gets offline_payment_type_handle
     *
     * @return string
     */
    public function getOfflinePaymentTypeHandle()
    {
        return $this->container['offline_payment_type_handle'];
    }

    /**
     * Sets offline_payment_type_handle
     *
     * @param string $offline_payment_type_handle offline_payment_type_handle
     *
     * @return $this
     */
    public function setOfflinePaymentTypeHandle($offline_payment_type_handle)
    {
        $this->container['offline_payment_type_handle'] = $offline_payment_type_handle;

        return $this;
    }

    /**
     * Gets offline_payment_type_description
     *
     * @return string
     */
    public function getOfflinePaymentTypeDescription()
    {
        return $this->container['offline_payment_type_description'];
    }

    /**
     * Sets offline_payment_type_description
     *
     * @param string $offline_payment_type_description offline_payment_type_description
     *
     * @return $this
     */
    public function setOfflinePaymentTypeDescription($offline_payment_type_description)
    {
        $this->container['offline_payment_type_description'] = $offline_payment_type_description;

        return $this;
    }

    /**
     * Gets offline_payment_type_instructions
     *
     * @return string
     */
    public function getOfflinePaymentTypeInstructions()
    {
        return $this->container['offline_payment_type_instructions'];
    }

    /**
     * Sets offline_payment_type_instructions
     *
     * @param string $offline_payment_type_instructions offline_payment_type_instructions
     *
     * @return $this
     */
    public function setOfflinePaymentTypeInstructions($offline_payment_type_instructions)
    {
        $this->container['offline_payment_type_instructions'] = $offline_payment_type_instructions;

        return $this;
    }

    /**
     * Gets offline_payment_type_logo
     *
     * @return string
     */
    public function getOfflinePaymentTypeLogo()
    {
        return $this->container['offline_payment_type_logo'];
    }

    /**
     * Sets offline_payment_type_logo
     *
     * @param string $offline_payment_type_logo offline_payment_type_logo
     *
     * @return $this
     */
    public function setOfflinePaymentTypeLogo($offline_payment_type_logo)
    {
        $this->container['offline_payment_type_logo'] = $offline_payment_type_logo;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type card_type
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($card_type) && !in_array($card_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets sca_rule
     *
     * @return string
     */
    public function getScaRule()
    {
        return $this->container['sca_rule'];
    }

    /**
     * Sets sca_rule
     *
     * @param string $sca_rule sca_rule
     *
     * @return $this
     */
    public function setScaRule($sca_rule)
    {
        $allowedValues = $this->getScaRuleAllowableValues();
        if (!is_null($sca_rule) && !in_array($sca_rule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sca_rule', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sca_rule'] = $sca_rule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
