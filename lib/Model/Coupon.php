<?php
/**
 * Coupon
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * Coupon Class Doc Comment
 *
 * @category Class
 * @description Coupon redeemed
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Coupon implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Coupon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'handle' => 'string',
        'code' => 'string',
        'discount' => 'string',
        'name' => 'string',
        'state' => 'string',
        'type' => 'string',
        'redemptions' => 'int',
        'expired' => '\DateTime',
        'created' => '\DateTime',
        'all_plans' => 'bool',
        'eligible_plans' => 'string[]',
        'max_redemptions' => 'int',
        'valid_until' => '\DateTime',
        'expire_reason' => 'string',
        'redemption_strategy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'handle' => null,
        'code' => null,
        'discount' => null,
        'name' => null,
        'state' => null,
        'type' => null,
        'redemptions' => 'int32',
        'expired' => 'date-time',
        'created' => 'date-time',
        'all_plans' => null,
        'eligible_plans' => null,
        'max_redemptions' => 'int32',
        'valid_until' => 'date-time',
        'expire_reason' => null,
        'redemption_strategy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'handle' => 'handle',
        'code' => 'code',
        'discount' => 'discount',
        'name' => 'name',
        'state' => 'state',
        'type' => 'type',
        'redemptions' => 'redemptions',
        'expired' => 'expired',
        'created' => 'created',
        'all_plans' => 'all_plans',
        'eligible_plans' => 'eligible_plans',
        'max_redemptions' => 'max_redemptions',
        'valid_until' => 'valid_until',
        'expire_reason' => 'expire_reason',
        'redemption_strategy' => 'redemption_strategy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'handle' => 'setHandle',
        'code' => 'setCode',
        'discount' => 'setDiscount',
        'name' => 'setName',
        'state' => 'setState',
        'type' => 'setType',
        'redemptions' => 'setRedemptions',
        'expired' => 'setExpired',
        'created' => 'setCreated',
        'all_plans' => 'setAllPlans',
        'eligible_plans' => 'setEligiblePlans',
        'max_redemptions' => 'setMaxRedemptions',
        'valid_until' => 'setValidUntil',
        'expire_reason' => 'setExpireReason',
        'redemption_strategy' => 'setRedemptionStrategy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'handle' => 'getHandle',
        'code' => 'getCode',
        'discount' => 'getDiscount',
        'name' => 'getName',
        'state' => 'getState',
        'type' => 'getType',
        'redemptions' => 'getRedemptions',
        'expired' => 'getExpired',
        'created' => 'getCreated',
        'all_plans' => 'getAllPlans',
        'eligible_plans' => 'getEligiblePlans',
        'max_redemptions' => 'getMaxRedemptions',
        'valid_until' => 'getValidUntil',
        'expire_reason' => 'getExpireReason',
        'redemption_strategy' => 'getRedemptionStrategy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACTIVE = 'active';
    const STATE_DELETED = 'deleted';
    const STATE_EXPIRED = 'expired';
    const STATE_GENERATING = 'generating';
    const TYPE_SINGLE = 'single';
    const TYPE_SET = 'set';
    const EXPIRE_REASON_EARLY = 'early';
    const EXPIRE_REASON_VALID_UNTIL = 'valid_until';
    const EXPIRE_REASON_MAX = 'max';
    const REDEMPTION_STRATEGY_CUSTOMER = 'once_per_customer';
    const REDEMPTION_STRATEGY_PLAN = 'once_per_plan';
    const REDEMPTION_STRATEGY_SUBSCRIPTION = 'once_per_subscription';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_DELETED,
            self::STATE_EXPIRED,
            self::STATE_GENERATING,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SINGLE,
            self::TYPE_SET,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpireReasonAllowableValues()
    {
        return [
            self::EXPIRE_REASON_EARLY,
            self::EXPIRE_REASON_VALID_UNTIL,
            self::EXPIRE_REASON_MAX,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedemptionStrategyAllowableValues()
    {
        return [
            self::REDEMPTION_STRATEGY_CUSTOMER
            self::REDEMPTION_STRATEGY_PLAN
            self::REDEMPTION_STRATEGY_SUBSCRIPTION
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['handle'] = isset($data['handle']) ? $data['handle'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['redemptions'] = isset($data['redemptions']) ? $data['redemptions'] : null;
        $this->container['expired'] = isset($data['expired']) ? $data['expired'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['all_plans'] = isset($data['all_plans']) ? $data['all_plans'] : null;
        $this->container['eligible_plans'] = isset($data['eligible_plans']) ? $data['eligible_plans'] : null;
        $this->container['max_redemptions'] = isset($data['max_redemptions']) ? $data['max_redemptions'] : null;
        $this->container['valid_until'] = isset($data['valid_until']) ? $data['valid_until'] : null;
        $this->container['expire_reason'] = isset($data['expire_reason']) ? $data['expire_reason'] : null;
        $this->container['redemption_strategy'] = isset($data['redemption_strategy']) ? $data['redemption_strategy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['discount'] === null) {
            $invalidProperties[] = "'discount' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['redemptions'] === null) {
            $invalidProperties[] = "'redemptions' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        $allowedValues = $this->getExpireReasonAllowableValues();
        if (!is_null($this->container['expire_reason']) && !in_array($this->container['expire_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'expire_reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRedemptionStrategyAllowableValues();
        if (!is_null($this->container['redemption_strategy']) && !in_array($this->container['redemption_strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'redemption_strategy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle Per account unique handle for the coupon
     *
     * @return $this
     */
    public function setHandle($handle)
    {
        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The coupon code. Maximum 100 characters.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return string
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param string $discount Discount to use for coupon
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Internal name for the coupon.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Coupon state `active`, `expired`, `deleted` or `generating`
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Coupon type either `single` or `set`
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets redemptions
     *
     * @return int
     */
    public function getRedemptions()
    {
        return $this->container['redemptions'];
    }

    /**
     * Sets redemptions
     *
     * @param int $redemptions Number of times the coupon has been redeemed
     *
     * @return $this
     */
    public function setRedemptions($redemptions)
    {
        $this->container['redemptions'] = $redemptions;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return \DateTime
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param \DateTime $expired Date and time for expire if state expired. In ISO-8601 extended offset date-time format.
     *
     * @return $this
     */
    public function setExpired($expired)
    {
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date when the coupon was created. In ISO-8601 extended offset date-time format.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets all_plans
     *
     * @return bool
     */
    public function getAllPlans()
    {
        return $this->container['all_plans'];
    }

    /**
     * Sets all_plans
     *
     * @param bool $all_plans Whether all plans are eligible for this coupon. Defaults to false.
     *
     * @return $this
     */
    public function setAllPlans($all_plans)
    {
        $this->container['all_plans'] = $all_plans;

        return $this;
    }

    /**
     * Gets eligible_plans
     *
     * @return string[]
     */
    public function getEligiblePlans()
    {
        return $this->container['eligible_plans'];
    }

    /**
     * Sets eligible_plans
     *
     * @param string[] $eligible_plans If not all_plans are set to true, then the set of eligible plan handles must be defined.
     *
     * @return $this
     */
    public function setEligiblePlans($eligible_plans)
    {
        $this->container['eligible_plans'] = $eligible_plans;

        return $this;
    }

    /**
     * Gets max_redemptions
     *
     * @return int
     */
    public function getMaxRedemptions()
    {
        return $this->container['max_redemptions'];
    }

    /**
     * Sets max_redemptions
     *
     * @param int $max_redemptions Optional maximum number of times this coupon can be redeemed.
     *
     * @return $this
     */
    public function setMaxRedemptions($max_redemptions)
    {
        $this->container['max_redemptions'] = $max_redemptions;

        return $this;
    }

    /**
     * Gets valid_until
     *
     * @return \DateTime
     */
    public function getValidUntil()
    {
        return $this->container['valid_until'];
    }

    /**
     * Sets valid_until
     *
     * @param \DateTime $valid_until Optional date and time until which the coupon is redeemable. In ISO-8601 extended offset date-time format.
     *
     * @return $this
     */
    public function setValidUntil($valid_until)
    {
        $this->container['valid_until'] = $valid_until;

        return $this;
    }

    /**
     * Gets expire_reason
     *
     * @return string
     */
    public function getExpireReason()
    {
        return $this->container['expire_reason'];
    }

    /**
     * Sets expire_reason
     *
     * @param string $expire_reason The expire reason if expired. One of `early`, `valid_until` or `max`. Respectively on demand early expire, valid until has passed or max redemptions has been reached.
     *
     * @return $this
     */
    public function setExpireReason($expire_reason)
    {
        $allowedValues = $this->getExpireReasonAllowableValues();
        if (!is_null($expire_reason) && !in_array($expire_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'expire_reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expire_reason'] = $expire_reason;

        return $this;
    }

    /**
     * Gets redemption_strategy
     *
     * @return string
     */
    public function getRedemptionStrategy()
    {
        return $this->container['redemption_strategy'];
    }

    /**
     * Sets redemption_strategy
     *
     * @param string $redemption_strategy This field determines the coupon redemption strategy for applying coupons. It accepts the following values: once_per_customer, once_per_plan, once_per_subscription. If no 'redemption strategy' value is provided, the default strategy of 'once_per_customer' will be applied.
     *
     * @return $this
     */
    public function setRedemptionStrategy($redemption_strategy)
    {
        $allowedValues = $this->getRedemptionStrategyAllowableValues();
        if (!is_null($redemption_strategy) && !in_array($redemption_strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'redemption_strategy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redemption_strategy'] = $redemption_strategy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
