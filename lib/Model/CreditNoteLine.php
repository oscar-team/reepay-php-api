<?php
/**
 * CreditNoteLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * CreditNoteLine Class Doc Comment
 *
 * @category Class
 * @description Credit note lines
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditNoteLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreditNoteLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'int',
        'text' => 'string',
        'quantity' => 'int',
        'vat' => 'float',
        'created' => '\DateTime',
        'order_line_id' => 'string',
        'amount_incl_vat' => 'int',
        'amount_ex_vat' => 'int',
        'unit_amount' => 'int',
        'unit_amount_vat' => 'int',
        'unit_amount_ex_vat' => 'int',
        'amount_incl_vat_defined' => 'bool',
        'period_from' => '\DateTime',
        'period_to' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount' => 'int32',
        'text' => null,
        'quantity' => 'int32',
        'vat' => 'float',
        'created' => 'date-time',
        'order_line_id' => null,
        'amount_incl_vat' => 'int32',
        'amount_ex_vat' => 'int32',
        'unit_amount' => 'int32',
        'unit_amount_vat' => 'int32',
        'unit_amount_ex_vat' => 'int32',
        'amount_incl_vat_defined' => null,
        'period_from' => 'date-time',
        'period_to' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'text' => 'text',
        'quantity' => 'quantity',
        'vat' => 'vat',
        'created' => 'created',
        'order_line_id' => 'order_line_id',
        'amount_incl_vat' => 'amount_incl_vat',
        'amount_ex_vat' => 'amount_ex_vat',
        'unit_amount' => 'unit_amount',
        'unit_amount_vat' => 'unit_amount_vat',
        'unit_amount_ex_vat' => 'unit_amount_ex_vat',
        'amount_incl_vat_defined' => 'amount_incl_vat_defined',
        'period_from' => 'period_from',
        'period_to' => 'period_to'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'text' => 'setText',
        'quantity' => 'setQuantity',
        'vat' => 'setVat',
        'created' => 'setCreated',
        'order_line_id' => 'setOrderLineId',
        'amount_incl_vat' => 'setAmountInclVat',
        'amount_ex_vat' => 'setAmountExVat',
        'unit_amount' => 'setUnitAmount',
        'unit_amount_vat' => 'setUnitAmountVat',
        'unit_amount_ex_vat' => 'setUnitAmountExVat',
        'amount_incl_vat_defined' => 'setAmountInclVatDefined',
        'period_from' => 'setPeriodFrom',
        'period_to' => 'setPeriodTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'text' => 'getText',
        'quantity' => 'getQuantity',
        'vat' => 'getVat',
        'created' => 'getCreated',
        'order_line_id' => 'getOrderLineId',
        'amount_incl_vat' => 'getAmountInclVat',
        'amount_ex_vat' => 'getAmountExVat',
        'unit_amount' => 'getUnitAmount',
        'unit_amount_vat' => 'getUnitAmountVat',
        'unit_amount_ex_vat' => 'getUnitAmountExVat',
        'amount_incl_vat_defined' => 'getAmountInclVatDefined',
        'period_from' => 'getPeriodFrom',
        'period_to' => 'getPeriodTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['order_line_id'] = isset($data['order_line_id']) ? $data['order_line_id'] : null;
        $this->container['amount_incl_vat'] = isset($data['amount_incl_vat']) ? $data['amount_incl_vat'] : null;
        $this->container['amount_ex_vat'] = isset($data['amount_ex_vat']) ? $data['amount_ex_vat'] : null;
        $this->container['unit_amount'] = isset($data['unit_amount']) ? $data['unit_amount'] : null;
        $this->container['unit_amount_vat'] = isset($data['unit_amount_vat']) ? $data['unit_amount_vat'] : null;
        $this->container['unit_amount_ex_vat'] = isset($data['unit_amount_ex_vat']) ? $data['unit_amount_ex_vat'] : null;
        $this->container['amount_incl_vat_defined'] = isset($data['amount_incl_vat_defined']) ? $data['amount_incl_vat_defined'] : null;
        $this->container['period_from'] = isset($data['period_from']) ? $data['period_from'] : null;
        $this->container['period_to'] = isset($data['period_to']) ? $data['period_to'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Credit note line total amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Credit note line text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Credit note line quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float $vat Vat for this credit note line
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Creation date for this credit note line, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets order_line_id
     *
     * @return string
     */
    public function getOrderLineId()
    {
        return $this->container['order_line_id'];
    }

    /**
     * Sets order_line_id
     *
     * @param string $order_line_id Reference to invoice orderline this credit note line relates to
     *
     * @return $this
     */
    public function setOrderLineId($order_line_id)
    {
        $this->container['order_line_id'] = $order_line_id;

        return $this;
    }

    /**
     * Gets amount_incl_vat
     *
     * @return int
     */
    public function getAmountInclVat()
    {
        return $this->container['amount_incl_vat'];
    }

    /**
     * Sets amount_incl_vat
     *
     * @param int $amount_incl_vat Credit note line total amount including VAT
     *
     * @return $this
     */
    public function setAmountInclVat($amount_incl_vat)
    {
        $this->container['amount_incl_vat'] = $amount_incl_vat;

        return $this;
    }

    /**
     * Gets amount_ex_vat
     *
     * @return int
     */
    public function getAmountExVat()
    {
        return $this->container['amount_ex_vat'];
    }

    /**
     * Sets amount_ex_vat
     *
     * @param int $amount_ex_vat Credit note line total amount excluding VAT
     *
     * @return $this
     */
    public function setAmountExVat($amount_ex_vat)
    {
        $this->container['amount_ex_vat'] = $amount_ex_vat;

        return $this;
    }

    /**
     * Gets unit_amount
     *
     * @return int
     */
    public function getUnitAmount()
    {
        return $this->container['unit_amount'];
    }

    /**
     * Sets unit_amount
     *
     * @param int $unit_amount Credit note line unit amount
     *
     * @return $this
     */
    public function setUnitAmount($unit_amount)
    {
        $this->container['unit_amount'] = $unit_amount;

        return $this;
    }

    /**
     * Gets unit_amount_vat
     *
     * @return int
     */
    public function getUnitAmountVat()
    {
        return $this->container['unit_amount_vat'];
    }

    /**
     * Sets unit_amount_vat
     *
     * @param int $unit_amount_vat Credit note line vat amount
     *
     * @return $this
     */
    public function setUnitAmountVat($unit_amount_vat)
    {
        $this->container['unit_amount_vat'] = $unit_amount_vat;

        return $this;
    }

    /**
     * Gets unit_amount_ex_vat
     *
     * @return int
     */
    public function getUnitAmountExVat()
    {
        return $this->container['unit_amount_ex_vat'];
    }

    /**
     * Sets unit_amount_ex_vat
     *
     * @param int $unit_amount_ex_vat Credit note line unit amount excluding VAT
     *
     * @return $this
     */
    public function setUnitAmountExVat($unit_amount_ex_vat)
    {
        $this->container['unit_amount_ex_vat'] = $unit_amount_ex_vat;

        return $this;
    }

    /**
     * Gets amount_incl_vat_defined
     *
     * @return bool
     */
    public function getAmountInclVatDefined()
    {
        return $this->container['amount_incl_vat_defined'];
    }

    /**
     * Sets amount_incl_vat_defined
     *
     * @param bool $amount_incl_vat_defined Whether the total and units are including VAT.
     *
     * @return $this
     */
    public function setAmountInclVatDefined($amount_incl_vat_defined)
    {
        $this->container['amount_incl_vat_defined'] = $amount_incl_vat_defined;

        return $this;
    }

    /**
     * Gets period_from
     *
     * @return \DateTime
     */
    public function getPeriodFrom()
    {
        return $this->container['period_from'];
    }

    /**
     * Sets period_from
     *
     * @param \DateTime $period_from The start of billing period in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setPeriodFrom($period_from)
    {
        $this->container['period_from'] = $period_from;

        return $this;
    }

    /**
     * Gets period_to
     *
     * @return \DateTime
     */
    public function getPeriodTo()
    {
        return $this->container['period_to'];
    }

    /**
     * Sets period_to
     *
     * @param \DateTime $period_to The end of billing period in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.
     *
     * @return $this
     */
    public function setPeriodTo($period_to)
    {
        $this->container['period_to'] = $period_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
