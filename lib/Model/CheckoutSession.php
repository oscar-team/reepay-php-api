<?php
/**
 * CheckoutSession
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * CheckoutSession Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckoutSession implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CheckoutSession';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'type' => 'string',
        'result' => 'string',
        'error_code' => 'int',
        'error_message' => 'string',
        'ppro_error' => '\Reepay\Model\PproError',
        'logo' => 'string',
        'configuration' => 'string',
        'style_config' => '\Reepay\Model\StyleConfig',
        'co_branded_card_selection' => 'bool',
        'co_branded_visa_dankort_preference' => 'string',
        'style_options' => 'map[string,object]',
        'locale' => 'string',
        'cancel_url' => 'string',
        'accept_url' => 'string',
        'cancel_url_scheme' => 'string',
        'accept_url_scheme' => 'string',
        'payment_methods' => '\Reepay\Model\SessionPaymentMethods',
        'payment_type_priority' => 'string[]',
        'subscription_invoice' => '\Reepay\Model\Invoice',
        'account' => '\Reepay\Model\Account',
        'charge' => '\Reepay\Model\Charge',
        'customer' => '\Reepay\Model\Customer',
        'subscription' => '\Reepay\Model\Subscription',
        'plan' => '\Reepay\Model\Plan',
        'add_ons' => '\Reepay\Model\SubscriptionAddOn[]',
        'discounts' => '\Reepay\Model\SubscriptionDiscount[]',
        'recurring' => 'bool',
        'create_intent' => 'string',
        'settle' => 'bool',
        'surcharge' => 'bool',
        'pkey' => 'string',
        'strong_auth' => '\Reepay\Model\StrongAuth',
        'payment_method' => 'string',
        'pgw_url' => 'string',
        'mpo_url' => 'string',
        'mpo_session_token' => 'string',
        'mpo_version' => 'string',
        'mps_id' => 'string',
        'mps_url' => 'string',
        'viabill_url' => 'string',
        'anyday_url' => 'string',
        'anyday_id' => 'string',
        'payever_url' => 'string',
        'payever_id' => 'string',
        'resurs_url' => 'string',
        'vipps_url' => 'string',
        'vipps_recurring_url' => 'string',
        'vipps_recurring_id' => 'string',
        'ppro_url' => 'string',
        'ppro_id' => 'string',
        'applepay_payment_request' => '\Reepay\Model\ApplepayPaymentRequestDto',
        'googlepay_payment_request' => '\Reepay\Model\GooglepayPaymentRequestDto',
        'paypal_client_id' => 'string',
        'paypal_payment_request' => 'map[string,object]',
        'paypal_auth_url' => 'string',
        'klarna_client_token' => 'string',
        'swish_mobile_token' => 'string',
        'swish_id' => 'string',
        'button_text' => 'string',
        'show_subscription_details' => 'bool',
        'show_terms' => 'bool',
        'card_on_file' => '\Reepay\Model\CardOnFile',
        'order_text' => 'string',
        'recurring_optional' => 'bool',
        'recurring_optional_text' => 'string',
        'recurring_average_amount' => 'int',
        'partner' => 'string',
        'expire_duration' => 'int',
        'mandate_id' => 'string',
        'view_mandate_url' => 'string',
        'show_test_hints' => 'bool',
        'verification' => '\Reepay\Model\Verification',
        'agreement_filter' => 'string[]',
        'show_subscription_details_expanded' => 'bool',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'type' => null,
        'result' => null,
        'error_code' => 'int32',
        'error_message' => null,
        'ppro_error' => null,
        'logo' => null,
        'configuration' => null,
        'style_config' => null,
        'co_branded_card_selection' => null,
        'co_branded_visa_dankort_preference' => null,
        'style_options' => null,
        'locale' => null,
        'cancel_url' => null,
        'accept_url' => null,
        'cancel_url_scheme' => null,
        'accept_url_scheme' => null,
        'payment_methods' => null,
        'payment_type_priority' => null,
        'subscription_invoice' => null,
        'account' => null,
        'charge' => null,
        'customer' => null,
        'subscription' => null,
        'plan' => null,
        'add_ons' => null,
        'discounts' => null,
        'recurring' => null,
        'create_intent' => null,
        'settle' => null,
        'surcharge' => null,
        'pkey' => null,
        'strong_auth' => null,
        'payment_method' => null,
        'pgw_url' => null,
        'mpo_url' => null,
        'mpo_session_token' => null,
        'mpo_version' => null,
        'mps_id' => null,
        'mps_url' => null,
        'viabill_url' => null,
        'anyday_url' => null,
        'anyday_id' => null,
        'payever_url' => null,
        'payever_id' => null,
        'resurs_url' => null,
        'vipps_url' => null,
        'vipps_recurring_url' => null,
        'vipps_recurring_id' => null,
        'ppro_url' => null,
        'ppro_id' => null,
        'applepay_payment_request' => null,
        'googlepay_payment_request' => null,
        'paypal_client_id' => null,
        'paypal_payment_request' => null,
        'paypal_auth_url' => null,
        'klarna_client_token' => null,
        'swish_mobile_token' => null,
        'swish_id' => null,
        'button_text' => null,
        'show_subscription_details' => null,
        'show_terms' => null,
        'card_on_file' => null,
        'order_text' => null,
        'recurring_optional' => null,
        'recurring_optional_text' => null,
        'recurring_average_amount' => 'int64',
        'partner' => null,
        'expire_duration' => 'int64',
        'mandate_id' => null,
        'view_mandate_url' => null,
        'show_test_hints' => null,
        'verification' => null,
        'agreement_filter' => null,
        'show_subscription_details_expanded' => null,
        'currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'result' => 'result',
        'error_code' => 'errorCode',
        'error_message' => 'errorMessage',
        'ppro_error' => 'pproError',
        'logo' => 'logo',
        'configuration' => 'configuration',
        'style_config' => 'styleConfig',
        'co_branded_card_selection' => 'coBrandedCardSelection',
        'co_branded_visa_dankort_preference' => 'coBrandedVisaDankortPreference',
        'style_options' => 'styleOptions',
        'locale' => 'locale',
        'cancel_url' => 'cancelUrl',
        'accept_url' => 'acceptUrl',
        'cancel_url_scheme' => 'cancelUrlScheme',
        'accept_url_scheme' => 'acceptUrlScheme',
        'payment_methods' => 'paymentMethods',
        'payment_type_priority' => 'paymentTypePriority',
        'subscription_invoice' => 'subscriptionInvoice',
        'account' => 'account',
        'charge' => 'charge',
        'customer' => 'customer',
        'subscription' => 'subscription',
        'plan' => 'plan',
        'add_ons' => 'addOns',
        'discounts' => 'discounts',
        'recurring' => 'recurring',
        'create_intent' => 'createIntent',
        'settle' => 'settle',
        'surcharge' => 'surcharge',
        'pkey' => 'pkey',
        'strong_auth' => 'strongAuth',
        'payment_method' => 'paymentMethod',
        'pgw_url' => 'pgwUrl',
        'mpo_url' => 'mpoUrl',
        'mpo_session_token' => 'mpoSessionToken',
        'mpo_version' => 'mpoVersion',
        'mps_id' => 'mpsId',
        'mps_url' => 'mpsUrl',
        'viabill_url' => 'viabillUrl',
        'anyday_url' => 'anydayUrl',
        'anyday_id' => 'anydayId',
        'payever_url' => 'payeverUrl',
        'payever_id' => 'payeverId',
        'resurs_url' => 'resursUrl',
        'vipps_url' => 'vippsUrl',
        'vipps_recurring_url' => 'vippsRecurringUrl',
        'vipps_recurring_id' => 'vippsRecurringId',
        'ppro_url' => 'pproUrl',
        'ppro_id' => 'pproId',
        'applepay_payment_request' => 'applepayPaymentRequest',
        'googlepay_payment_request' => 'googlepayPaymentRequest',
        'paypal_client_id' => 'paypalClientId',
        'paypal_payment_request' => 'paypalPaymentRequest',
        'paypal_auth_url' => 'paypalAuthUrl',
        'klarna_client_token' => 'klarnaClientToken',
        'swish_mobile_token' => 'swishMobileToken',
        'swish_id' => 'swishId',
        'button_text' => 'buttonText',
        'show_subscription_details' => 'showSubscriptionDetails',
        'show_terms' => 'showTerms',
        'card_on_file' => 'cardOnFile',
        'order_text' => 'orderText',
        'recurring_optional' => 'recurringOptional',
        'recurring_optional_text' => 'recurringOptionalText',
        'recurring_average_amount' => 'recurringAverageAmount',
        'partner' => 'partner',
        'expire_duration' => 'expireDuration',
        'mandate_id' => 'mandateId',
        'view_mandate_url' => 'viewMandateUrl',
        'show_test_hints' => 'showTestHints',
        'verification' => 'verification',
        'agreement_filter' => 'agreementFilter',
        'show_subscription_details_expanded' => 'showSubscriptionDetailsExpanded',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'result' => 'setResult',
        'error_code' => 'setErrorCode',
        'error_message' => 'setErrorMessage',
        'ppro_error' => 'setPproError',
        'logo' => 'setLogo',
        'configuration' => 'setConfiguration',
        'style_config' => 'setStyleConfig',
        'co_branded_card_selection' => 'setCoBrandedCardSelection',
        'co_branded_visa_dankort_preference' => 'setCoBrandedVisaDankortPreference',
        'style_options' => 'setStyleOptions',
        'locale' => 'setLocale',
        'cancel_url' => 'setCancelUrl',
        'accept_url' => 'setAcceptUrl',
        'cancel_url_scheme' => 'setCancelUrlScheme',
        'accept_url_scheme' => 'setAcceptUrlScheme',
        'payment_methods' => 'setPaymentMethods',
        'payment_type_priority' => 'setPaymentTypePriority',
        'subscription_invoice' => 'setSubscriptionInvoice',
        'account' => 'setAccount',
        'charge' => 'setCharge',
        'customer' => 'setCustomer',
        'subscription' => 'setSubscription',
        'plan' => 'setPlan',
        'add_ons' => 'setAddOns',
        'discounts' => 'setDiscounts',
        'recurring' => 'setRecurring',
        'create_intent' => 'setCreateIntent',
        'settle' => 'setSettle',
        'surcharge' => 'setSurcharge',
        'pkey' => 'setPkey',
        'strong_auth' => 'setStrongAuth',
        'payment_method' => 'setPaymentMethod',
        'pgw_url' => 'setPgwUrl',
        'mpo_url' => 'setMpoUrl',
        'mpo_session_token' => 'setMpoSessionToken',
        'mpo_version' => 'setMpoVersion',
        'mps_id' => 'setMpsId',
        'mps_url' => 'setMpsUrl',
        'viabill_url' => 'setViabillUrl',
        'anyday_url' => 'setAnydayUrl',
        'anyday_id' => 'setAnydayId',
        'payever_url' => 'setPayeverUrl',
        'payever_id' => 'setPayeverId',
        'resurs_url' => 'setResursUrl',
        'vipps_url' => 'setVippsUrl',
        'vipps_recurring_url' => 'setVippsRecurringUrl',
        'vipps_recurring_id' => 'setVippsRecurringId',
        'ppro_url' => 'setPproUrl',
        'ppro_id' => 'setPproId',
        'applepay_payment_request' => 'setApplepayPaymentRequest',
        'googlepay_payment_request' => 'setGooglepayPaymentRequest',
        'paypal_client_id' => 'setPaypalClientId',
        'paypal_payment_request' => 'setPaypalPaymentRequest',
        'paypal_auth_url' => 'setPaypalAuthUrl',
        'klarna_client_token' => 'setKlarnaClientToken',
        'swish_mobile_token' => 'setSwishMobileToken',
        'swish_id' => 'setSwishId',
        'button_text' => 'setButtonText',
        'show_subscription_details' => 'setShowSubscriptionDetails',
        'show_terms' => 'setShowTerms',
        'card_on_file' => 'setCardOnFile',
        'order_text' => 'setOrderText',
        'recurring_optional' => 'setRecurringOptional',
        'recurring_optional_text' => 'setRecurringOptionalText',
        'recurring_average_amount' => 'setRecurringAverageAmount',
        'partner' => 'setPartner',
        'expire_duration' => 'setExpireDuration',
        'mandate_id' => 'setMandateId',
        'view_mandate_url' => 'setViewMandateUrl',
        'show_test_hints' => 'setShowTestHints',
        'verification' => 'setVerification',
        'agreement_filter' => 'setAgreementFilter',
        'show_subscription_details_expanded' => 'setShowSubscriptionDetailsExpanded',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'result' => 'getResult',
        'error_code' => 'getErrorCode',
        'error_message' => 'getErrorMessage',
        'ppro_error' => 'getPproError',
        'logo' => 'getLogo',
        'configuration' => 'getConfiguration',
        'style_config' => 'getStyleConfig',
        'co_branded_card_selection' => 'getCoBrandedCardSelection',
        'co_branded_visa_dankort_preference' => 'getCoBrandedVisaDankortPreference',
        'style_options' => 'getStyleOptions',
        'locale' => 'getLocale',
        'cancel_url' => 'getCancelUrl',
        'accept_url' => 'getAcceptUrl',
        'cancel_url_scheme' => 'getCancelUrlScheme',
        'accept_url_scheme' => 'getAcceptUrlScheme',
        'payment_methods' => 'getPaymentMethods',
        'payment_type_priority' => 'getPaymentTypePriority',
        'subscription_invoice' => 'getSubscriptionInvoice',
        'account' => 'getAccount',
        'charge' => 'getCharge',
        'customer' => 'getCustomer',
        'subscription' => 'getSubscription',
        'plan' => 'getPlan',
        'add_ons' => 'getAddOns',
        'discounts' => 'getDiscounts',
        'recurring' => 'getRecurring',
        'create_intent' => 'getCreateIntent',
        'settle' => 'getSettle',
        'surcharge' => 'getSurcharge',
        'pkey' => 'getPkey',
        'strong_auth' => 'getStrongAuth',
        'payment_method' => 'getPaymentMethod',
        'pgw_url' => 'getPgwUrl',
        'mpo_url' => 'getMpoUrl',
        'mpo_session_token' => 'getMpoSessionToken',
        'mpo_version' => 'getMpoVersion',
        'mps_id' => 'getMpsId',
        'mps_url' => 'getMpsUrl',
        'viabill_url' => 'getViabillUrl',
        'anyday_url' => 'getAnydayUrl',
        'anyday_id' => 'getAnydayId',
        'payever_url' => 'getPayeverUrl',
        'payever_id' => 'getPayeverId',
        'resurs_url' => 'getResursUrl',
        'vipps_url' => 'getVippsUrl',
        'vipps_recurring_url' => 'getVippsRecurringUrl',
        'vipps_recurring_id' => 'getVippsRecurringId',
        'ppro_url' => 'getPproUrl',
        'ppro_id' => 'getPproId',
        'applepay_payment_request' => 'getApplepayPaymentRequest',
        'googlepay_payment_request' => 'getGooglepayPaymentRequest',
        'paypal_client_id' => 'getPaypalClientId',
        'paypal_payment_request' => 'getPaypalPaymentRequest',
        'paypal_auth_url' => 'getPaypalAuthUrl',
        'klarna_client_token' => 'getKlarnaClientToken',
        'swish_mobile_token' => 'getSwishMobileToken',
        'swish_id' => 'getSwishId',
        'button_text' => 'getButtonText',
        'show_subscription_details' => 'getShowSubscriptionDetails',
        'show_terms' => 'getShowTerms',
        'card_on_file' => 'getCardOnFile',
        'order_text' => 'getOrderText',
        'recurring_optional' => 'getRecurringOptional',
        'recurring_optional_text' => 'getRecurringOptionalText',
        'recurring_average_amount' => 'getRecurringAverageAmount',
        'partner' => 'getPartner',
        'expire_duration' => 'getExpireDuration',
        'mandate_id' => 'getMandateId',
        'view_mandate_url' => 'getViewMandateUrl',
        'show_test_hints' => 'getShowTestHints',
        'verification' => 'getVerification',
        'agreement_filter' => 'getAgreementFilter',
        'show_subscription_details_expanded' => 'getShowSubscriptionDetailsExpanded',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_CHARGE = 'CHARGE';
    const TYPE_RECURRING = 'RECURRING';
    const TYPE_SUBSCRIPTION = 'SUBSCRIPTION';
    const RESULT_SUCCESS = 'SUCCESS';
    const RESULT_SESSION_DELETED = 'SESSION_DELETED';
    const RESULT_SESSION_EXPIRED = 'SESSION_EXPIRED';
    const RESULT_CHARGE_FAILURE = 'CHARGE_FAILURE';
    const RESULT_CHARGE_CARD_TOKEN_EXPIRED = 'CHARGE_CARD_TOKEN_EXPIRED';
    const RESULT_NO_PAYMENT_METHODS = 'NO_PAYMENT_METHODS';
    const RESULT_REEPAY_ERROR = 'REEPAY_ERROR';
    const RESULT_CAPACITY_ERROR = 'CAPACITY_ERROR';
    const RESULT_INTERNAL_ERROR = 'INTERNAL_ERROR';
    const RESULT_INVOICE_ALREADY_PAID = 'INVOICE_ALREADY_PAID';
    const RESULT_INVOICE_CANCELLED = 'INVOICE_CANCELLED';
    const RESULT_INVOICE_PROCESSING = 'INVOICE_PROCESSING';
    const RESULT_PAYMENT_METHOD_ALREADY_ADDED = 'PAYMENT_METHOD_ALREADY_ADDED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CHARGE,
            self::TYPE_RECURRING,
            self::TYPE_SUBSCRIPTION,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_SUCCESS,
            self::RESULT_SESSION_DELETED,
            self::RESULT_SESSION_EXPIRED,
            self::RESULT_CHARGE_FAILURE,
            self::RESULT_CHARGE_CARD_TOKEN_EXPIRED,
            self::RESULT_NO_PAYMENT_METHODS,
            self::RESULT_REEPAY_ERROR,
            self::RESULT_CAPACITY_ERROR,
            self::RESULT_INTERNAL_ERROR,
            self::RESULT_INVOICE_ALREADY_PAID,
            self::RESULT_INVOICE_CANCELLED,
            self::RESULT_INVOICE_PROCESSING,
            self::RESULT_PAYMENT_METHOD_ALREADY_ADDED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['ppro_error'] = isset($data['ppro_error']) ? $data['ppro_error'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['style_config'] = isset($data['style_config']) ? $data['style_config'] : null;
        $this->container['co_branded_card_selection'] = isset($data['co_branded_card_selection']) ? $data['co_branded_card_selection'] : null;
        $this->container['co_branded_visa_dankort_preference'] = isset($data['co_branded_visa_dankort_preference']) ? $data['co_branded_visa_dankort_preference'] : null;
        $this->container['style_options'] = isset($data['style_options']) ? $data['style_options'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['cancel_url'] = isset($data['cancel_url']) ? $data['cancel_url'] : null;
        $this->container['accept_url'] = isset($data['accept_url']) ? $data['accept_url'] : null;
        $this->container['cancel_url_scheme'] = isset($data['cancel_url_scheme']) ? $data['cancel_url_scheme'] : null;
        $this->container['accept_url_scheme'] = isset($data['accept_url_scheme']) ? $data['accept_url_scheme'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['payment_type_priority'] = isset($data['payment_type_priority']) ? $data['payment_type_priority'] : null;
        $this->container['subscription_invoice'] = isset($data['subscription_invoice']) ? $data['subscription_invoice'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['charge'] = isset($data['charge']) ? $data['charge'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
        $this->container['add_ons'] = isset($data['add_ons']) ? $data['add_ons'] : null;
        $this->container['discounts'] = isset($data['discounts']) ? $data['discounts'] : null;
        $this->container['recurring'] = isset($data['recurring']) ? $data['recurring'] : null;
        $this->container['create_intent'] = isset($data['create_intent']) ? $data['create_intent'] : null;
        $this->container['settle'] = isset($data['settle']) ? $data['settle'] : null;
        $this->container['surcharge'] = isset($data['surcharge']) ? $data['surcharge'] : null;
        $this->container['pkey'] = isset($data['pkey']) ? $data['pkey'] : null;
        $this->container['strong_auth'] = isset($data['strong_auth']) ? $data['strong_auth'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['pgw_url'] = isset($data['pgw_url']) ? $data['pgw_url'] : null;
        $this->container['mpo_url'] = isset($data['mpo_url']) ? $data['mpo_url'] : null;
        $this->container['mpo_session_token'] = isset($data['mpo_session_token']) ? $data['mpo_session_token'] : null;
        $this->container['mpo_version'] = isset($data['mpo_version']) ? $data['mpo_version'] : null;
        $this->container['mps_id'] = isset($data['mps_id']) ? $data['mps_id'] : null;
        $this->container['mps_url'] = isset($data['mps_url']) ? $data['mps_url'] : null;
        $this->container['viabill_url'] = isset($data['viabill_url']) ? $data['viabill_url'] : null;
        $this->container['anyday_url'] = isset($data['anyday_url']) ? $data['anyday_url'] : null;
        $this->container['anyday_id'] = isset($data['anyday_id']) ? $data['anyday_id'] : null;
        $this->container['payever_url'] = isset($data['payever_url']) ? $data['payever_url'] : null;
        $this->container['payever_id'] = isset($data['payever_id']) ? $data['payever_id'] : null;
        $this->container['resurs_url'] = isset($data['resurs_url']) ? $data['resurs_url'] : null;
        $this->container['vipps_url'] = isset($data['vipps_url']) ? $data['vipps_url'] : null;
        $this->container['vipps_recurring_url'] = isset($data['vipps_recurring_url']) ? $data['vipps_recurring_url'] : null;
        $this->container['vipps_recurring_id'] = isset($data['vipps_recurring_id']) ? $data['vipps_recurring_id'] : null;
        $this->container['ppro_url'] = isset($data['ppro_url']) ? $data['ppro_url'] : null;
        $this->container['ppro_id'] = isset($data['ppro_id']) ? $data['ppro_id'] : null;
        $this->container['applepay_payment_request'] = isset($data['applepay_payment_request']) ? $data['applepay_payment_request'] : null;
        $this->container['googlepay_payment_request'] = isset($data['googlepay_payment_request']) ? $data['googlepay_payment_request'] : null;
        $this->container['paypal_client_id'] = isset($data['paypal_client_id']) ? $data['paypal_client_id'] : null;
        $this->container['paypal_payment_request'] = isset($data['paypal_payment_request']) ? $data['paypal_payment_request'] : null;
        $this->container['paypal_auth_url'] = isset($data['paypal_auth_url']) ? $data['paypal_auth_url'] : null;
        $this->container['klarna_client_token'] = isset($data['klarna_client_token']) ? $data['klarna_client_token'] : null;
        $this->container['swish_mobile_token'] = isset($data['swish_mobile_token']) ? $data['swish_mobile_token'] : null;
        $this->container['swish_id'] = isset($data['swish_id']) ? $data['swish_id'] : null;
        $this->container['button_text'] = isset($data['button_text']) ? $data['button_text'] : null;
        $this->container['show_subscription_details'] = isset($data['show_subscription_details']) ? $data['show_subscription_details'] : null;
        $this->container['show_terms'] = isset($data['show_terms']) ? $data['show_terms'] : null;
        $this->container['card_on_file'] = isset($data['card_on_file']) ? $data['card_on_file'] : null;
        $this->container['order_text'] = isset($data['order_text']) ? $data['order_text'] : null;
        $this->container['recurring_optional'] = isset($data['recurring_optional']) ? $data['recurring_optional'] : null;
        $this->container['recurring_optional_text'] = isset($data['recurring_optional_text']) ? $data['recurring_optional_text'] : null;
        $this->container['recurring_average_amount'] = isset($data['recurring_average_amount']) ? $data['recurring_average_amount'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['expire_duration'] = isset($data['expire_duration']) ? $data['expire_duration'] : null;
        $this->container['mandate_id'] = isset($data['mandate_id']) ? $data['mandate_id'] : null;
        $this->container['view_mandate_url'] = isset($data['view_mandate_url']) ? $data['view_mandate_url'] : null;
        $this->container['show_test_hints'] = isset($data['show_test_hints']) ? $data['show_test_hints'] : null;
        $this->container['verification'] = isset($data['verification']) ? $data['verification'] : null;
        $this->container['agreement_filter'] = isset($data['agreement_filter']) ? $data['agreement_filter'] : null;
        $this->container['show_subscription_details_expanded'] = isset($data['show_subscription_details_expanded']) ? $data['show_subscription_details_expanded'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($this->container['result']) && !in_array($this->container['result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'result', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['locale'] === null) {
            $invalidProperties[] = "'locale' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Session id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Session type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($result) && !in_array($result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'result', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return int
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param int $error_code error_code
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string $error_message error_message
     *
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets ppro_error
     *
     * @return \Reepay\Model\PproError
     */
    public function getPproError()
    {
        return $this->container['ppro_error'];
    }

    /**
     * Sets ppro_error
     *
     * @param \Reepay\Model\PproError $ppro_error ppro_error
     *
     * @return $this
     */
    public function setPproError($ppro_error)
    {
        $this->container['ppro_error'] = $ppro_error;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return string
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param string $configuration configuration
     *
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets style_config
     *
     * @return \Reepay\Model\StyleConfig
     */
    public function getStyleConfig()
    {
        return $this->container['style_config'];
    }

    /**
     * Sets style_config
     *
     * @param \Reepay\Model\StyleConfig $style_config style_config
     *
     * @return $this
     */
    public function setStyleConfig($style_config)
    {
        $this->container['style_config'] = $style_config;

        return $this;
    }

    /**
     * Gets co_branded_card_selection
     *
     * @return bool
     */
    public function getCoBrandedCardSelection()
    {
        return $this->container['co_branded_card_selection'];
    }

    /**
     * Sets co_branded_card_selection
     *
     * @param bool $co_branded_card_selection co_branded_card_selection
     *
     * @return $this
     */
    public function setCoBrandedCardSelection($co_branded_card_selection)
    {
        $this->container['co_branded_card_selection'] = $co_branded_card_selection;

        return $this;
    }

    /**
     * Gets co_branded_visa_dankort_preference
     *
     * @return string
     */
    public function getCoBrandedVisaDankortPreference()
    {
        return $this->container['co_branded_visa_dankort_preference'];
    }

    /**
     * Sets co_branded_visa_dankort_preference
     *
     * @param string $co_branded_visa_dankort_preference co_branded_visa_dankort_preference
     *
     * @return $this
     */
    public function setCoBrandedVisaDankortPreference($co_branded_visa_dankort_preference)
    {
        $this->container['co_branded_visa_dankort_preference'] = $co_branded_visa_dankort_preference;

        return $this;
    }

    /**
     * Gets style_options
     *
     * @return map[string,object]
     */
    public function getStyleOptions()
    {
        return $this->container['style_options'];
    }

    /**
     * Sets style_options
     *
     * @param map[string,object] $style_options style_options
     *
     * @return $this
     */
    public function setStyleOptions($style_options)
    {
        $this->container['style_options'] = $style_options;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale Session locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets cancel_url
     *
     * @return string
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     *
     * @param string $cancel_url cancel_url
     *
     * @return $this
     */
    public function setCancelUrl($cancel_url)
    {
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets accept_url
     *
     * @return string
     */
    public function getAcceptUrl()
    {
        return $this->container['accept_url'];
    }

    /**
     * Sets accept_url
     *
     * @param string $accept_url accept_url
     *
     * @return $this
     */
    public function setAcceptUrl($accept_url)
    {
        $this->container['accept_url'] = $accept_url;

        return $this;
    }

    /**
     * Gets cancel_url_scheme
     *
     * @return string
     */
    public function getCancelUrlScheme()
    {
        return $this->container['cancel_url_scheme'];
    }

    /**
     * Sets cancel_url_scheme
     *
     * @param string $cancel_url_scheme cancel_url_scheme
     *
     * @return $this
     */
    public function setCancelUrlScheme($cancel_url_scheme)
    {
        $this->container['cancel_url_scheme'] = $cancel_url_scheme;

        return $this;
    }

    /**
     * Gets accept_url_scheme
     *
     * @return string
     */
    public function getAcceptUrlScheme()
    {
        return $this->container['accept_url_scheme'];
    }

    /**
     * Sets accept_url_scheme
     *
     * @param string $accept_url_scheme accept_url_scheme
     *
     * @return $this
     */
    public function setAcceptUrlScheme($accept_url_scheme)
    {
        $this->container['accept_url_scheme'] = $accept_url_scheme;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return \Reepay\Model\SessionPaymentMethods
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param \Reepay\Model\SessionPaymentMethods $payment_methods payment_methods
     *
     * @return $this
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets payment_type_priority
     *
     * @return string[]
     */
    public function getPaymentTypePriority()
    {
        return $this->container['payment_type_priority'];
    }

    /**
     * Sets payment_type_priority
     *
     * @param string[] $payment_type_priority payment_type_priority
     *
     * @return $this
     */
    public function setPaymentTypePriority($payment_type_priority)
    {
        $this->container['payment_type_priority'] = $payment_type_priority;

        return $this;
    }

    /**
     * Gets subscription_invoice
     *
     * @return \Reepay\Model\Invoice
     */
    public function getSubscriptionInvoice()
    {
        return $this->container['subscription_invoice'];
    }

    /**
     * Sets subscription_invoice
     *
     * @param \Reepay\Model\Invoice $subscription_invoice subscription_invoice
     *
     * @return $this
     */
    public function setSubscriptionInvoice($subscription_invoice)
    {
        $this->container['subscription_invoice'] = $subscription_invoice;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Reepay\Model\Account
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Reepay\Model\Account $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets charge
     *
     * @return \Reepay\Model\Charge
     */
    public function getCharge()
    {
        return $this->container['charge'];
    }

    /**
     * Sets charge
     *
     * @param \Reepay\Model\Charge $charge charge
     *
     * @return $this
     */
    public function setCharge($charge)
    {
        $this->container['charge'] = $charge;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Reepay\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Reepay\Model\Customer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return \Reepay\Model\Subscription
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param \Reepay\Model\Subscription $subscription subscription
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return \Reepay\Model\Plan
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param \Reepay\Model\Plan $plan plan
     *
     * @return $this
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets add_ons
     *
     * @return \Reepay\Model\SubscriptionAddOn[]
     */
    public function getAddOns()
    {
        return $this->container['add_ons'];
    }

    /**
     * Sets add_ons
     *
     * @param \Reepay\Model\SubscriptionAddOn[] $add_ons add_ons
     *
     * @return $this
     */
    public function setAddOns($add_ons)
    {
        $this->container['add_ons'] = $add_ons;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \Reepay\Model\SubscriptionDiscount[]
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \Reepay\Model\SubscriptionDiscount[] $discounts discounts
     *
     * @return $this
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return bool
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param bool $recurring recurring
     *
     * @return $this
     */
    public function setRecurring($recurring)
    {
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets create_intent
     *
     * @return string
     */
    public function getCreateIntent()
    {
        return $this->container['create_intent'];
    }

    /**
     * Sets create_intent
     *
     * @param string $create_intent create_intent
     *
     * @return $this
     */
    public function setCreateIntent($create_intent)
    {
        $this->container['create_intent'] = $create_intent;

        return $this;
    }

    /**
     * Gets settle
     *
     * @return bool
     */
    public function getSettle()
    {
        return $this->container['settle'];
    }

    /**
     * Sets settle
     *
     * @param bool $settle settle
     *
     * @return $this
     */
    public function setSettle($settle)
    {
        $this->container['settle'] = $settle;

        return $this;
    }

    /**
     * Gets surcharge
     *
     * @return bool
     */
    public function getSurcharge()
    {
        return $this->container['surcharge'];
    }

    /**
     * Sets surcharge
     *
     * @param bool $surcharge surcharge
     *
     * @return $this
     */
    public function setSurcharge($surcharge)
    {
        $this->container['surcharge'] = $surcharge;

        return $this;
    }

    /**
     * Gets pkey
     *
     * @return string
     */
    public function getPkey()
    {
        return $this->container['pkey'];
    }

    /**
     * Sets pkey
     *
     * @param string $pkey pkey
     *
     * @return $this
     */
    public function setPkey($pkey)
    {
        $this->container['pkey'] = $pkey;

        return $this;
    }

    /**
     * Gets strong_auth
     *
     * @return \Reepay\Model\StrongAuth
     */
    public function getStrongAuth()
    {
        return $this->container['strong_auth'];
    }

    /**
     * Sets strong_auth
     *
     * @param \Reepay\Model\StrongAuth $strong_auth strong_auth
     *
     * @return $this
     */
    public function setStrongAuth($strong_auth)
    {
        $this->container['strong_auth'] = $strong_auth;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets pgw_url
     *
     * @return string
     */
    public function getPgwUrl()
    {
        return $this->container['pgw_url'];
    }

    /**
     * Sets pgw_url
     *
     * @param string $pgw_url pgw_url
     *
     * @return $this
     */
    public function setPgwUrl($pgw_url)
    {
        $this->container['pgw_url'] = $pgw_url;

        return $this;
    }

    /**
     * Gets mpo_url
     *
     * @return string
     */
    public function getMpoUrl()
    {
        return $this->container['mpo_url'];
    }

    /**
     * Sets mpo_url
     *
     * @param string $mpo_url mpo_url
     *
     * @return $this
     */
    public function setMpoUrl($mpo_url)
    {
        $this->container['mpo_url'] = $mpo_url;

        return $this;
    }

    /**
     * Gets mpo_session_token
     *
     * @return string
     */
    public function getMpoSessionToken()
    {
        return $this->container['mpo_session_token'];
    }

    /**
     * Sets mpo_session_token
     *
     * @param string $mpo_session_token mpo_session_token
     *
     * @return $this
     */
    public function setMpoSessionToken($mpo_session_token)
    {
        $this->container['mpo_session_token'] = $mpo_session_token;

        return $this;
    }

    /**
     * Gets mpo_version
     *
     * @return string
     */
    public function getMpoVersion()
    {
        return $this->container['mpo_version'];
    }

    /**
     * Sets mpo_version
     *
     * @param string $mpo_version mpo_version
     *
     * @return $this
     */
    public function setMpoVersion($mpo_version)
    {
        $this->container['mpo_version'] = $mpo_version;

        return $this;
    }

    /**
     * Gets mps_id
     *
     * @return string
     */
    public function getMpsId()
    {
        return $this->container['mps_id'];
    }

    /**
     * Sets mps_id
     *
     * @param string $mps_id mps_id
     *
     * @return $this
     */
    public function setMpsId($mps_id)
    {
        $this->container['mps_id'] = $mps_id;

        return $this;
    }

    /**
     * Gets mps_url
     *
     * @return string
     */
    public function getMpsUrl()
    {
        return $this->container['mps_url'];
    }

    /**
     * Sets mps_url
     *
     * @param string $mps_url mps_url
     *
     * @return $this
     */
    public function setMpsUrl($mps_url)
    {
        $this->container['mps_url'] = $mps_url;

        return $this;
    }

    /**
     * Gets viabill_url
     *
     * @return string
     */
    public function getViabillUrl()
    {
        return $this->container['viabill_url'];
    }

    /**
     * Sets viabill_url
     *
     * @param string $viabill_url viabill_url
     *
     * @return $this
     */
    public function setViabillUrl($viabill_url)
    {
        $this->container['viabill_url'] = $viabill_url;

        return $this;
    }

    /**
     * Gets anyday_url
     *
     * @return string
     */
    public function getAnydayUrl()
    {
        return $this->container['anyday_url'];
    }

    /**
     * Sets anyday_url
     *
     * @param string $anyday_url anyday_url
     *
     * @return $this
     */
    public function setAnydayUrl($anyday_url)
    {
        $this->container['anyday_url'] = $anyday_url;

        return $this;
    }

    /**
     * Gets anyday_id
     *
     * @return string
     */
    public function getAnydayId()
    {
        return $this->container['anyday_id'];
    }

    /**
     * Sets anyday_id
     *
     * @param string $anyday_id anyday_id
     *
     * @return $this
     */
    public function setAnydayId($anyday_id)
    {
        $this->container['anyday_id'] = $anyday_id;

        return $this;
    }

    /**
     * Gets payever_url
     *
     * @return string
     */
    public function getPayeverUrl()
    {
        return $this->container['payever_url'];
    }

    /**
     * Sets payever_url
     *
     * @param string $payever_url payever_url
     *
     * @return $this
     */
    public function setPayeverUrl($payever_url)
    {
        $this->container['payever_url'] = $payever_url;

        return $this;
    }

    /**
     * Gets payever_id
     *
     * @return string
     */
    public function getPayeverId()
    {
        return $this->container['payever_id'];
    }

    /**
     * Sets payever_id
     *
     * @param string $payever_id payever_id
     *
     * @return $this
     */
    public function setPayeverId($payever_id)
    {
        $this->container['payever_id'] = $payever_id;

        return $this;
    }

    /**
     * Gets resurs_url
     *
     * @return string
     */
    public function getResursUrl()
    {
        return $this->container['resurs_url'];
    }

    /**
     * Sets resurs_url
     *
     * @param string $resurs_url resurs_url
     *
     * @return $this
     */
    public function setResursUrl($resurs_url)
    {
        $this->container['resurs_url'] = $resurs_url;

        return $this;
    }

    /**
     * Gets vipps_url
     *
     * @return string
     */
    public function getVippsUrl()
    {
        return $this->container['vipps_url'];
    }

    /**
     * Sets vipps_url
     *
     * @param string $vipps_url vipps_url
     *
     * @return $this
     */
    public function setVippsUrl($vipps_url)
    {
        $this->container['vipps_url'] = $vipps_url;

        return $this;
    }

    /**
     * Gets vipps_recurring_url
     *
     * @return string
     */
    public function getVippsRecurringUrl()
    {
        return $this->container['vipps_recurring_url'];
    }

    /**
     * Sets vipps_recurring_url
     *
     * @param string $vipps_recurring_url vipps_recurring_url
     *
     * @return $this
     */
    public function setVippsRecurringUrl($vipps_recurring_url)
    {
        $this->container['vipps_recurring_url'] = $vipps_recurring_url;

        return $this;
    }

    /**
     * Gets vipps_recurring_id
     *
     * @return string
     */
    public function getVippsRecurringId()
    {
        return $this->container['vipps_recurring_id'];
    }

    /**
     * Sets vipps_recurring_id
     *
     * @param string $vipps_recurring_id vipps_recurring_id
     *
     * @return $this
     */
    public function setVippsRecurringId($vipps_recurring_id)
    {
        $this->container['vipps_recurring_id'] = $vipps_recurring_id;

        return $this;
    }

    /**
     * Gets ppro_url
     *
     * @return string
     */
    public function getPproUrl()
    {
        return $this->container['ppro_url'];
    }

    /**
     * Sets ppro_url
     *
     * @param string $ppro_url ppro_url
     *
     * @return $this
     */
    public function setPproUrl($ppro_url)
    {
        $this->container['ppro_url'] = $ppro_url;

        return $this;
    }

    /**
     * Gets ppro_id
     *
     * @return string
     */
    public function getPproId()
    {
        return $this->container['ppro_id'];
    }

    /**
     * Sets ppro_id
     *
     * @param string $ppro_id ppro_id
     *
     * @return $this
     */
    public function setPproId($ppro_id)
    {
        $this->container['ppro_id'] = $ppro_id;

        return $this;
    }

    /**
     * Gets applepay_payment_request
     *
     * @return \Reepay\Model\ApplepayPaymentRequestDto
     */
    public function getApplepayPaymentRequest()
    {
        return $this->container['applepay_payment_request'];
    }

    /**
     * Sets applepay_payment_request
     *
     * @param \Reepay\Model\ApplepayPaymentRequestDto $applepay_payment_request applepay_payment_request
     *
     * @return $this
     */
    public function setApplepayPaymentRequest($applepay_payment_request)
    {
        $this->container['applepay_payment_request'] = $applepay_payment_request;

        return $this;
    }

    /**
     * Gets googlepay_payment_request
     *
     * @return \Reepay\Model\GooglepayPaymentRequestDto
     */
    public function getGooglepayPaymentRequest()
    {
        return $this->container['googlepay_payment_request'];
    }

    /**
     * Sets googlepay_payment_request
     *
     * @param \Reepay\Model\GooglepayPaymentRequestDto $googlepay_payment_request googlepay_payment_request
     *
     * @return $this
     */
    public function setGooglepayPaymentRequest($googlepay_payment_request)
    {
        $this->container['googlepay_payment_request'] = $googlepay_payment_request;

        return $this;
    }

    /**
     * Gets paypal_client_id
     *
     * @return string
     */
    public function getPaypalClientId()
    {
        return $this->container['paypal_client_id'];
    }

    /**
     * Sets paypal_client_id
     *
     * @param string $paypal_client_id paypal_client_id
     *
     * @return $this
     */
    public function setPaypalClientId($paypal_client_id)
    {
        $this->container['paypal_client_id'] = $paypal_client_id;

        return $this;
    }

    /**
     * Gets paypal_payment_request
     *
     * @return map[string,object]
     */
    public function getPaypalPaymentRequest()
    {
        return $this->container['paypal_payment_request'];
    }

    /**
     * Sets paypal_payment_request
     *
     * @param map[string,object] $paypal_payment_request paypal_payment_request
     *
     * @return $this
     */
    public function setPaypalPaymentRequest($paypal_payment_request)
    {
        $this->container['paypal_payment_request'] = $paypal_payment_request;

        return $this;
    }

    /**
     * Gets paypal_auth_url
     *
     * @return string
     */
    public function getPaypalAuthUrl()
    {
        return $this->container['paypal_auth_url'];
    }

    /**
     * Sets paypal_auth_url
     *
     * @param string $paypal_auth_url paypal_auth_url
     *
     * @return $this
     */
    public function setPaypalAuthUrl($paypal_auth_url)
    {
        $this->container['paypal_auth_url'] = $paypal_auth_url;

        return $this;
    }

    /**
     * Gets klarna_client_token
     *
     * @return string
     */
    public function getKlarnaClientToken()
    {
        return $this->container['klarna_client_token'];
    }

    /**
     * Sets klarna_client_token
     *
     * @param string $klarna_client_token klarna_client_token
     *
     * @return $this
     */
    public function setKlarnaClientToken($klarna_client_token)
    {
        $this->container['klarna_client_token'] = $klarna_client_token;

        return $this;
    }

    /**
     * Gets swish_mobile_token
     *
     * @return string
     */
    public function getSwishMobileToken()
    {
        return $this->container['swish_mobile_token'];
    }

    /**
     * Sets swish_mobile_token
     *
     * @param string $swish_mobile_token swish_mobile_token
     *
     * @return $this
     */
    public function setSwishMobileToken($swish_mobile_token)
    {
        $this->container['swish_mobile_token'] = $swish_mobile_token;

        return $this;
    }

    /**
     * Gets swish_id
     *
     * @return string
     */
    public function getSwishId()
    {
        return $this->container['swish_id'];
    }

    /**
     * Sets swish_id
     *
     * @param string $swish_id swish_id
     *
     * @return $this
     */
    public function setSwishId($swish_id)
    {
        $this->container['swish_id'] = $swish_id;

        return $this;
    }

    /**
     * Gets button_text
     *
     * @return string
     */
    public function getButtonText()
    {
        return $this->container['button_text'];
    }

    /**
     * Sets button_text
     *
     * @param string $button_text button_text
     *
     * @return $this
     */
    public function setButtonText($button_text)
    {
        $this->container['button_text'] = $button_text;

        return $this;
    }

    /**
     * Gets show_subscription_details
     *
     * @return bool
     */
    public function getShowSubscriptionDetails()
    {
        return $this->container['show_subscription_details'];
    }

    /**
     * Sets show_subscription_details
     *
     * @param bool $show_subscription_details show_subscription_details
     *
     * @return $this
     */
    public function setShowSubscriptionDetails($show_subscription_details)
    {
        $this->container['show_subscription_details'] = $show_subscription_details;

        return $this;
    }

    /**
     * Gets show_terms
     *
     * @return bool
     */
    public function getShowTerms()
    {
        return $this->container['show_terms'];
    }

    /**
     * Sets show_terms
     *
     * @param bool $show_terms show_terms
     *
     * @return $this
     */
    public function setShowTerms($show_terms)
    {
        $this->container['show_terms'] = $show_terms;

        return $this;
    }

    /**
     * Gets card_on_file
     *
     * @return \Reepay\Model\CardOnFile
     */
    public function getCardOnFile()
    {
        return $this->container['card_on_file'];
    }

    /**
     * Sets card_on_file
     *
     * @param \Reepay\Model\CardOnFile $card_on_file card_on_file
     *
     * @return $this
     */
    public function setCardOnFile($card_on_file)
    {
        $this->container['card_on_file'] = $card_on_file;

        return $this;
    }

    /**
     * Gets order_text
     *
     * @return string
     */
    public function getOrderText()
    {
        return $this->container['order_text'];
    }

    /**
     * Sets order_text
     *
     * @param string $order_text order_text
     *
     * @return $this
     */
    public function setOrderText($order_text)
    {
        $this->container['order_text'] = $order_text;

        return $this;
    }

    /**
     * Gets recurring_optional
     *
     * @return bool
     */
    public function getRecurringOptional()
    {
        return $this->container['recurring_optional'];
    }

    /**
     * Sets recurring_optional
     *
     * @param bool $recurring_optional recurring_optional
     *
     * @return $this
     */
    public function setRecurringOptional($recurring_optional)
    {
        $this->container['recurring_optional'] = $recurring_optional;

        return $this;
    }

    /**
     * Gets recurring_optional_text
     *
     * @return string
     */
    public function getRecurringOptionalText()
    {
        return $this->container['recurring_optional_text'];
    }

    /**
     * Sets recurring_optional_text
     *
     * @param string $recurring_optional_text recurring_optional_text
     *
     * @return $this
     */
    public function setRecurringOptionalText($recurring_optional_text)
    {
        $this->container['recurring_optional_text'] = $recurring_optional_text;

        return $this;
    }

    /**
     * Gets recurring_average_amount
     *
     * @return int
     */
    public function getRecurringAverageAmount()
    {
        return $this->container['recurring_average_amount'];
    }

    /**
     * Sets recurring_average_amount
     *
     * @param int $recurring_average_amount recurring_average_amount
     *
     * @return $this
     */
    public function setRecurringAverageAmount($recurring_average_amount)
    {
        $this->container['recurring_average_amount'] = $recurring_average_amount;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return string
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param string $partner partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets expire_duration
     *
     * @return int
     */
    public function getExpireDuration()
    {
        return $this->container['expire_duration'];
    }

    /**
     * Sets expire_duration
     *
     * @param int $expire_duration expire_duration
     *
     * @return $this
     */
    public function setExpireDuration($expire_duration)
    {
        $this->container['expire_duration'] = $expire_duration;

        return $this;
    }

    /**
     * Gets mandate_id
     *
     * @return string
     */
    public function getMandateId()
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string $mandate_id mandate_id
     *
     * @return $this
     */
    public function setMandateId($mandate_id)
    {
        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets view_mandate_url
     *
     * @return string
     */
    public function getViewMandateUrl()
    {
        return $this->container['view_mandate_url'];
    }

    /**
     * Sets view_mandate_url
     *
     * @param string $view_mandate_url view_mandate_url
     *
     * @return $this
     */
    public function setViewMandateUrl($view_mandate_url)
    {
        $this->container['view_mandate_url'] = $view_mandate_url;

        return $this;
    }

    /**
     * Gets show_test_hints
     *
     * @return bool
     */
    public function getShowTestHints()
    {
        return $this->container['show_test_hints'];
    }

    /**
     * Sets show_test_hints
     *
     * @param bool $show_test_hints show_test_hints
     *
     * @return $this
     */
    public function setShowTestHints($show_test_hints)
    {
        $this->container['show_test_hints'] = $show_test_hints;

        return $this;
    }

    /**
     * Gets verification
     *
     * @return \Reepay\Model\Verification
     */
    public function getVerification()
    {
        return $this->container['verification'];
    }

    /**
     * Sets verification
     *
     * @param \Reepay\Model\Verification $verification verification
     *
     * @return $this
     */
    public function setVerification($verification)
    {
        $this->container['verification'] = $verification;

        return $this;
    }

    /**
     * Gets agreement_filter
     *
     * @return string[]
     */
    public function getAgreementFilter()
    {
        return $this->container['agreement_filter'];
    }

    /**
     * Sets agreement_filter
     *
     * @param string[] $agreement_filter agreement_filter
     *
     * @return $this
     */
    public function setAgreementFilter($agreement_filter)
    {
        $this->container['agreement_filter'] = $agreement_filter;

        return $this;
    }

    /**
     * Gets show_subscription_details_expanded
     *
     * @return bool
     */
    public function getShowSubscriptionDetailsExpanded()
    {
        return $this->container['show_subscription_details_expanded'];
    }

    /**
     * Sets show_subscription_details_expanded
     *
     * @param bool $show_subscription_details_expanded show_subscription_details_expanded
     *
     * @return $this
     */
    public function setShowSubscriptionDetailsExpanded($show_subscription_details_expanded)
    {
        $this->container['show_subscription_details_expanded'] = $show_subscription_details_expanded;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
