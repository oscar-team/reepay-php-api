<?php
/**
 * AppleLineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * AppleLineItem Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppleLineItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AppleLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'label' => 'string',
        'type' => 'string',
        'amount' => 'string',
        'payment_timing' => 'string',
        'recurring_payment_start_date' => '\DateTime',
        'recurring_payment_interval_unit' => 'string',
        'recurring_payment_interval_count' => 'int',
        'recurring_payment_end_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'label' => null,
        'type' => null,
        'amount' => null,
        'payment_timing' => null,
        'recurring_payment_start_date' => 'date-time',
        'recurring_payment_interval_unit' => null,
        'recurring_payment_interval_count' => 'int64',
        'recurring_payment_end_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label' => 'label',
        'type' => 'type',
        'amount' => 'amount',
        'payment_timing' => 'paymentTiming',
        'recurring_payment_start_date' => 'recurringPaymentStartDate',
        'recurring_payment_interval_unit' => 'recurringPaymentIntervalUnit',
        'recurring_payment_interval_count' => 'recurringPaymentIntervalCount',
        'recurring_payment_end_date' => 'recurringPaymentEndDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label' => 'setLabel',
        'type' => 'setType',
        'amount' => 'setAmount',
        'payment_timing' => 'setPaymentTiming',
        'recurring_payment_start_date' => 'setRecurringPaymentStartDate',
        'recurring_payment_interval_unit' => 'setRecurringPaymentIntervalUnit',
        'recurring_payment_interval_count' => 'setRecurringPaymentIntervalCount',
        'recurring_payment_end_date' => 'setRecurringPaymentEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label' => 'getLabel',
        'type' => 'getType',
        'amount' => 'getAmount',
        'payment_timing' => 'getPaymentTiming',
        'recurring_payment_start_date' => 'getRecurringPaymentStartDate',
        'recurring_payment_interval_unit' => 'getRecurringPaymentIntervalUnit',
        'recurring_payment_interval_count' => 'getRecurringPaymentIntervalCount',
        'recurring_payment_end_date' => 'getRecurringPaymentEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['payment_timing'] = isset($data['payment_timing']) ? $data['payment_timing'] : null;
        $this->container['recurring_payment_start_date'] = isset($data['recurring_payment_start_date']) ? $data['recurring_payment_start_date'] : null;
        $this->container['recurring_payment_interval_unit'] = isset($data['recurring_payment_interval_unit']) ? $data['recurring_payment_interval_unit'] : null;
        $this->container['recurring_payment_interval_count'] = isset($data['recurring_payment_interval_count']) ? $data['recurring_payment_interval_count'] : null;
        $this->container['recurring_payment_end_date'] = isset($data['recurring_payment_end_date']) ? $data['recurring_payment_end_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets payment_timing
     *
     * @return string
     */
    public function getPaymentTiming()
    {
        return $this->container['payment_timing'];
    }

    /**
     * Sets payment_timing
     *
     * @param string $payment_timing payment_timing
     *
     * @return $this
     */
    public function setPaymentTiming($payment_timing)
    {
        $this->container['payment_timing'] = $payment_timing;

        return $this;
    }

    /**
     * Gets recurring_payment_start_date
     *
     * @return \DateTime
     */
    public function getRecurringPaymentStartDate()
    {
        return $this->container['recurring_payment_start_date'];
    }

    /**
     * Sets recurring_payment_start_date
     *
     * @param \DateTime $recurring_payment_start_date recurring_payment_start_date
     *
     * @return $this
     */
    public function setRecurringPaymentStartDate($recurring_payment_start_date)
    {
        $this->container['recurring_payment_start_date'] = $recurring_payment_start_date;

        return $this;
    }

    /**
     * Gets recurring_payment_interval_unit
     *
     * @return string
     */
    public function getRecurringPaymentIntervalUnit()
    {
        return $this->container['recurring_payment_interval_unit'];
    }

    /**
     * Sets recurring_payment_interval_unit
     *
     * @param string $recurring_payment_interval_unit recurring_payment_interval_unit
     *
     * @return $this
     */
    public function setRecurringPaymentIntervalUnit($recurring_payment_interval_unit)
    {
        $this->container['recurring_payment_interval_unit'] = $recurring_payment_interval_unit;

        return $this;
    }

    /**
     * Gets recurring_payment_interval_count
     *
     * @return int
     */
    public function getRecurringPaymentIntervalCount()
    {
        return $this->container['recurring_payment_interval_count'];
    }

    /**
     * Sets recurring_payment_interval_count
     *
     * @param int $recurring_payment_interval_count recurring_payment_interval_count
     *
     * @return $this
     */
    public function setRecurringPaymentIntervalCount($recurring_payment_interval_count)
    {
        $this->container['recurring_payment_interval_count'] = $recurring_payment_interval_count;

        return $this;
    }

    /**
     * Gets recurring_payment_end_date
     *
     * @return \DateTime
     */
    public function getRecurringPaymentEndDate()
    {
        return $this->container['recurring_payment_end_date'];
    }

    /**
     * Sets recurring_payment_end_date
     *
     * @param \DateTime $recurring_payment_end_date recurring_payment_end_date
     *
     * @return $this
     */
    public function setRecurringPaymentEndDate($recurring_payment_end_date)
    {
        $this->container['recurring_payment_end_date'] = $recurring_payment_end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
