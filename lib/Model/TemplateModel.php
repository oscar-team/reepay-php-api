<?php
/**
 * TemplateModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * TemplateModel Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TemplateModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TemplateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'subscription_changed' => 'map[string,object]',
        'plan_changed' => 'map[string,object]',
        'compensation' => 'map[string,object]',
        'dunning' => 'map[string,object]',
        'webhook_alert' => 'map[string,object]',
        'user_account' => 'map[string,object]',
        'mps' => 'map[string,object]',
        'test' => 'bool',
        'plan' => 'map[string,object]',
        'invoice' => 'map[string,object]',
        'refund' => 'map[string,object]',
        'user' => 'map[string,object]',
        'subscription' => 'map[string,object]',
        'card' => 'map[string,object]',
        'customer' => 'map[string,object]',
        'account' => 'map[string,object]',
        'empty' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'subscription_changed' => null,
        'plan_changed' => null,
        'compensation' => null,
        'dunning' => null,
        'webhook_alert' => null,
        'user_account' => null,
        'mps' => null,
        'test' => null,
        'plan' => null,
        'invoice' => null,
        'refund' => null,
        'user' => null,
        'subscription' => null,
        'card' => null,
        'customer' => null,
        'account' => null,
        'empty' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscription_changed' => 'subscriptionChanged',
        'plan_changed' => 'planChanged',
        'compensation' => 'compensation',
        'dunning' => 'dunning',
        'webhook_alert' => 'webhookAlert',
        'user_account' => 'userAccount',
        'mps' => 'mps',
        'test' => 'test',
        'plan' => 'plan',
        'invoice' => 'invoice',
        'refund' => 'refund',
        'user' => 'user',
        'subscription' => 'subscription',
        'card' => 'card',
        'customer' => 'customer',
        'account' => 'account',
        'empty' => 'empty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscription_changed' => 'setSubscriptionChanged',
        'plan_changed' => 'setPlanChanged',
        'compensation' => 'setCompensation',
        'dunning' => 'setDunning',
        'webhook_alert' => 'setWebhookAlert',
        'user_account' => 'setUserAccount',
        'mps' => 'setMps',
        'test' => 'setTest',
        'plan' => 'setPlan',
        'invoice' => 'setInvoice',
        'refund' => 'setRefund',
        'user' => 'setUser',
        'subscription' => 'setSubscription',
        'card' => 'setCard',
        'customer' => 'setCustomer',
        'account' => 'setAccount',
        'empty' => 'setEmpty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscription_changed' => 'getSubscriptionChanged',
        'plan_changed' => 'getPlanChanged',
        'compensation' => 'getCompensation',
        'dunning' => 'getDunning',
        'webhook_alert' => 'getWebhookAlert',
        'user_account' => 'getUserAccount',
        'mps' => 'getMps',
        'test' => 'getTest',
        'plan' => 'getPlan',
        'invoice' => 'getInvoice',
        'refund' => 'getRefund',
        'user' => 'getUser',
        'subscription' => 'getSubscription',
        'card' => 'getCard',
        'customer' => 'getCustomer',
        'account' => 'getAccount',
        'empty' => 'getEmpty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subscription_changed'] = isset($data['subscription_changed']) ? $data['subscription_changed'] : null;
        $this->container['plan_changed'] = isset($data['plan_changed']) ? $data['plan_changed'] : null;
        $this->container['compensation'] = isset($data['compensation']) ? $data['compensation'] : null;
        $this->container['dunning'] = isset($data['dunning']) ? $data['dunning'] : null;
        $this->container['webhook_alert'] = isset($data['webhook_alert']) ? $data['webhook_alert'] : null;
        $this->container['user_account'] = isset($data['user_account']) ? $data['user_account'] : null;
        $this->container['mps'] = isset($data['mps']) ? $data['mps'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['plan'] = isset($data['plan']) ? $data['plan'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['refund'] = isset($data['refund']) ? $data['refund'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['card'] = isset($data['card']) ? $data['card'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['empty'] = isset($data['empty']) ? $data['empty'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscription_changed
     *
     * @return map[string,object]
     */
    public function getSubscriptionChanged()
    {
        return $this->container['subscription_changed'];
    }

    /**
     * Sets subscription_changed
     *
     * @param map[string,object] $subscription_changed subscription_changed
     *
     * @return $this
     */
    public function setSubscriptionChanged($subscription_changed)
    {
        $this->container['subscription_changed'] = $subscription_changed;

        return $this;
    }

    /**
     * Gets plan_changed
     *
     * @return map[string,object]
     */
    public function getPlanChanged()
    {
        return $this->container['plan_changed'];
    }

    /**
     * Sets plan_changed
     *
     * @param map[string,object] $plan_changed plan_changed
     *
     * @return $this
     */
    public function setPlanChanged($plan_changed)
    {
        $this->container['plan_changed'] = $plan_changed;

        return $this;
    }

    /**
     * Gets compensation
     *
     * @return map[string,object]
     */
    public function getCompensation()
    {
        return $this->container['compensation'];
    }

    /**
     * Sets compensation
     *
     * @param map[string,object] $compensation compensation
     *
     * @return $this
     */
    public function setCompensation($compensation)
    {
        $this->container['compensation'] = $compensation;

        return $this;
    }

    /**
     * Gets dunning
     *
     * @return map[string,object]
     */
    public function getDunning()
    {
        return $this->container['dunning'];
    }

    /**
     * Sets dunning
     *
     * @param map[string,object] $dunning dunning
     *
     * @return $this
     */
    public function setDunning($dunning)
    {
        $this->container['dunning'] = $dunning;

        return $this;
    }

    /**
     * Gets webhook_alert
     *
     * @return map[string,object]
     */
    public function getWebhookAlert()
    {
        return $this->container['webhook_alert'];
    }

    /**
     * Sets webhook_alert
     *
     * @param map[string,object] $webhook_alert webhook_alert
     *
     * @return $this
     */
    public function setWebhookAlert($webhook_alert)
    {
        $this->container['webhook_alert'] = $webhook_alert;

        return $this;
    }

    /**
     * Gets user_account
     *
     * @return map[string,object]
     */
    public function getUserAccount()
    {
        return $this->container['user_account'];
    }

    /**
     * Sets user_account
     *
     * @param map[string,object] $user_account user_account
     *
     * @return $this
     */
    public function setUserAccount($user_account)
    {
        $this->container['user_account'] = $user_account;

        return $this;
    }

    /**
     * Gets mps
     *
     * @return map[string,object]
     */
    public function getMps()
    {
        return $this->container['mps'];
    }

    /**
     * Sets mps
     *
     * @param map[string,object] $mps mps
     *
     * @return $this
     */
    public function setMps($mps)
    {
        $this->container['mps'] = $mps;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test test
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return map[string,object]
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param map[string,object] $plan plan
     *
     * @return $this
     */
    public function setPlan($plan)
    {
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return map[string,object]
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param map[string,object] $invoice invoice
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets refund
     *
     * @return map[string,object]
     */
    public function getRefund()
    {
        return $this->container['refund'];
    }

    /**
     * Sets refund
     *
     * @param map[string,object] $refund refund
     *
     * @return $this
     */
    public function setRefund($refund)
    {
        $this->container['refund'] = $refund;

        return $this;
    }

    /**
     * Gets user
     *
     * @return map[string,object]
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param map[string,object] $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return map[string,object]
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param map[string,object] $subscription subscription
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets card
     *
     * @return map[string,object]
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param map[string,object] $card card
     *
     * @return $this
     */
    public function setCard($card)
    {
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return map[string,object]
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param map[string,object] $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets account
     *
     * @return map[string,object]
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param map[string,object] $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets empty
     *
     * @return bool
     */
    public function getEmpty()
    {
        return $this->container['empty'];
    }

    /**
     * Sets empty
     *
     * @param bool $empty empty
     *
     * @return $this
     */
    public function setEmpty($empty)
    {
        $this->container['empty'] = $empty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
