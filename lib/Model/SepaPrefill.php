<?php
/**
 * SepaPrefill
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * SepaPrefill Class Doc Comment
 *
 * @category Class
 * @description Prefill values for SEPA form
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SepaPrefill implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SepaPrefill';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'verification_result' => 'string',
        'sepa_debtor_name' => 'string',
        'sepa_debtor_address' => 'string',
        'sepa_debtor_postal_code' => 'string',
        'sepa_debtor_city' => 'string',
        'sepa_debtor_country' => 'string',
        'sepa_debtor_iban' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'verification_result' => null,
        'sepa_debtor_name' => null,
        'sepa_debtor_address' => null,
        'sepa_debtor_postal_code' => null,
        'sepa_debtor_city' => null,
        'sepa_debtor_country' => null,
        'sepa_debtor_iban' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'verification_result' => 'verificationResult',
        'sepa_debtor_name' => 'sepa_debtor_name',
        'sepa_debtor_address' => 'sepa_debtor_address',
        'sepa_debtor_postal_code' => 'sepa_debtor_postal_code',
        'sepa_debtor_city' => 'sepa_debtor_city',
        'sepa_debtor_country' => 'sepa_debtor_country',
        'sepa_debtor_iban' => 'sepa_debtor_iban'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'verification_result' => 'setVerificationResult',
        'sepa_debtor_name' => 'setSepaDebtorName',
        'sepa_debtor_address' => 'setSepaDebtorAddress',
        'sepa_debtor_postal_code' => 'setSepaDebtorPostalCode',
        'sepa_debtor_city' => 'setSepaDebtorCity',
        'sepa_debtor_country' => 'setSepaDebtorCountry',
        'sepa_debtor_iban' => 'setSepaDebtorIban'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'verification_result' => 'getVerificationResult',
        'sepa_debtor_name' => 'getSepaDebtorName',
        'sepa_debtor_address' => 'getSepaDebtorAddress',
        'sepa_debtor_postal_code' => 'getSepaDebtorPostalCode',
        'sepa_debtor_city' => 'getSepaDebtorCity',
        'sepa_debtor_country' => 'getSepaDebtorCountry',
        'sepa_debtor_iban' => 'getSepaDebtorIban'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VERIFICATION_RESULT_CREATED = 'CREATED';
    const VERIFICATION_RESULT_VERIFIED = 'VERIFIED';
    const VERIFICATION_RESULT_FAILED = 'FAILED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerificationResultAllowableValues()
    {
        return [
            self::VERIFICATION_RESULT_CREATED,
            self::VERIFICATION_RESULT_VERIFIED,
            self::VERIFICATION_RESULT_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['verification_result'] = isset($data['verification_result']) ? $data['verification_result'] : null;
        $this->container['sepa_debtor_name'] = isset($data['sepa_debtor_name']) ? $data['sepa_debtor_name'] : null;
        $this->container['sepa_debtor_address'] = isset($data['sepa_debtor_address']) ? $data['sepa_debtor_address'] : null;
        $this->container['sepa_debtor_postal_code'] = isset($data['sepa_debtor_postal_code']) ? $data['sepa_debtor_postal_code'] : null;
        $this->container['sepa_debtor_city'] = isset($data['sepa_debtor_city']) ? $data['sepa_debtor_city'] : null;
        $this->container['sepa_debtor_country'] = isset($data['sepa_debtor_country']) ? $data['sepa_debtor_country'] : null;
        $this->container['sepa_debtor_iban'] = isset($data['sepa_debtor_iban']) ? $data['sepa_debtor_iban'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVerificationResultAllowableValues();
        if (!is_null($this->container['verification_result']) && !in_array($this->container['verification_result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'verification_result', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets verification_result
     *
     * @return string
     */
    public function getVerificationResult()
    {
        return $this->container['verification_result'];
    }

    /**
     * Sets verification_result
     *
     * @param string $verification_result verification_result
     *
     * @return $this
     */
    public function setVerificationResult($verification_result)
    {
        $allowedValues = $this->getVerificationResultAllowableValues();
        if (!is_null($verification_result) && !in_array($verification_result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'verification_result', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verification_result'] = $verification_result;

        return $this;
    }

    /**
     * Gets sepa_debtor_name
     *
     * @return string
     */
    public function getSepaDebtorName()
    {
        return $this->container['sepa_debtor_name'];
    }

    /**
     * Sets sepa_debtor_name
     *
     * @param string $sepa_debtor_name Optional SEPA debtor name.
     *
     * @return $this
     */
    public function setSepaDebtorName($sepa_debtor_name)
    {
        $this->container['sepa_debtor_name'] = $sepa_debtor_name;

        return $this;
    }

    /**
     * Gets sepa_debtor_address
     *
     * @return string
     */
    public function getSepaDebtorAddress()
    {
        return $this->container['sepa_debtor_address'];
    }

    /**
     * Sets sepa_debtor_address
     *
     * @param string $sepa_debtor_address Optional SEPA debtor address.
     *
     * @return $this
     */
    public function setSepaDebtorAddress($sepa_debtor_address)
    {
        $this->container['sepa_debtor_address'] = $sepa_debtor_address;

        return $this;
    }

    /**
     * Gets sepa_debtor_postal_code
     *
     * @return string
     */
    public function getSepaDebtorPostalCode()
    {
        return $this->container['sepa_debtor_postal_code'];
    }

    /**
     * Sets sepa_debtor_postal_code
     *
     * @param string $sepa_debtor_postal_code Optional SEPA debtor postal code.
     *
     * @return $this
     */
    public function setSepaDebtorPostalCode($sepa_debtor_postal_code)
    {
        $this->container['sepa_debtor_postal_code'] = $sepa_debtor_postal_code;

        return $this;
    }

    /**
     * Gets sepa_debtor_city
     *
     * @return string
     */
    public function getSepaDebtorCity()
    {
        return $this->container['sepa_debtor_city'];
    }

    /**
     * Sets sepa_debtor_city
     *
     * @param string $sepa_debtor_city Optional SEPA debtor city.
     *
     * @return $this
     */
    public function setSepaDebtorCity($sepa_debtor_city)
    {
        $this->container['sepa_debtor_city'] = $sepa_debtor_city;

        return $this;
    }

    /**
     * Gets sepa_debtor_country
     *
     * @return string
     */
    public function getSepaDebtorCountry()
    {
        return $this->container['sepa_debtor_country'];
    }

    /**
     * Sets sepa_debtor_country
     *
     * @param string $sepa_debtor_country Optional SEPA debtor country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     *
     * @return $this
     */
    public function setSepaDebtorCountry($sepa_debtor_country)
    {
        $this->container['sepa_debtor_country'] = $sepa_debtor_country;

        return $this;
    }

    /**
     * Gets sepa_debtor_iban
     *
     * @return string
     */
    public function getSepaDebtorIban()
    {
        return $this->container['sepa_debtor_iban'];
    }

    /**
     * Sets sepa_debtor_iban
     *
     * @param string $sepa_debtor_iban Optional SEPA debtor IBAN.
     *
     * @return $this
     */
    public function setSepaDebtorIban($sepa_debtor_iban)
    {
        $this->container['sepa_debtor_iban'] = $sepa_debtor_iban;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
