<?php
/**
 * SessionData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * SessionData Class Doc Comment
 *
 * @category Class
 * @description Object to define payment type specific parameters
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SessionData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SessionData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ssn' => 'string',
        'account_holder_name' => 'string',
        'mps_amount' => 'int',
        'mps_plan' => 'string',
        'mps_description' => 'string',
        'mps_frequency' => 'string',
        'mps_external_id' => 'string',
        'mps_payment_description' => 'string',
        'mps_cancel_redirect_url' => 'string',
        'mpo_flow' => 'string',
        'alternative_return_url' => 'string',
        'applepay_recurring_payment_start_date' => 'string',
        'applepay_recurring_payment_end_date' => 'string',
        'applepay_recurring_payment_interval_unit' => 'string',
        'applepay_recurring_payment_interval_count' => 'int',
        'applepay_recurring_label' => 'string',
        'applepay_recurring_amount' => 'int',
        'sepa_debtor_name' => 'string',
        'sepa_debtor_address' => 'string',
        'sepa_debtor_postal_code' => 'string',
        'sepa_debtor_city' => 'string',
        'sepa_debtor_country' => 'string',
        'sepa_debtor_iban' => 'string',
        'sepa_mandate_amount' => 'int',
        'vipps_recurring_amount' => 'int',
        'vipps_recurring_product_name' => 'string',
        'vipps_recurring_pricing_type' => 'string',
        'vipps_recurring_product_description' => 'string',
        'vipps_recurring_interval_count' => 'int',
        'vipps_recurring_interval_unit' => 'string',
        'vipps_recurring_initial_payment_description' => 'string',
        'vipps_recurring_merchant_cancel_url' => 'string',
        'vipps_recurring_campaign_amount' => 'int',
        'vipps_recurring_campaign_interval_count' => 'int',
        'vipps_recurring_campaign_interval_unit' => 'string',
        'vipps_recurring_campaign_end_date' => '\DateTime',
        'anyday_webshop_url' => 'string',
        'mpo_minimum_user_age' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ssn' => null,
        'account_holder_name' => null,
        'mps_amount' => 'int32',
        'mps_plan' => null,
        'mps_description' => null,
        'mps_frequency' => null,
        'mps_external_id' => null,
        'mps_payment_description' => null,
        'mps_cancel_redirect_url' => null,
        'mpo_flow' => null,
        'alternative_return_url' => null,
        'applepay_recurring_payment_start_date' => null,
        'applepay_recurring_payment_end_date' => null,
        'applepay_recurring_payment_interval_unit' => null,
        'applepay_recurring_payment_interval_count' => 'int64',
        'applepay_recurring_label' => null,
        'applepay_recurring_amount' => 'int32',
        'sepa_debtor_name' => null,
        'sepa_debtor_address' => null,
        'sepa_debtor_postal_code' => null,
        'sepa_debtor_city' => null,
        'sepa_debtor_country' => null,
        'sepa_debtor_iban' => null,
        'sepa_mandate_amount' => 'int32',
        'vipps_recurring_amount' => 'int32',
        'vipps_recurring_product_name' => null,
        'vipps_recurring_pricing_type' => null,
        'vipps_recurring_product_description' => null,
        'vipps_recurring_interval_count' => 'int32',
        'vipps_recurring_interval_unit' => null,
        'vipps_recurring_initial_payment_description' => null,
        'vipps_recurring_merchant_cancel_url' => null,
        'vipps_recurring_campaign_amount' => 'int32',
        'vipps_recurring_campaign_interval_count' => 'int32',
        'vipps_recurring_campaign_interval_unit' => null,
        'vipps_recurring_campaign_end_date' => 'date-time',
        'anyday_webshop_url' => null,
        'mpo_minimum_user_age' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ssn' => 'ssn',
        'account_holder_name' => 'account_holder_name',
        'mps_amount' => 'mps_amount',
        'mps_plan' => 'mps_plan',
        'mps_description' => 'mps_description',
        'mps_frequency' => 'mps_frequency',
        'mps_external_id' => 'mps_external_id',
        'mps_payment_description' => 'mps_payment_description',
        'mps_cancel_redirect_url' => 'mps_cancel_redirect_url',
        'mpo_flow' => 'mpo_flow',
        'alternative_return_url' => 'alternative_return_url',
        'applepay_recurring_payment_start_date' => 'applepay_recurring_payment_start_date',
        'applepay_recurring_payment_end_date' => 'applepay_recurring_payment_end_date',
        'applepay_recurring_payment_interval_unit' => 'applepay_recurring_payment_interval_unit',
        'applepay_recurring_payment_interval_count' => 'applepay_recurring_payment_interval_count',
        'applepay_recurring_label' => 'applepay_recurring_label',
        'applepay_recurring_amount' => 'applepay_recurring_amount',
        'sepa_debtor_name' => 'sepa_debtor_name',
        'sepa_debtor_address' => 'sepa_debtor_address',
        'sepa_debtor_postal_code' => 'sepa_debtor_postal_code',
        'sepa_debtor_city' => 'sepa_debtor_city',
        'sepa_debtor_country' => 'sepa_debtor_country',
        'sepa_debtor_iban' => 'sepa_debtor_iban',
        'sepa_mandate_amount' => 'sepa_mandate_amount',
        'vipps_recurring_amount' => 'vipps_recurring_amount',
        'vipps_recurring_product_name' => 'vipps_recurring_product_name',
        'vipps_recurring_pricing_type' => 'vipps_recurring_pricing_type',
        'vipps_recurring_product_description' => 'vipps_recurring_product_description',
        'vipps_recurring_interval_count' => 'vipps_recurring_interval_count',
        'vipps_recurring_interval_unit' => 'vipps_recurring_interval_unit',
        'vipps_recurring_initial_payment_description' => 'vipps_recurring_initial_payment_description',
        'vipps_recurring_merchant_cancel_url' => 'vipps_recurring_merchant_cancel_url',
        'vipps_recurring_campaign_amount' => 'vipps_recurring_campaign_amount',
        'vipps_recurring_campaign_interval_count' => 'vipps_recurring_campaign_interval_count',
        'vipps_recurring_campaign_interval_unit' => 'vipps_recurring_campaign_interval_unit',
        'vipps_recurring_campaign_end_date' => 'vipps_recurring_campaign_end_date',
        'anyday_webshop_url' => 'anyday_webshop_url',
        'mpo_minimum_user_age' => 'mpo_minimum_user_age'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ssn' => 'setSsn',
        'account_holder_name' => 'setAccountHolderName',
        'mps_amount' => 'setMpsAmount',
        'mps_plan' => 'setMpsPlan',
        'mps_description' => 'setMpsDescription',
        'mps_frequency' => 'setMpsFrequency',
        'mps_external_id' => 'setMpsExternalId',
        'mps_payment_description' => 'setMpsPaymentDescription',
        'mps_cancel_redirect_url' => 'setMpsCancelRedirectUrl',
        'mpo_flow' => 'setMpoFlow',
        'alternative_return_url' => 'setAlternativeReturnUrl',
        'applepay_recurring_payment_start_date' => 'setApplepayRecurringPaymentStartDate',
        'applepay_recurring_payment_end_date' => 'setApplepayRecurringPaymentEndDate',
        'applepay_recurring_payment_interval_unit' => 'setApplepayRecurringPaymentIntervalUnit',
        'applepay_recurring_payment_interval_count' => 'setApplepayRecurringPaymentIntervalCount',
        'applepay_recurring_label' => 'setApplepayRecurringLabel',
        'applepay_recurring_amount' => 'setApplepayRecurringAmount',
        'sepa_debtor_name' => 'setSepaDebtorName',
        'sepa_debtor_address' => 'setSepaDebtorAddress',
        'sepa_debtor_postal_code' => 'setSepaDebtorPostalCode',
        'sepa_debtor_city' => 'setSepaDebtorCity',
        'sepa_debtor_country' => 'setSepaDebtorCountry',
        'sepa_debtor_iban' => 'setSepaDebtorIban',
        'sepa_mandate_amount' => 'setSepaMandateAmount',
        'vipps_recurring_amount' => 'setVippsRecurringAmount',
        'vipps_recurring_product_name' => 'setVippsRecurringProductName',
        'vipps_recurring_pricing_type' => 'setVippsRecurringPricingType',
        'vipps_recurring_product_description' => 'setVippsRecurringProductDescription',
        'vipps_recurring_interval_count' => 'setVippsRecurringIntervalCount',
        'vipps_recurring_interval_unit' => 'setVippsRecurringIntervalUnit',
        'vipps_recurring_initial_payment_description' => 'setVippsRecurringInitialPaymentDescription',
        'vipps_recurring_merchant_cancel_url' => 'setVippsRecurringMerchantCancelUrl',
        'vipps_recurring_campaign_amount' => 'setVippsRecurringCampaignAmount',
        'vipps_recurring_campaign_interval_count' => 'setVippsRecurringCampaignIntervalCount',
        'vipps_recurring_campaign_interval_unit' => 'setVippsRecurringCampaignIntervalUnit',
        'vipps_recurring_campaign_end_date' => 'setVippsRecurringCampaignEndDate',
        'anyday_webshop_url' => 'setAnydayWebshopUrl',
        'mpo_minimum_user_age' => 'setMpoMinimumUserAge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ssn' => 'getSsn',
        'account_holder_name' => 'getAccountHolderName',
        'mps_amount' => 'getMpsAmount',
        'mps_plan' => 'getMpsPlan',
        'mps_description' => 'getMpsDescription',
        'mps_frequency' => 'getMpsFrequency',
        'mps_external_id' => 'getMpsExternalId',
        'mps_payment_description' => 'getMpsPaymentDescription',
        'mps_cancel_redirect_url' => 'getMpsCancelRedirectUrl',
        'mpo_flow' => 'getMpoFlow',
        'alternative_return_url' => 'getAlternativeReturnUrl',
        'applepay_recurring_payment_start_date' => 'getApplepayRecurringPaymentStartDate',
        'applepay_recurring_payment_end_date' => 'getApplepayRecurringPaymentEndDate',
        'applepay_recurring_payment_interval_unit' => 'getApplepayRecurringPaymentIntervalUnit',
        'applepay_recurring_payment_interval_count' => 'getApplepayRecurringPaymentIntervalCount',
        'applepay_recurring_label' => 'getApplepayRecurringLabel',
        'applepay_recurring_amount' => 'getApplepayRecurringAmount',
        'sepa_debtor_name' => 'getSepaDebtorName',
        'sepa_debtor_address' => 'getSepaDebtorAddress',
        'sepa_debtor_postal_code' => 'getSepaDebtorPostalCode',
        'sepa_debtor_city' => 'getSepaDebtorCity',
        'sepa_debtor_country' => 'getSepaDebtorCountry',
        'sepa_debtor_iban' => 'getSepaDebtorIban',
        'sepa_mandate_amount' => 'getSepaMandateAmount',
        'vipps_recurring_amount' => 'getVippsRecurringAmount',
        'vipps_recurring_product_name' => 'getVippsRecurringProductName',
        'vipps_recurring_pricing_type' => 'getVippsRecurringPricingType',
        'vipps_recurring_product_description' => 'getVippsRecurringProductDescription',
        'vipps_recurring_interval_count' => 'getVippsRecurringIntervalCount',
        'vipps_recurring_interval_unit' => 'getVippsRecurringIntervalUnit',
        'vipps_recurring_initial_payment_description' => 'getVippsRecurringInitialPaymentDescription',
        'vipps_recurring_merchant_cancel_url' => 'getVippsRecurringMerchantCancelUrl',
        'vipps_recurring_campaign_amount' => 'getVippsRecurringCampaignAmount',
        'vipps_recurring_campaign_interval_count' => 'getVippsRecurringCampaignIntervalCount',
        'vipps_recurring_campaign_interval_unit' => 'getVippsRecurringCampaignIntervalUnit',
        'vipps_recurring_campaign_end_date' => 'getVippsRecurringCampaignEndDate',
        'anyday_webshop_url' => 'getAnydayWebshopUrl',
        'mpo_minimum_user_age' => 'getMpoMinimumUserAge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MPS_FREQUENCY_FLEXIBLE = 'flexible';
    const MPS_FREQUENCY_YEARLY = 'yearly';
    const MPS_FREQUENCY_BIYEARLY = 'biyearly';
    const MPS_FREQUENCY_QUARTERLY = 'quarterly';
    const MPS_FREQUENCY_MONTHLY = 'monthly';
    const MPS_FREQUENCY_BIWEEKLY = 'biweekly';
    const MPS_FREQUENCY_WEEKLY = 'weekly';
    const MPS_FREQUENCY_DAILY = 'daily';
    const MPO_FLOW_SINGLE = 'single';
    const MPO_FLOW_DUAL = 'dual';
    const APPLEPAY_RECURRING_PAYMENT_INTERVAL_UNIT_YEAR = 'year';
    const APPLEPAY_RECURRING_PAYMENT_INTERVAL_UNIT_MONTH = 'month';
    const APPLEPAY_RECURRING_PAYMENT_INTERVAL_UNIT_DAY = 'day';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMpsFrequencyAllowableValues()
    {
        return [
            self::MPS_FREQUENCY_FLEXIBLE,
            self::MPS_FREQUENCY_YEARLY,
            self::MPS_FREQUENCY_BIYEARLY,
            self::MPS_FREQUENCY_QUARTERLY,
            self::MPS_FREQUENCY_MONTHLY,
            self::MPS_FREQUENCY_BIWEEKLY,
            self::MPS_FREQUENCY_WEEKLY,
            self::MPS_FREQUENCY_DAILY,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMpoFlowAllowableValues()
    {
        return [
            self::MPO_FLOW_SINGLE,
            self::MPO_FLOW_DUAL,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApplepayRecurringPaymentIntervalUnitAllowableValues()
    {
        return [
            self::APPLEPAY_RECURRING_PAYMENT_INTERVAL_UNIT_YEAR,
            self::APPLEPAY_RECURRING_PAYMENT_INTERVAL_UNIT_MONTH,
            self::APPLEPAY_RECURRING_PAYMENT_INTERVAL_UNIT_DAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ssn'] = isset($data['ssn']) ? $data['ssn'] : null;
        $this->container['account_holder_name'] = isset($data['account_holder_name']) ? $data['account_holder_name'] : null;
        $this->container['mps_amount'] = isset($data['mps_amount']) ? $data['mps_amount'] : null;
        $this->container['mps_plan'] = isset($data['mps_plan']) ? $data['mps_plan'] : null;
        $this->container['mps_description'] = isset($data['mps_description']) ? $data['mps_description'] : null;
        $this->container['mps_frequency'] = isset($data['mps_frequency']) ? $data['mps_frequency'] : null;
        $this->container['mps_external_id'] = isset($data['mps_external_id']) ? $data['mps_external_id'] : null;
        $this->container['mps_payment_description'] = isset($data['mps_payment_description']) ? $data['mps_payment_description'] : null;
        $this->container['mps_cancel_redirect_url'] = isset($data['mps_cancel_redirect_url']) ? $data['mps_cancel_redirect_url'] : null;
        $this->container['mpo_flow'] = isset($data['mpo_flow']) ? $data['mpo_flow'] : null;
        $this->container['alternative_return_url'] = isset($data['alternative_return_url']) ? $data['alternative_return_url'] : null;
        $this->container['applepay_recurring_payment_start_date'] = isset($data['applepay_recurring_payment_start_date']) ? $data['applepay_recurring_payment_start_date'] : null;
        $this->container['applepay_recurring_payment_end_date'] = isset($data['applepay_recurring_payment_end_date']) ? $data['applepay_recurring_payment_end_date'] : null;
        $this->container['applepay_recurring_payment_interval_unit'] = isset($data['applepay_recurring_payment_interval_unit']) ? $data['applepay_recurring_payment_interval_unit'] : null;
        $this->container['applepay_recurring_payment_interval_count'] = isset($data['applepay_recurring_payment_interval_count']) ? $data['applepay_recurring_payment_interval_count'] : null;
        $this->container['applepay_recurring_label'] = isset($data['applepay_recurring_label']) ? $data['applepay_recurring_label'] : null;
        $this->container['applepay_recurring_amount'] = isset($data['applepay_recurring_amount']) ? $data['applepay_recurring_amount'] : null;
        $this->container['sepa_debtor_name'] = isset($data['sepa_debtor_name']) ? $data['sepa_debtor_name'] : null;
        $this->container['sepa_debtor_address'] = isset($data['sepa_debtor_address']) ? $data['sepa_debtor_address'] : null;
        $this->container['sepa_debtor_postal_code'] = isset($data['sepa_debtor_postal_code']) ? $data['sepa_debtor_postal_code'] : null;
        $this->container['sepa_debtor_city'] = isset($data['sepa_debtor_city']) ? $data['sepa_debtor_city'] : null;
        $this->container['sepa_debtor_country'] = isset($data['sepa_debtor_country']) ? $data['sepa_debtor_country'] : null;
        $this->container['sepa_debtor_iban'] = isset($data['sepa_debtor_iban']) ? $data['sepa_debtor_iban'] : null;
        $this->container['sepa_mandate_amount'] = isset($data['sepa_mandate_amount']) ? $data['sepa_mandate_amount'] : null;
        $this->container['vipps_recurring_amount'] = isset($data['vipps_recurring_amount']) ? $data['vipps_recurring_amount'] : null;
        $this->container['vipps_recurring_product_name'] = isset($data['vipps_recurring_product_name']) ? $data['vipps_recurring_product_name'] : null;
        $this->container['vipps_recurring_pricing_type'] = isset($data['vipps_recurring_pricing_type']) ? $data['vipps_recurring_pricing_type'] : null;
        $this->container['vipps_recurring_product_description'] = isset($data['vipps_recurring_product_description']) ? $data['vipps_recurring_product_description'] : null;
        $this->container['vipps_recurring_interval_count'] = isset($data['vipps_recurring_interval_count']) ? $data['vipps_recurring_interval_count'] : null;
        $this->container['vipps_recurring_interval_unit'] = isset($data['vipps_recurring_interval_unit']) ? $data['vipps_recurring_interval_unit'] : null;
        $this->container['vipps_recurring_initial_payment_description'] = isset($data['vipps_recurring_initial_payment_description']) ? $data['vipps_recurring_initial_payment_description'] : null;
        $this->container['vipps_recurring_merchant_cancel_url'] = isset($data['vipps_recurring_merchant_cancel_url']) ? $data['vipps_recurring_merchant_cancel_url'] : null;
        $this->container['vipps_recurring_campaign_amount'] = isset($data['vipps_recurring_campaign_amount']) ? $data['vipps_recurring_campaign_amount'] : null;
        $this->container['vipps_recurring_campaign_interval_count'] = isset($data['vipps_recurring_campaign_interval_count']) ? $data['vipps_recurring_campaign_interval_count'] : null;
        $this->container['vipps_recurring_campaign_interval_unit'] = isset($data['vipps_recurring_campaign_interval_unit']) ? $data['vipps_recurring_campaign_interval_unit'] : null;
        $this->container['vipps_recurring_campaign_end_date'] = isset($data['vipps_recurring_campaign_end_date']) ? $data['vipps_recurring_campaign_end_date'] : null;
        $this->container['anyday_webshop_url'] = isset($data['anyday_webshop_url']) ? $data['anyday_webshop_url'] : null;
        $this->container['mpo_minimum_user_age'] = isset($data['mpo_minimum_user_age']) ? $data['mpo_minimum_user_age'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMpsFrequencyAllowableValues();
        if (!is_null($this->container['mps_frequency']) && !in_array($this->container['mps_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mps_frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMpoFlowAllowableValues();
        if (!is_null($this->container['mpo_flow']) && !in_array($this->container['mpo_flow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mpo_flow', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getApplepayRecurringPaymentIntervalUnitAllowableValues();
        if (!is_null($this->container['applepay_recurring_payment_interval_unit']) && !in_array($this->container['applepay_recurring_payment_interval_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'applepay_recurring_payment_interval_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ssn
     *
     * @return string
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     *
     * @param string $ssn Social security number, e.g. for Klarna Sweden
     *
     * @return $this
     */
    public function setSsn($ssn)
    {
        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets account_holder_name
     *
     * @return string
     */
    public function getAccountHolderName()
    {
        return $this->container['account_holder_name'];
    }

    /**
     * Sets account_holder_name
     *
     * @param string $account_holder_name Account Holder name, e.g. for IDEAL
     *
     * @return $this
     */
    public function setAccountHolderName($account_holder_name)
    {
        $this->container['account_holder_name'] = $account_holder_name;

        return $this;
    }

    /**
     * Gets mps_amount
     *
     * @return int
     */
    public function getMpsAmount()
    {
        return $this->container['mps_amount'];
    }

    /**
     * Sets mps_amount
     *
     * @param int $mps_amount Optional value to define MobilePay Subscriptions fixed recurring amount in minor unit. For subscription sessions this will default to plan amount.
     *
     * @return $this
     */
    public function setMpsAmount($mps_amount)
    {
        $this->container['mps_amount'] = $mps_amount;

        return $this;
    }

    /**
     * Gets mps_plan
     *
     * @return string
     */
    public function getMpsPlan()
    {
        return $this->container['mps_plan'];
    }

    /**
     * Sets mps_plan
     *
     * @param string $mps_plan Optional MobilePay Subscriptions plan text shown when signing up. Maximum 64 characters. For subscription sessions this will default to plan name. For other session types default will be shop name.
     *
     * @return $this
     */
    public function setMpsPlan($mps_plan)
    {
        $this->container['mps_plan'] = $mps_plan;

        return $this;
    }

    /**
     * Gets mps_description
     *
     * @return string
     */
    public function getMpsDescription()
    {
        return $this->container['mps_description'];
    }

    /**
     * Sets mps_description
     *
     * @param string $mps_description Optional MobilePay Subscriptions additional description displayed to the customer. Maximum 60 characters. For subscription sessions this will default to plan description.
     *
     * @return $this
     */
    public function setMpsDescription($mps_description)
    {
        $this->container['mps_description'] = $mps_description;

        return $this;
    }

    /**
     * Gets mps_frequency
     *
     * @return string
     */
    public function getMpsFrequency()
    {
        return $this->container['mps_frequency'];
    }

    /**
     * Sets mps_frequency
     *
     * @param string $mps_frequency Optional MobilePay Subscriptions frequency. Allowed values `flexible`, `yearly`, `biyearly`, `quarterly`, `monthly`, `biweekly`, `weekly` or `daily`. For subscription sessions this will default to plan frequency.
     *
     * @return $this
     */
    public function setMpsFrequency($mps_frequency)
    {
        $allowedValues = $this->getMpsFrequencyAllowableValues();
        if (!is_null($mps_frequency) && !in_array($mps_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mps_frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mps_frequency'] = $mps_frequency;

        return $this;
    }

    /**
     * Gets mps_external_id
     *
     * @return string
     */
    public function getMpsExternalId()
    {
        return $this->container['mps_external_id'];
    }

    /**
     * Sets mps_external_id
     *
     * @param string $mps_external_id Optional MobilePay Subscriptions id for subscription. Maximum 64 characters. For subscription sessions this will default to subscription handle.
     *
     * @return $this
     */
    public function setMpsExternalId($mps_external_id)
    {
        $this->container['mps_external_id'] = $mps_external_id;

        return $this;
    }

    /**
     * Gets mps_payment_description
     *
     * @return string
     */
    public function getMpsPaymentDescription()
    {
        return $this->container['mps_payment_description'];
    }

    /**
     * Sets mps_payment_description
     *
     * @param string $mps_payment_description Optional MobilePay Subscriptions description for payment created in conjunction with subscription signup. Maximum 60 characters. Defaults to shop name.
     *
     * @return $this
     */
    public function setMpsPaymentDescription($mps_payment_description)
    {
        $this->container['mps_payment_description'] = $mps_payment_description;

        return $this;
    }

    /**
     * Gets mps_cancel_redirect_url
     *
     * @return string
     */
    public function getMpsCancelRedirectUrl()
    {
        return $this->container['mps_cancel_redirect_url'];
    }

    /**
     * Sets mps_cancel_redirect_url
     *
     * @param string $mps_cancel_redirect_url Optional MobilePay Subscriptions merchant cancel redirect URL. If present user will not be able to cancel within app, but instead will be redirected to this url.
     *
     * @return $this
     */
    public function setMpsCancelRedirectUrl($mps_cancel_redirect_url)
    {
        $this->container['mps_cancel_redirect_url'] = $mps_cancel_redirect_url;

        return $this;
    }

    /**
     * Gets mpo_flow
     *
     * @return string
     */
    public function getMpoFlow()
    {
        return $this->container['mpo_flow'];
    }

    /**
     * Sets mpo_flow
     *
     * @param string $mpo_flow Optional MobilePay Online parameter to control if MobilePay should have a forced dual or single flow. IMPORTANT: MobilePay is deprecating this flag and will ignore it in future versions. FI: from January 2024, DK: from March 2024
     *
     * @return $this
     */
    public function setMpoFlow($mpo_flow)
    {
        $allowedValues = $this->getMpoFlowAllowableValues();
        if (!is_null($mpo_flow) && !in_array($mpo_flow, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mpo_flow', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mpo_flow'] = $mpo_flow;

        return $this;
    }

    /**
     * Gets alternative_return_url
     *
     * @return string
     */
    public function getAlternativeReturnUrl()
    {
        return $this->container['alternative_return_url'];
    }

    /**
     * Sets alternative_return_url
     *
     * @param string $alternative_return_url Alternative return url for MobilePay Online and Vipss wallet payments. Using this parameter the customer will be redirected from wallet payment directly to this URL, bypassing Reepay Checkout. Notice that the result of the payment is not part of the return url from the wallet providers, so the result of the charge must be fetched from Reepay API operation get charge. Using this option can give a smoother experience for app integrations. Notice that the return url can be an app scheme url.
     *
     * @return $this
     */
    public function setAlternativeReturnUrl($alternative_return_url)
    {
        $this->container['alternative_return_url'] = $alternative_return_url;

        return $this;
    }

    /**
     * Gets applepay_recurring_payment_start_date
     *
     * @return string
     */
    public function getApplepayRecurringPaymentStartDate()
    {
        return $this->container['applepay_recurring_payment_start_date'];
    }

    /**
     * Sets applepay_recurring_payment_start_date
     *
     * @param string $applepay_recurring_payment_start_date Optional Apple Pay recurring payment start date in format `yyyy-MM-dd` to be displayed to the user.
     *
     * @return $this
     */
    public function setApplepayRecurringPaymentStartDate($applepay_recurring_payment_start_date)
    {
        $this->container['applepay_recurring_payment_start_date'] = $applepay_recurring_payment_start_date;

        return $this;
    }

    /**
     * Gets applepay_recurring_payment_end_date
     *
     * @return string
     */
    public function getApplepayRecurringPaymentEndDate()
    {
        return $this->container['applepay_recurring_payment_end_date'];
    }

    /**
     * Sets applepay_recurring_payment_end_date
     *
     * @param string $applepay_recurring_payment_end_date Optional Apple Pay recurring payment end date in format `yyyy-MM-dd` to be displayed to the user.
     *
     * @return $this
     */
    public function setApplepayRecurringPaymentEndDate($applepay_recurring_payment_end_date)
    {
        $this->container['applepay_recurring_payment_end_date'] = $applepay_recurring_payment_end_date;

        return $this;
    }

    /**
     * Gets applepay_recurring_payment_interval_unit
     *
     * @return string
     */
    public function getApplepayRecurringPaymentIntervalUnit()
    {
        return $this->container['applepay_recurring_payment_interval_unit'];
    }

    /**
     * Sets applepay_recurring_payment_interval_unit
     *
     * @param string $applepay_recurring_payment_interval_unit Optional ApplePay recurring payment interval unit to be displayed to the user. One of the following values: `year`, `month`, or `day`. If not set, the value defaults to `month` in ApplePay.
     *
     * @return $this
     */
    public function setApplepayRecurringPaymentIntervalUnit($applepay_recurring_payment_interval_unit)
    {
        $allowedValues = $this->getApplepayRecurringPaymentIntervalUnitAllowableValues();
        if (!is_null($applepay_recurring_payment_interval_unit) && !in_array($applepay_recurring_payment_interval_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'applepay_recurring_payment_interval_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['applepay_recurring_payment_interval_unit'] = $applepay_recurring_payment_interval_unit;

        return $this;
    }

    /**
     * Gets applepay_recurring_payment_interval_count
     *
     * @return int
     */
    public function getApplepayRecurringPaymentIntervalCount()
    {
        return $this->container['applepay_recurring_payment_interval_count'];
    }

    /**
     * Sets applepay_recurring_payment_interval_count
     *
     * @param int $applepay_recurring_payment_interval_count Optional Apple Pay recurring payment interval count to be displayed to the user.
     *
     * @return $this
     */
    public function setApplepayRecurringPaymentIntervalCount($applepay_recurring_payment_interval_count)
    {
        $this->container['applepay_recurring_payment_interval_count'] = $applepay_recurring_payment_interval_count;

        return $this;
    }

    /**
     * Gets applepay_recurring_label
     *
     * @return string
     */
    public function getApplepayRecurringLabel()
    {
        return $this->container['applepay_recurring_label'];
    }

    /**
     * Sets applepay_recurring_label
     *
     * @param string $applepay_recurring_label Optional Apple Pay label to be displayed to the customer. Maximum 64 characters.
     *
     * @return $this
     */
    public function setApplepayRecurringLabel($applepay_recurring_label)
    {
        $this->container['applepay_recurring_label'] = $applepay_recurring_label;

        return $this;
    }

    /**
     * Gets applepay_recurring_amount
     *
     * @return int
     */
    public function getApplepayRecurringAmount()
    {
        return $this->container['applepay_recurring_amount'];
    }

    /**
     * Sets applepay_recurring_amount
     *
     * @param int $applepay_recurring_amount Optional value to define Apple Pay fixed recurring amount.
     *
     * @return $this
     */
    public function setApplepayRecurringAmount($applepay_recurring_amount)
    {
        $this->container['applepay_recurring_amount'] = $applepay_recurring_amount;

        return $this;
    }

    /**
     * Gets sepa_debtor_name
     *
     * @return string
     */
    public function getSepaDebtorName()
    {
        return $this->container['sepa_debtor_name'];
    }

    /**
     * Sets sepa_debtor_name
     *
     * @param string $sepa_debtor_name Optional SEPA debtor name.
     *
     * @return $this
     */
    public function setSepaDebtorName($sepa_debtor_name)
    {
        $this->container['sepa_debtor_name'] = $sepa_debtor_name;

        return $this;
    }

    /**
     * Gets sepa_debtor_address
     *
     * @return string
     */
    public function getSepaDebtorAddress()
    {
        return $this->container['sepa_debtor_address'];
    }

    /**
     * Sets sepa_debtor_address
     *
     * @param string $sepa_debtor_address Optional SEPA debtor address.
     *
     * @return $this
     */
    public function setSepaDebtorAddress($sepa_debtor_address)
    {
        $this->container['sepa_debtor_address'] = $sepa_debtor_address;

        return $this;
    }

    /**
     * Gets sepa_debtor_postal_code
     *
     * @return string
     */
    public function getSepaDebtorPostalCode()
    {
        return $this->container['sepa_debtor_postal_code'];
    }

    /**
     * Sets sepa_debtor_postal_code
     *
     * @param string $sepa_debtor_postal_code Optional SEPA debtor postal code.
     *
     * @return $this
     */
    public function setSepaDebtorPostalCode($sepa_debtor_postal_code)
    {
        $this->container['sepa_debtor_postal_code'] = $sepa_debtor_postal_code;

        return $this;
    }

    /**
     * Gets sepa_debtor_city
     *
     * @return string
     */
    public function getSepaDebtorCity()
    {
        return $this->container['sepa_debtor_city'];
    }

    /**
     * Sets sepa_debtor_city
     *
     * @param string $sepa_debtor_city Optional SEPA debtor city.
     *
     * @return $this
     */
    public function setSepaDebtorCity($sepa_debtor_city)
    {
        $this->container['sepa_debtor_city'] = $sepa_debtor_city;

        return $this;
    }

    /**
     * Gets sepa_debtor_country
     *
     * @return string
     */
    public function getSepaDebtorCountry()
    {
        return $this->container['sepa_debtor_country'];
    }

    /**
     * Sets sepa_debtor_country
     *
     * @param string $sepa_debtor_country Optional SEPA debtor country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     *
     * @return $this
     */
    public function setSepaDebtorCountry($sepa_debtor_country)
    {
        $this->container['sepa_debtor_country'] = $sepa_debtor_country;

        return $this;
    }

    /**
     * Gets sepa_debtor_iban
     *
     * @return string
     */
    public function getSepaDebtorIban()
    {
        return $this->container['sepa_debtor_iban'];
    }

    /**
     * Sets sepa_debtor_iban
     *
     * @param string $sepa_debtor_iban Optional SEPA debtor IBAN.
     *
     * @return $this
     */
    public function setSepaDebtorIban($sepa_debtor_iban)
    {
        $this->container['sepa_debtor_iban'] = $sepa_debtor_iban;

        return $this;
    }

    /**
     * Gets sepa_mandate_amount
     *
     * @return int
     */
    public function getSepaMandateAmount()
    {
        return $this->container['sepa_mandate_amount'];
    }

    /**
     * Sets sepa_mandate_amount
     *
     * @param int $sepa_mandate_amount Optional value to define SEPA fixed recurring amount.
     *
     * @return $this
     */
    public function setSepaMandateAmount($sepa_mandate_amount)
    {
        $this->container['sepa_mandate_amount'] = $sepa_mandate_amount;

        return $this;
    }

    /**
     * Gets vipps_recurring_amount
     *
     * @return int
     */
    public function getVippsRecurringAmount()
    {
        return $this->container['vipps_recurring_amount'];
    }

    /**
     * Sets vipps_recurring_amount
     *
     * @param int $vipps_recurring_amount Optional value to define Vipps Recurring fixed recurring amount in minor unit. For subscription sessions this will default to plan amount.
     *
     * @return $this
     */
    public function setVippsRecurringAmount($vipps_recurring_amount)
    {
        $this->container['vipps_recurring_amount'] = $vipps_recurring_amount;

        return $this;
    }

    /**
     * Gets vipps_recurring_product_name
     *
     * @return string
     */
    public function getVippsRecurringProductName()
    {
        return $this->container['vipps_recurring_product_name'];
    }

    /**
     * Sets vipps_recurring_product_name
     *
     * @param string $vipps_recurring_product_name Optional Vipps Recurring product name displayed to the customer. Maximum 45 characters. For subscription sessions this will default to plan name.
     *
     * @return $this
     */
    public function setVippsRecurringProductName($vipps_recurring_product_name)
    {
        $this->container['vipps_recurring_product_name'] = $vipps_recurring_product_name;

        return $this;
    }

    /**
     * Gets vipps_recurring_pricing_type
     *
     * @return string
     */
    public function getVippsRecurringPricingType()
    {
        return $this->container['vipps_recurring_pricing_type'];
    }

    /**
     * Sets vipps_recurring_pricing_type
     *
     * @param string $vipps_recurring_pricing_type Optional Vipps Recurring subscription pricing type. One of the following values: `legacy`, `variable`. Defaults to `legacy`.
     *
     * @return $this
     */
    public function setVippsRecurringPricingType($vipps_recurring_pricing_type)
    {
        $this->container['vipps_recurring_pricing_type'] = $vipps_recurring_pricing_type;

        return $this;
    }

    /**
     * Gets vipps_recurring_product_description
     *
     * @return string
     */
    public function getVippsRecurringProductDescription()
    {
        return $this->container['vipps_recurring_product_description'];
    }

    /**
     * Sets vipps_recurring_product_description
     *
     * @param string $vipps_recurring_product_description Optional Vipps Recurring additional product description displayed to the customer. Maximum 100 characters. For subscription sessions this will default to plan description.
     *
     * @return $this
     */
    public function setVippsRecurringProductDescription($vipps_recurring_product_description)
    {
        $this->container['vipps_recurring_product_description'] = $vipps_recurring_product_description;

        return $this;
    }

    /**
     * Gets vipps_recurring_interval_count
     *
     * @return int
     */
    public function getVippsRecurringIntervalCount()
    {
        return $this->container['vipps_recurring_interval_count'];
    }

    /**
     * Sets vipps_recurring_interval_count
     *
     * @param int $vipps_recurring_interval_count Optional Vipps Recurring payment interval count to be displayed to the customer. For subscription sessions this will default to plan interval length
     *
     * @return $this
     */
    public function setVippsRecurringIntervalCount($vipps_recurring_interval_count)
    {
        $this->container['vipps_recurring_interval_count'] = $vipps_recurring_interval_count;

        return $this;
    }

    /**
     * Gets vipps_recurring_interval_unit
     *
     * @return string
     */
    public function getVippsRecurringIntervalUnit()
    {
        return $this->container['vipps_recurring_interval_unit'];
    }

    /**
     * Sets vipps_recurring_interval_unit
     *
     * @param string $vipps_recurring_interval_unit Optional Vipps Recurring payment interval unit to be displayed to the customer. One of the following values: `year`, `month`, or `day`. For subscription sessions this will default to plan schedule type
     *
     * @return $this
     */
    public function setVippsRecurringIntervalUnit($vipps_recurring_interval_unit)
    {
        $this->container['vipps_recurring_interval_unit'] = $vipps_recurring_interval_unit;

        return $this;
    }

    /**
     * Gets vipps_recurring_initial_payment_description
     *
     * @return string
     */
    public function getVippsRecurringInitialPaymentDescription()
    {
        return $this->container['vipps_recurring_initial_payment_description'];
    }

    /**
     * Sets vipps_recurring_initial_payment_description
     *
     * @param string $vipps_recurring_initial_payment_description Optional Vipps Recurring description for initial payment created in conjunction with subscription signup.
     *
     * @return $this
     */
    public function setVippsRecurringInitialPaymentDescription($vipps_recurring_initial_payment_description)
    {
        $this->container['vipps_recurring_initial_payment_description'] = $vipps_recurring_initial_payment_description;

        return $this;
    }

    /**
     * Gets vipps_recurring_merchant_cancel_url
     *
     * @return string
     */
    public function getVippsRecurringMerchantCancelUrl()
    {
        return $this->container['vipps_recurring_merchant_cancel_url'];
    }

    /**
     * Sets vipps_recurring_merchant_cancel_url
     *
     * @param string $vipps_recurring_merchant_cancel_url Optional Vipps Recurring agreement cancel URL. If present this URL will override the URL set on the agreement.
     *
     * @return $this
     */
    public function setVippsRecurringMerchantCancelUrl($vipps_recurring_merchant_cancel_url)
    {
        $this->container['vipps_recurring_merchant_cancel_url'] = $vipps_recurring_merchant_cancel_url;

        return $this;
    }

    /**
     * Gets vipps_recurring_campaign_amount
     *
     * @return int
     */
    public function getVippsRecurringCampaignAmount()
    {
        return $this->container['vipps_recurring_campaign_amount'];
    }

    /**
     * Sets vipps_recurring_campaign_amount
     *
     * @param int $vipps_recurring_campaign_amount Optional amount for Vipps Recurring campaign in minor unit. For subscription sessions this will default to discount amount.
     *
     * @return $this
     */
    public function setVippsRecurringCampaignAmount($vipps_recurring_campaign_amount)
    {
        $this->container['vipps_recurring_campaign_amount'] = $vipps_recurring_campaign_amount;

        return $this;
    }

    /**
     * Gets vipps_recurring_campaign_interval_count
     *
     * @return int
     */
    public function getVippsRecurringCampaignIntervalCount()
    {
        return $this->container['vipps_recurring_campaign_interval_count'];
    }

    /**
     * Sets vipps_recurring_campaign_interval_count
     *
     * @param int $vipps_recurring_campaign_interval_count Conditional Vipps Recurring campaign interval count to be displayed to the customer.
     *
     * @return $this
     */
    public function setVippsRecurringCampaignIntervalCount($vipps_recurring_campaign_interval_count)
    {
        $this->container['vipps_recurring_campaign_interval_count'] = $vipps_recurring_campaign_interval_count;

        return $this;
    }

    /**
     * Gets vipps_recurring_campaign_interval_unit
     *
     * @return string
     */
    public function getVippsRecurringCampaignIntervalUnit()
    {
        return $this->container['vipps_recurring_campaign_interval_unit'];
    }

    /**
     * Sets vipps_recurring_campaign_interval_unit
     *
     * @param string $vipps_recurring_campaign_interval_unit Conditional Vipps Recurring campaign interval unit to be displayed to the customer. One of the following values: `year`, `month`, `week` or `day`.
     *
     * @return $this
     */
    public function setVippsRecurringCampaignIntervalUnit($vipps_recurring_campaign_interval_unit)
    {
        $this->container['vipps_recurring_campaign_interval_unit'] = $vipps_recurring_campaign_interval_unit;

        return $this;
    }

    /**
     * Gets vipps_recurring_campaign_end_date
     *
     * @return \DateTime
     */
    public function getVippsRecurringCampaignEndDate()
    {
        return $this->container['vipps_recurring_campaign_end_date'];
    }

    /**
     * Sets vipps_recurring_campaign_end_date
     *
     * @param \DateTime $vipps_recurring_campaign_end_date Conditional Vipps Recurring campaign end date to be displayed to the user.
     *
     * @return $this
     */
    public function setVippsRecurringCampaignEndDate($vipps_recurring_campaign_end_date)
    {
        $this->container['vipps_recurring_campaign_end_date'] = $vipps_recurring_campaign_end_date;

        return $this;
    }

    /**
     * Gets anyday_webshop_url
     *
     * @return string
     */
    public function getAnydayWebshopUrl()
    {
        return $this->container['anyday_webshop_url'];
    }

    /**
     * Sets anyday_webshop_url
     *
     * @param string $anyday_webshop_url Optional parameter for Anyday. Recommended to set if webshop has many domains.
     *
     * @return $this
     */
    public function setAnydayWebshopUrl($anyday_webshop_url)
    {
        $this->container['anyday_webshop_url'] = $anyday_webshop_url;

        return $this;
    }

    /**
     * Gets mpo_minimum_user_age
     *
     * @return int
     */
    public function getMpoMinimumUserAge()
    {
        return $this->container['mpo_minimum_user_age'];
    }

    /**
     * Sets mpo_minimum_user_age
     *
     * @param int $mpo_minimum_user_age Require MobilePay user age to be this age or above
     *
     * @return $this
     */
    public function setMpoMinimumUserAge($mpo_minimum_user_age)
    {
        $this->container['mpo_minimum_user_age'] = $mpo_minimum_user_age;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
