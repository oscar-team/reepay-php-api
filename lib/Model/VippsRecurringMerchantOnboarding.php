<?php
/**
 * VippsRecurringMerchantOnboarding
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * VippsRecurringMerchantOnboarding Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VippsRecurringMerchantOnboarding implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VippsRecurringMerchantOnboarding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'orgno' => 'string',
        'sales_unit_name' => 'string',
        'sales_unit_logo_url' => 'string',
        'settlement_account_number' => 'string',
        'price_package_id' => 'string',
        'product_type' => 'string',
        'product_use_case' => 'string',
        'annual_turnover' => 'int',
        'intended_purpose' => 'string',
        'website_url' => 'string',
        'website_terms_url' => 'string',
        'test_website_url' => 'string',
        'test_website_username' => 'string',
        'test_website_password' => 'string',
        'gift_card_is_sales_percentage_less_than_ten' => 'bool',
        'gift_card_validity_duration' => 'string',
        'gift_card_turnover_share' => 'string',
        'membership_turnover_share' => 'string',
        'membership_validity' => 'string',
        'membership_period_distribution' => 'string',
        'subscription_turnover_share' => 'string',
        'subscription_period_distribution' => 'string',
        'course_turnover_share' => 'string',
        'course_time_before_order' => 'string',
        'course_period' => 'string',
        'course_is_online_course_offered' => 'bool',
        'course_online_accessible_time' => 'string',
        'ticket_turnover_share' => 'string',
        'ticket_prepurchase_time' => 'string',
        'rent_turnover_share' => 'string',
        'rent_prepurchase_time' => 'string',
        'rent_average_rental_duration' => 'string',
        'prepaid_turnover_share' => 'string',
        'prepaid_prepurchase_time' => 'string',
        'accepts_donation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'orgno' => null,
        'sales_unit_name' => null,
        'sales_unit_logo_url' => null,
        'settlement_account_number' => null,
        'price_package_id' => null,
        'product_type' => null,
        'product_use_case' => null,
        'annual_turnover' => 'int32',
        'intended_purpose' => null,
        'website_url' => null,
        'website_terms_url' => null,
        'test_website_url' => null,
        'test_website_username' => null,
        'test_website_password' => null,
        'gift_card_is_sales_percentage_less_than_ten' => null,
        'gift_card_validity_duration' => null,
        'gift_card_turnover_share' => null,
        'membership_turnover_share' => null,
        'membership_validity' => null,
        'membership_period_distribution' => null,
        'subscription_turnover_share' => null,
        'subscription_period_distribution' => null,
        'course_turnover_share' => null,
        'course_time_before_order' => null,
        'course_period' => null,
        'course_is_online_course_offered' => null,
        'course_online_accessible_time' => null,
        'ticket_turnover_share' => null,
        'ticket_prepurchase_time' => null,
        'rent_turnover_share' => null,
        'rent_prepurchase_time' => null,
        'rent_average_rental_duration' => null,
        'prepaid_turnover_share' => null,
        'prepaid_prepurchase_time' => null,
        'accepts_donation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orgno' => 'orgno',
        'sales_unit_name' => 'salesUnitName',
        'sales_unit_logo_url' => 'salesUnitLogoUrl',
        'settlement_account_number' => 'settlementAccountNumber',
        'price_package_id' => 'pricePackageId',
        'product_type' => 'productType',
        'product_use_case' => 'productUseCase',
        'annual_turnover' => 'annualTurnover',
        'intended_purpose' => 'intendedPurpose',
        'website_url' => 'websiteUrl',
        'website_terms_url' => 'websiteTermsUrl',
        'test_website_url' => 'testWebsiteUrl',
        'test_website_username' => 'testWebsiteUsername',
        'test_website_password' => 'testWebsitePassword',
        'gift_card_is_sales_percentage_less_than_ten' => 'giftCardIsSalesPercentageLessThanTen',
        'gift_card_validity_duration' => 'giftCardValidityDuration',
        'gift_card_turnover_share' => 'giftCardTurnoverShare',
        'membership_turnover_share' => 'membershipTurnoverShare',
        'membership_validity' => 'membershipValidity',
        'membership_period_distribution' => 'membershipPeriodDistribution',
        'subscription_turnover_share' => 'subscriptionTurnoverShare',
        'subscription_period_distribution' => 'subscriptionPeriodDistribution',
        'course_turnover_share' => 'courseTurnoverShare',
        'course_time_before_order' => 'courseTimeBeforeOrder',
        'course_period' => 'coursePeriod',
        'course_is_online_course_offered' => 'courseIsOnlineCourseOffered',
        'course_online_accessible_time' => 'courseOnlineAccessibleTime',
        'ticket_turnover_share' => 'ticketTurnoverShare',
        'ticket_prepurchase_time' => 'ticketPrepurchaseTime',
        'rent_turnover_share' => 'rentTurnoverShare',
        'rent_prepurchase_time' => 'rentPrepurchaseTime',
        'rent_average_rental_duration' => 'rentAverageRentalDuration',
        'prepaid_turnover_share' => 'prepaidTurnoverShare',
        'prepaid_prepurchase_time' => 'prepaidPrepurchaseTime',
        'accepts_donation' => 'acceptsDonation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orgno' => 'setOrgno',
        'sales_unit_name' => 'setSalesUnitName',
        'sales_unit_logo_url' => 'setSalesUnitLogoUrl',
        'settlement_account_number' => 'setSettlementAccountNumber',
        'price_package_id' => 'setPricePackageId',
        'product_type' => 'setProductType',
        'product_use_case' => 'setProductUseCase',
        'annual_turnover' => 'setAnnualTurnover',
        'intended_purpose' => 'setIntendedPurpose',
        'website_url' => 'setWebsiteUrl',
        'website_terms_url' => 'setWebsiteTermsUrl',
        'test_website_url' => 'setTestWebsiteUrl',
        'test_website_username' => 'setTestWebsiteUsername',
        'test_website_password' => 'setTestWebsitePassword',
        'gift_card_is_sales_percentage_less_than_ten' => 'setGiftCardIsSalesPercentageLessThanTen',
        'gift_card_validity_duration' => 'setGiftCardValidityDuration',
        'gift_card_turnover_share' => 'setGiftCardTurnoverShare',
        'membership_turnover_share' => 'setMembershipTurnoverShare',
        'membership_validity' => 'setMembershipValidity',
        'membership_period_distribution' => 'setMembershipPeriodDistribution',
        'subscription_turnover_share' => 'setSubscriptionTurnoverShare',
        'subscription_period_distribution' => 'setSubscriptionPeriodDistribution',
        'course_turnover_share' => 'setCourseTurnoverShare',
        'course_time_before_order' => 'setCourseTimeBeforeOrder',
        'course_period' => 'setCoursePeriod',
        'course_is_online_course_offered' => 'setCourseIsOnlineCourseOffered',
        'course_online_accessible_time' => 'setCourseOnlineAccessibleTime',
        'ticket_turnover_share' => 'setTicketTurnoverShare',
        'ticket_prepurchase_time' => 'setTicketPrepurchaseTime',
        'rent_turnover_share' => 'setRentTurnoverShare',
        'rent_prepurchase_time' => 'setRentPrepurchaseTime',
        'rent_average_rental_duration' => 'setRentAverageRentalDuration',
        'prepaid_turnover_share' => 'setPrepaidTurnoverShare',
        'prepaid_prepurchase_time' => 'setPrepaidPrepurchaseTime',
        'accepts_donation' => 'setAcceptsDonation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orgno' => 'getOrgno',
        'sales_unit_name' => 'getSalesUnitName',
        'sales_unit_logo_url' => 'getSalesUnitLogoUrl',
        'settlement_account_number' => 'getSettlementAccountNumber',
        'price_package_id' => 'getPricePackageId',
        'product_type' => 'getProductType',
        'product_use_case' => 'getProductUseCase',
        'annual_turnover' => 'getAnnualTurnover',
        'intended_purpose' => 'getIntendedPurpose',
        'website_url' => 'getWebsiteUrl',
        'website_terms_url' => 'getWebsiteTermsUrl',
        'test_website_url' => 'getTestWebsiteUrl',
        'test_website_username' => 'getTestWebsiteUsername',
        'test_website_password' => 'getTestWebsitePassword',
        'gift_card_is_sales_percentage_less_than_ten' => 'getGiftCardIsSalesPercentageLessThanTen',
        'gift_card_validity_duration' => 'getGiftCardValidityDuration',
        'gift_card_turnover_share' => 'getGiftCardTurnoverShare',
        'membership_turnover_share' => 'getMembershipTurnoverShare',
        'membership_validity' => 'getMembershipValidity',
        'membership_period_distribution' => 'getMembershipPeriodDistribution',
        'subscription_turnover_share' => 'getSubscriptionTurnoverShare',
        'subscription_period_distribution' => 'getSubscriptionPeriodDistribution',
        'course_turnover_share' => 'getCourseTurnoverShare',
        'course_time_before_order' => 'getCourseTimeBeforeOrder',
        'course_period' => 'getCoursePeriod',
        'course_is_online_course_offered' => 'getCourseIsOnlineCourseOffered',
        'course_online_accessible_time' => 'getCourseOnlineAccessibleTime',
        'ticket_turnover_share' => 'getTicketTurnoverShare',
        'ticket_prepurchase_time' => 'getTicketPrepurchaseTime',
        'rent_turnover_share' => 'getRentTurnoverShare',
        'rent_prepurchase_time' => 'getRentPrepurchaseTime',
        'rent_average_rental_duration' => 'getRentAverageRentalDuration',
        'prepaid_turnover_share' => 'getPrepaidTurnoverShare',
        'prepaid_prepurchase_time' => 'getPrepaidPrepurchaseTime',
        'accepts_donation' => 'getAcceptsDonation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRODUCT_TYPE_PA_NETT = 'VIPPS_PA_NETT';
    const PRODUCT_TYPE_LOGG_INN = 'VIPPS_LOGG_INN';
    const PRODUCT_TYPE_CHECKOUT = 'VIPPS_CHECKOUT';
    const PRODUCT_TYPE_I_KASSA = 'VIPPS_I_KASSA';
    const PRODUCT_USE_CASE_WEBSITE = 'Website';
    const PRODUCT_USE_CASE_WEBSITE_WITH_TEST = 'WebsiteWithTest';
    const PRODUCT_USE_CASE_APP = 'App';
    const PRODUCT_USE_CASE_UNKNOWN = 'Unknown';
    const MEMBERSHIP_VALIDITY_CURRENT_CALENDAR_YEAR = 'CurrentCalendarYear';
    const MEMBERSHIP_VALIDITY_ONE_YEAR_FROM_PAYMENT = 'OneYearFromPayment';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_PA_NETT,
            self::PRODUCT_TYPE_LOGG_INN,
            self::PRODUCT_TYPE_CHECKOUT,
            self::PRODUCT_TYPE_I_KASSA,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductUseCaseAllowableValues()
    {
        return [
            self::PRODUCT_USE_CASE_WEBSITE,
            self::PRODUCT_USE_CASE_WEBSITE_WITH_TEST,
            self::PRODUCT_USE_CASE_APP,
            self::PRODUCT_USE_CASE_UNKNOWN,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMembershipValidityAllowableValues()
    {
        return [
            self::MEMBERSHIP_VALIDITY_CURRENT_CALENDAR_YEAR,
            self::MEMBERSHIP_VALIDITY_ONE_YEAR_FROM_PAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orgno'] = isset($data['orgno']) ? $data['orgno'] : null;
        $this->container['sales_unit_name'] = isset($data['sales_unit_name']) ? $data['sales_unit_name'] : null;
        $this->container['sales_unit_logo_url'] = isset($data['sales_unit_logo_url']) ? $data['sales_unit_logo_url'] : null;
        $this->container['settlement_account_number'] = isset($data['settlement_account_number']) ? $data['settlement_account_number'] : null;
        $this->container['price_package_id'] = isset($data['price_package_id']) ? $data['price_package_id'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['product_use_case'] = isset($data['product_use_case']) ? $data['product_use_case'] : null;
        $this->container['annual_turnover'] = isset($data['annual_turnover']) ? $data['annual_turnover'] : null;
        $this->container['intended_purpose'] = isset($data['intended_purpose']) ? $data['intended_purpose'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
        $this->container['website_terms_url'] = isset($data['website_terms_url']) ? $data['website_terms_url'] : null;
        $this->container['test_website_url'] = isset($data['test_website_url']) ? $data['test_website_url'] : null;
        $this->container['test_website_username'] = isset($data['test_website_username']) ? $data['test_website_username'] : null;
        $this->container['test_website_password'] = isset($data['test_website_password']) ? $data['test_website_password'] : null;
        $this->container['gift_card_is_sales_percentage_less_than_ten'] = isset($data['gift_card_is_sales_percentage_less_than_ten']) ? $data['gift_card_is_sales_percentage_less_than_ten'] : null;
        $this->container['gift_card_validity_duration'] = isset($data['gift_card_validity_duration']) ? $data['gift_card_validity_duration'] : null;
        $this->container['gift_card_turnover_share'] = isset($data['gift_card_turnover_share']) ? $data['gift_card_turnover_share'] : null;
        $this->container['membership_turnover_share'] = isset($data['membership_turnover_share']) ? $data['membership_turnover_share'] : null;
        $this->container['membership_validity'] = isset($data['membership_validity']) ? $data['membership_validity'] : null;
        $this->container['membership_period_distribution'] = isset($data['membership_period_distribution']) ? $data['membership_period_distribution'] : null;
        $this->container['subscription_turnover_share'] = isset($data['subscription_turnover_share']) ? $data['subscription_turnover_share'] : null;
        $this->container['subscription_period_distribution'] = isset($data['subscription_period_distribution']) ? $data['subscription_period_distribution'] : null;
        $this->container['course_turnover_share'] = isset($data['course_turnover_share']) ? $data['course_turnover_share'] : null;
        $this->container['course_time_before_order'] = isset($data['course_time_before_order']) ? $data['course_time_before_order'] : null;
        $this->container['course_period'] = isset($data['course_period']) ? $data['course_period'] : null;
        $this->container['course_is_online_course_offered'] = isset($data['course_is_online_course_offered']) ? $data['course_is_online_course_offered'] : null;
        $this->container['course_online_accessible_time'] = isset($data['course_online_accessible_time']) ? $data['course_online_accessible_time'] : null;
        $this->container['ticket_turnover_share'] = isset($data['ticket_turnover_share']) ? $data['ticket_turnover_share'] : null;
        $this->container['ticket_prepurchase_time'] = isset($data['ticket_prepurchase_time']) ? $data['ticket_prepurchase_time'] : null;
        $this->container['rent_turnover_share'] = isset($data['rent_turnover_share']) ? $data['rent_turnover_share'] : null;
        $this->container['rent_prepurchase_time'] = isset($data['rent_prepurchase_time']) ? $data['rent_prepurchase_time'] : null;
        $this->container['rent_average_rental_duration'] = isset($data['rent_average_rental_duration']) ? $data['rent_average_rental_duration'] : null;
        $this->container['prepaid_turnover_share'] = isset($data['prepaid_turnover_share']) ? $data['prepaid_turnover_share'] : null;
        $this->container['prepaid_prepurchase_time'] = isset($data['prepaid_prepurchase_time']) ? $data['prepaid_prepurchase_time'] : null;
        $this->container['accepts_donation'] = isset($data['accepts_donation']) ? $data['accepts_donation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['orgno'] === null) {
            $invalidProperties[] = "'orgno' can't be null";
        }
        if ($this->container['product_type'] === null) {
            $invalidProperties[] = "'product_type' can't be null";
        }
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($this->container['product_type']) && !in_array($this->container['product_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'product_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProductUseCaseAllowableValues();
        if (!is_null($this->container['product_use_case']) && !in_array($this->container['product_use_case'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'product_use_case', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMembershipValidityAllowableValues();
        if (!is_null($this->container['membership_validity']) && !in_array($this->container['membership_validity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'membership_validity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orgno
     *
     * @return string
     */
    public function getOrgno()
    {
        return $this->container['orgno'];
    }

    /**
     * Sets orgno
     *
     * @param string $orgno Organisation number of the merchant for whom the partner is submitting the product order. Only Norwegian organization numbers are allowed (for now).
     *
     * @return $this
     */
    public function setOrgno($orgno)
    {
        $this->container['orgno'] = $orgno;

        return $this;
    }

    /**
     * Gets sales_unit_name
     *
     * @return string
     */
    public function getSalesUnitName()
    {
        return $this->container['sales_unit_name'];
    }

    /**
     * Sets sales_unit_name
     *
     * @param string $sales_unit_name The name of the point of sale that will be shown to the users in the Vipps app and on the Vipps landing page. The sales unit name can be edited later on portal.vipps.no.
     *
     * @return $this
     */
    public function setSalesUnitName($sales_unit_name)
    {
        $this->container['sales_unit_name'] = $sales_unit_name;

        return $this;
    }

    /**
     * Gets sales_unit_logo_url
     *
     * @return string
     */
    public function getSalesUnitLogoUrl()
    {
        return $this->container['sales_unit_logo_url'];
    }

    /**
     * Sets sales_unit_logo_url
     *
     * @param string $sales_unit_logo_url Merchant logo url. The logo will be displayed in the Vipps app, both when paying and on receipts and also in Vipps landing page. The logo must be in PNG (Portable Network Graphics) format. Square images are recommended. The longest side can not be more than 1000 pixels. The minimum size is 100 x 100 pixels. Images not matching the above criteria will not be shown to the merchant in the merchant portal. The logo can be edited later on portal.vipps.no.
     *
     * @return $this
     */
    public function setSalesUnitLogoUrl($sales_unit_logo_url)
    {
        $this->container['sales_unit_logo_url'] = $sales_unit_logo_url;

        return $this;
    }

    /**
     * Gets settlement_account_number
     *
     * @return string
     */
    public function getSettlementAccountNumber()
    {
        return $this->container['settlement_account_number'];
    }

    /**
     * Sets settlement_account_number
     *
     * @param string $settlement_account_number The bank account number belonging to the organisation that will be used for settlement. The bank account must be owned by the merchant. BBAN (not IBAN) format.
     *
     * @return $this
     */
    public function setSettlementAccountNumber($settlement_account_number)
    {
        $this->container['settlement_account_number'] = $settlement_account_number;

        return $this;
    }

    /**
     * Gets price_package_id
     *
     * @return string
     */
    public function getPricePackageId()
    {
        return $this->container['price_package_id'];
    }

    /**
     * Sets price_package_id
     *
     * @param string $price_package_id Only for productType: VIPPS_PA_NETT and VIPPS_I_KASSA. The id for one of the price packages that are registered for the partner in the Vipps system. Please note: This is a UUID, not the 3-digit key. If this field is not provided, the merchant must select the price manually.
     *
     * @return $this
     */
    public function setPricePackageId($price_package_id)
    {
        $this->container['price_package_id'] = $price_package_id;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string $product_type The type of product ordered for the merchant.
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!in_array($product_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets product_use_case
     *
     * @return string
     */
    public function getProductUseCase()
    {
        return $this->container['product_use_case'];
    }

    /**
     * Sets product_use_case
     *
     * @param string $product_use_case Where will sales take place? A website? A website that is not yet launched, so a test website must be used? A native app? Something else?
     *
     * @return $this
     */
    public function setProductUseCase($product_use_case)
    {
        $allowedValues = $this->getProductUseCaseAllowableValues();
        if (!is_null($product_use_case) && !in_array($product_use_case, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_use_case', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_use_case'] = $product_use_case;

        return $this;
    }

    /**
     * Gets annual_turnover
     *
     * @return int
     */
    public function getAnnualTurnover()
    {
        return $this->container['annual_turnover'];
    }

    /**
     * Sets annual_turnover
     *
     * @param int $annual_turnover Annual turnover for the merchant in NOK (without øre).
     *
     * @return $this
     */
    public function setAnnualTurnover($annual_turnover)
    {
        $this->container['annual_turnover'] = $annual_turnover;

        return $this;
    }

    /**
     * Gets intended_purpose
     *
     * @return string
     */
    public function getIntendedPurpose()
    {
        return $this->container['intended_purpose'];
    }

    /**
     * Sets intended_purpose
     *
     * @param string $intended_purpose Description of the product or products that will be sold. Please include all information relevant to processing the product order, such as including \"POS integration\" to indicate that the sales unit needs skipLandingPage.
     *
     * @return $this
     */
    public function setIntendedPurpose($intended_purpose)
    {
        $this->container['intended_purpose'] = $intended_purpose;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string $website_url For 'WebsiteWithTest' or 'Website'. The URL to the merchant's website.
     *
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets website_terms_url
     *
     * @return string
     */
    public function getWebsiteTermsUrl()
    {
        return $this->container['website_terms_url'];
    }

    /**
     * Sets website_terms_url
     *
     * @param string $website_terms_url The URL that points to the merchants sales terms.
     *
     * @return $this
     */
    public function setWebsiteTermsUrl($website_terms_url)
    {
        $this->container['website_terms_url'] = $website_terms_url;

        return $this;
    }

    /**
     * Gets test_website_url
     *
     * @return string
     */
    public function getTestWebsiteUrl()
    {
        return $this->container['test_website_url'];
    }

    /**
     * Sets test_website_url
     *
     * @param string $test_website_url For 'WebsiteWithTest'. The URL to the merchants test website
     *
     * @return $this
     */
    public function setTestWebsiteUrl($test_website_url)
    {
        $this->container['test_website_url'] = $test_website_url;

        return $this;
    }

    /**
     * Gets test_website_username
     *
     * @return string
     */
    public function getTestWebsiteUsername()
    {
        return $this->container['test_website_username'];
    }

    /**
     * Sets test_website_username
     *
     * @param string $test_website_username For 'WebsiteWithTest'. Username to log in on the test website
     *
     * @return $this
     */
    public function setTestWebsiteUsername($test_website_username)
    {
        $this->container['test_website_username'] = $test_website_username;

        return $this;
    }

    /**
     * Gets test_website_password
     *
     * @return string
     */
    public function getTestWebsitePassword()
    {
        return $this->container['test_website_password'];
    }

    /**
     * Sets test_website_password
     *
     * @param string $test_website_password For 'WebsiteWithTest'. Password to log in on the test website
     *
     * @return $this
     */
    public function setTestWebsitePassword($test_website_password)
    {
        $this->container['test_website_password'] = $test_website_password;

        return $this;
    }

    /**
     * Gets gift_card_is_sales_percentage_less_than_ten
     *
     * @return bool
     */
    public function getGiftCardIsSalesPercentageLessThanTen()
    {
        return $this->container['gift_card_is_sales_percentage_less_than_ten'];
    }

    /**
     * Sets gift_card_is_sales_percentage_less_than_ten
     *
     * @param bool $gift_card_is_sales_percentage_less_than_ten The percentage the giftcard sales consists of. Either 'Less than 10%' or '10% and more'
     *
     * @return $this
     */
    public function setGiftCardIsSalesPercentageLessThanTen($gift_card_is_sales_percentage_less_than_ten)
    {
        $this->container['gift_card_is_sales_percentage_less_than_ten'] = $gift_card_is_sales_percentage_less_than_ten;

        return $this;
    }

    /**
     * Gets gift_card_validity_duration
     *
     * @return string
     */
    public function getGiftCardValidityDuration()
    {
        return $this->container['gift_card_validity_duration'];
    }

    /**
     * Sets gift_card_validity_duration
     *
     * @param string $gift_card_validity_duration If 'giftCardIsSalesPercentageLessThanTen' is true: For how long is the gift card valid after purchase?
     *
     * @return $this
     */
    public function setGiftCardValidityDuration($gift_card_validity_duration)
    {
        $this->container['gift_card_validity_duration'] = $gift_card_validity_duration;

        return $this;
    }

    /**
     * Gets gift_card_turnover_share
     *
     * @return string
     */
    public function getGiftCardTurnoverShare()
    {
        return $this->container['gift_card_turnover_share'];
    }

    /**
     * Sets gift_card_turnover_share
     *
     * @param string $gift_card_turnover_share If 'giftCardIsSalesPercentageLessThanTen' is true: What percentage of total sales are giftcards?
     *
     * @return $this
     */
    public function setGiftCardTurnoverShare($gift_card_turnover_share)
    {
        $this->container['gift_card_turnover_share'] = $gift_card_turnover_share;

        return $this;
    }

    /**
     * Gets membership_turnover_share
     *
     * @return string
     */
    public function getMembershipTurnoverShare()
    {
        return $this->container['membership_turnover_share'];
    }

    /**
     * Sets membership_turnover_share
     *
     * @param string $membership_turnover_share Estimated turnover share of membership sales in percentage
     *
     * @return $this
     */
    public function setMembershipTurnoverShare($membership_turnover_share)
    {
        $this->container['membership_turnover_share'] = $membership_turnover_share;

        return $this;
    }

    /**
     * Gets membership_validity
     *
     * @return string
     */
    public function getMembershipValidity()
    {
        return $this->container['membership_validity'];
    }

    /**
     * Sets membership_validity
     *
     * @param string $membership_validity Is the membership valid from the current calendar year or 1 year from payment?
     *
     * @return $this
     */
    public function setMembershipValidity($membership_validity)
    {
        $allowedValues = $this->getMembershipValidityAllowableValues();
        if (!is_null($membership_validity) && !in_array($membership_validity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'membership_validity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['membership_validity'] = $membership_validity;

        return $this;
    }

    /**
     * Gets membership_period_distribution
     *
     * @return string
     */
    public function getMembershipPeriodDistribution()
    {
        return $this->container['membership_period_distribution'];
    }

    /**
     * Sets membership_period_distribution
     *
     * @param string $membership_period_distribution Distribution of memberships in different periods that is being sold
     *
     * @return $this
     */
    public function setMembershipPeriodDistribution($membership_period_distribution)
    {
        $this->container['membership_period_distribution'] = $membership_period_distribution;

        return $this;
    }

    /**
     * Gets subscription_turnover_share
     *
     * @return string
     */
    public function getSubscriptionTurnoverShare()
    {
        return $this->container['subscription_turnover_share'];
    }

    /**
     * Sets subscription_turnover_share
     *
     * @param string $subscription_turnover_share Estimated turnover share of subscription sales in percentage
     *
     * @return $this
     */
    public function setSubscriptionTurnoverShare($subscription_turnover_share)
    {
        $this->container['subscription_turnover_share'] = $subscription_turnover_share;

        return $this;
    }

    /**
     * Gets subscription_period_distribution
     *
     * @return string
     */
    public function getSubscriptionPeriodDistribution()
    {
        return $this->container['subscription_period_distribution'];
    }

    /**
     * Sets subscription_period_distribution
     *
     * @param string $subscription_period_distribution Distribution of subscriptions in different periods that is being sold
     *
     * @return $this
     */
    public function setSubscriptionPeriodDistribution($subscription_period_distribution)
    {
        $this->container['subscription_period_distribution'] = $subscription_period_distribution;

        return $this;
    }

    /**
     * Gets course_turnover_share
     *
     * @return string
     */
    public function getCourseTurnoverShare()
    {
        return $this->container['course_turnover_share'];
    }

    /**
     * Sets course_turnover_share
     *
     * @param string $course_turnover_share Estimated turnover share of course sales in percentage
     *
     * @return $this
     */
    public function setCourseTurnoverShare($course_turnover_share)
    {
        $this->container['course_turnover_share'] = $course_turnover_share;

        return $this;
    }

    /**
     * Gets course_time_before_order
     *
     * @return string
     */
    public function getCourseTimeBeforeOrder()
    {
        return $this->container['course_time_before_order'];
    }

    /**
     * Sets course_time_before_order
     *
     * @param string $course_time_before_order How long in advance it is common to order and pay for a course
     *
     * @return $this
     */
    public function setCourseTimeBeforeOrder($course_time_before_order)
    {
        $this->container['course_time_before_order'] = $course_time_before_order;

        return $this;
    }

    /**
     * Gets course_period
     *
     * @return string
     */
    public function getCoursePeriod()
    {
        return $this->container['course_period'];
    }

    /**
     * Sets course_period
     *
     * @param string $course_period How long the duration of a course usually is
     *
     * @return $this
     */
    public function setCoursePeriod($course_period)
    {
        $this->container['course_period'] = $course_period;

        return $this;
    }

    /**
     * Gets course_is_online_course_offered
     *
     * @return bool
     */
    public function getCourseIsOnlineCourseOffered()
    {
        return $this->container['course_is_online_course_offered'];
    }

    /**
     * Sets course_is_online_course_offered
     *
     * @param bool $course_is_online_course_offered True if there are online courses offered
     *
     * @return $this
     */
    public function setCourseIsOnlineCourseOffered($course_is_online_course_offered)
    {
        $this->container['course_is_online_course_offered'] = $course_is_online_course_offered;

        return $this;
    }

    /**
     * Gets course_online_accessible_time
     *
     * @return string
     */
    public function getCourseOnlineAccessibleTime()
    {
        return $this->container['course_online_accessible_time'];
    }

    /**
     * Sets course_online_accessible_time
     *
     * @param string $course_online_accessible_time How long after purchase does a user have access to the course
     *
     * @return $this
     */
    public function setCourseOnlineAccessibleTime($course_online_accessible_time)
    {
        $this->container['course_online_accessible_time'] = $course_online_accessible_time;

        return $this;
    }

    /**
     * Gets ticket_turnover_share
     *
     * @return string
     */
    public function getTicketTurnoverShare()
    {
        return $this->container['ticket_turnover_share'];
    }

    /**
     * Sets ticket_turnover_share
     *
     * @param string $ticket_turnover_share Estimated turnover share of ticket sales in percentage
     *
     * @return $this
     */
    public function setTicketTurnoverShare($ticket_turnover_share)
    {
        $this->container['ticket_turnover_share'] = $ticket_turnover_share;

        return $this;
    }

    /**
     * Gets ticket_prepurchase_time
     *
     * @return string
     */
    public function getTicketPrepurchaseTime()
    {
        return $this->container['ticket_prepurchase_time'];
    }

    /**
     * Sets ticket_prepurchase_time
     *
     * @param string $ticket_prepurchase_time How long in advance of an event it is common to order and pay for a ticket
     *
     * @return $this
     */
    public function setTicketPrepurchaseTime($ticket_prepurchase_time)
    {
        $this->container['ticket_prepurchase_time'] = $ticket_prepurchase_time;

        return $this;
    }

    /**
     * Gets rent_turnover_share
     *
     * @return string
     */
    public function getRentTurnoverShare()
    {
        return $this->container['rent_turnover_share'];
    }

    /**
     * Sets rent_turnover_share
     *
     * @param string $rent_turnover_share Estimated turnover share of rent sales in percentage
     *
     * @return $this
     */
    public function setRentTurnoverShare($rent_turnover_share)
    {
        $this->container['rent_turnover_share'] = $rent_turnover_share;

        return $this;
    }

    /**
     * Gets rent_prepurchase_time
     *
     * @return string
     */
    public function getRentPrepurchaseTime()
    {
        return $this->container['rent_prepurchase_time'];
    }

    /**
     * Sets rent_prepurchase_time
     *
     * @param string $rent_prepurchase_time How long in advance of the rental period it is common to order and pay
     *
     * @return $this
     */
    public function setRentPrepurchaseTime($rent_prepurchase_time)
    {
        $this->container['rent_prepurchase_time'] = $rent_prepurchase_time;

        return $this;
    }

    /**
     * Gets rent_average_rental_duration
     *
     * @return string
     */
    public function getRentAverageRentalDuration()
    {
        return $this->container['rent_average_rental_duration'];
    }

    /**
     * Sets rent_average_rental_duration
     *
     * @param string $rent_average_rental_duration How long the average rental period is
     *
     * @return $this
     */
    public function setRentAverageRentalDuration($rent_average_rental_duration)
    {
        $this->container['rent_average_rental_duration'] = $rent_average_rental_duration;

        return $this;
    }

    /**
     * Gets prepaid_turnover_share
     *
     * @return string
     */
    public function getPrepaidTurnoverShare()
    {
        return $this->container['prepaid_turnover_share'];
    }

    /**
     * Sets prepaid_turnover_share
     *
     * @param string $prepaid_turnover_share Estimated turnover share of prepaid services sales in percentage
     *
     * @return $this
     */
    public function setPrepaidTurnoverShare($prepaid_turnover_share)
    {
        $this->container['prepaid_turnover_share'] = $prepaid_turnover_share;

        return $this;
    }

    /**
     * Gets prepaid_prepurchase_time
     *
     * @return string
     */
    public function getPrepaidPrepurchaseTime()
    {
        return $this->container['prepaid_prepurchase_time'];
    }

    /**
     * Sets prepaid_prepurchase_time
     *
     * @param string $prepaid_prepurchase_time How long in advance of a service it is common to order and pay
     *
     * @return $this
     */
    public function setPrepaidPrepurchaseTime($prepaid_prepurchase_time)
    {
        $this->container['prepaid_prepurchase_time'] = $prepaid_prepurchase_time;

        return $this;
    }

    /**
     * Gets accepts_donation
     *
     * @return bool
     */
    public function getAcceptsDonation()
    {
        return $this->container['accepts_donation'];
    }

    /**
     * Sets accepts_donation
     *
     * @param bool $accepts_donation true if merchant will receive donation through Vipps
     *
     * @return $this
     */
    public function setAcceptsDonation($accepts_donation)
    {
        $this->container['accepts_donation'] = $accepts_donation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
