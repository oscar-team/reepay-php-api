<?php
/**
 * ScaBrowserInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Reepay Checkout API
 *
 * Reepay Checkout REST API
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Model;

use \ArrayAccess;
use \Reepay\ObjectSerializer;

/**
 * ScaBrowserInfo Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScaBrowserInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScaBrowserInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'javascript_enabled' => 'bool',
        'challenge_window_size' => 'string',
        'color_depth' => 'string',
        'java_enabled' => 'bool',
        'screen_height' => 'string',
        'screen_width' => 'string',
        'tz' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'javascript_enabled' => null,
        'challenge_window_size' => null,
        'color_depth' => null,
        'java_enabled' => null,
        'screen_height' => null,
        'screen_width' => null,
        'tz' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'javascript_enabled' => 'javascriptEnabled',
        'challenge_window_size' => 'challengeWindowSize',
        'color_depth' => 'colorDepth',
        'java_enabled' => 'javaEnabled',
        'screen_height' => 'screenHeight',
        'screen_width' => 'screenWidth',
        'tz' => 'tz'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'javascript_enabled' => 'setJavascriptEnabled',
        'challenge_window_size' => 'setChallengeWindowSize',
        'color_depth' => 'setColorDepth',
        'java_enabled' => 'setJavaEnabled',
        'screen_height' => 'setScreenHeight',
        'screen_width' => 'setScreenWidth',
        'tz' => 'setTz'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'javascript_enabled' => 'getJavascriptEnabled',
        'challenge_window_size' => 'getChallengeWindowSize',
        'color_depth' => 'getColorDepth',
        'java_enabled' => 'getJavaEnabled',
        'screen_height' => 'getScreenHeight',
        'screen_width' => 'getScreenWidth',
        'tz' => 'getTz'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['javascript_enabled'] = isset($data['javascript_enabled']) ? $data['javascript_enabled'] : null;
        $this->container['challenge_window_size'] = isset($data['challenge_window_size']) ? $data['challenge_window_size'] : null;
        $this->container['color_depth'] = isset($data['color_depth']) ? $data['color_depth'] : null;
        $this->container['java_enabled'] = isset($data['java_enabled']) ? $data['java_enabled'] : null;
        $this->container['screen_height'] = isset($data['screen_height']) ? $data['screen_height'] : null;
        $this->container['screen_width'] = isset($data['screen_width']) ? $data['screen_width'] : null;
        $this->container['tz'] = isset($data['tz']) ? $data['tz'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['javascript_enabled'] === null) {
            $invalidProperties[] = "'javascript_enabled' can't be null";
        }
        if ($this->container['challenge_window_size'] === null) {
            $invalidProperties[] = "'challenge_window_size' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets javascript_enabled
     *
     * @return bool
     */
    public function getJavascriptEnabled()
    {
        return $this->container['javascript_enabled'];
    }

    /**
     * Sets javascript_enabled
     *
     * @param bool $javascript_enabled javascript_enabled
     *
     * @return $this
     */
    public function setJavascriptEnabled($javascript_enabled)
    {
        $this->container['javascript_enabled'] = $javascript_enabled;

        return $this;
    }

    /**
     * Gets challenge_window_size
     *
     * @return string
     */
    public function getChallengeWindowSize()
    {
        return $this->container['challenge_window_size'];
    }

    /**
     * Sets challenge_window_size
     *
     * @param string $challenge_window_size challenge_window_size
     *
     * @return $this
     */
    public function setChallengeWindowSize($challenge_window_size)
    {
        $this->container['challenge_window_size'] = $challenge_window_size;

        return $this;
    }

    /**
     * Gets color_depth
     *
     * @return string
     */
    public function getColorDepth()
    {
        return $this->container['color_depth'];
    }

    /**
     * Sets color_depth
     *
     * @param string $color_depth color_depth
     *
     * @return $this
     */
    public function setColorDepth($color_depth)
    {
        $this->container['color_depth'] = $color_depth;

        return $this;
    }

    /**
     * Gets java_enabled
     *
     * @return bool
     */
    public function getJavaEnabled()
    {
        return $this->container['java_enabled'];
    }

    /**
     * Sets java_enabled
     *
     * @param bool $java_enabled java_enabled
     *
     * @return $this
     */
    public function setJavaEnabled($java_enabled)
    {
        $this->container['java_enabled'] = $java_enabled;

        return $this;
    }

    /**
     * Gets screen_height
     *
     * @return string
     */
    public function getScreenHeight()
    {
        return $this->container['screen_height'];
    }

    /**
     * Sets screen_height
     *
     * @param string $screen_height screen_height
     *
     * @return $this
     */
    public function setScreenHeight($screen_height)
    {
        $this->container['screen_height'] = $screen_height;

        return $this;
    }

    /**
     * Gets screen_width
     *
     * @return string
     */
    public function getScreenWidth()
    {
        return $this->container['screen_width'];
    }

    /**
     * Sets screen_width
     *
     * @param string $screen_width screen_width
     *
     * @return $this
     */
    public function setScreenWidth($screen_width)
    {
        $this->container['screen_width'] = $screen_width;

        return $this;
    }

    /**
     * Gets tz
     *
     * @return string
     */
    public function getTz()
    {
        return $this->container['tz'];
    }

    /**
     * Sets tz
     *
     * @param string $tz tz
     *
     * @return $this
     */
    public function setTz($tz)
    {
        $this->container['tz'] = $tz;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
