<?php
/**
 * ListApi
 * PHP version 5
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * REST API to manage Reepay resources
 *
 * OpenAPI spec version: 1
 * Contact: open.source@driveoscar.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Reepay\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Reepay\ApiException;
use Reepay\Configuration;
use Reepay\HeaderSelector;
use Reepay\ObjectSerializer;

/**
 * ListApi Class Doc Comment
 *
 * @category Class
 * @package  Reepay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAddOnList
     *
     * Get list of add-ons
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string $handle handle (optional)
     * @param  string $handle_prefix handle_prefix (optional)
     * @param  string $state state (optional, default to active)
     * @param  string $type type (optional)
     * @param  string $name name (optional)
     * @param  string $description description (optional)
     * @param  string $amount amount (optional)
     * @param  string $amount_incl_vat amount_incl_vat (optional)
     * @param  string $all_plans all_plans (optional)
     * @param  string[] $currency currency (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\AddOnList
     */
    public function getAddOnList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = 'active', $type = null, $name = null, $description = null, $amount = null, $amount_incl_vat = null, $all_plans = null, $currency = null)
    {
        list($response) = $this->getAddOnListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $type, $name, $description, $amount, $amount_incl_vat, $all_plans, $currency);
        return $response;
    }

    /**
     * Operation getAddOnListWithHttpInfo
     *
     * Get list of add-ons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $state (optional, default to active)
     * @param  string $type (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $all_plans (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\AddOnList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAddOnListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = 'active', $type = null, $name = null, $description = null, $amount = null, $amount_incl_vat = null, $all_plans = null, $currency = null)
    {
        $returnType = '\Reepay\Model\AddOnList';
        $request = $this->getAddOnListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $type, $name, $description, $amount, $amount_incl_vat, $all_plans, $currency);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\AddOnList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAddOnListAsync
     *
     * Get list of add-ons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $state (optional, default to active)
     * @param  string $type (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $all_plans (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddOnListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = 'active', $type = null, $name = null, $description = null, $amount = null, $amount_incl_vat = null, $all_plans = null, $currency = null)
    {
        return $this->getAddOnListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $type, $name, $description, $amount, $amount_incl_vat, $all_plans, $currency)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAddOnListAsyncWithHttpInfo
     *
     * Get list of add-ons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $state (optional, default to active)
     * @param  string $type (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $all_plans (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddOnListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = 'active', $type = null, $name = null, $description = null, $amount = null, $amount_incl_vat = null, $all_plans = null, $currency = null)
    {
        $returnType = '\Reepay\Model\AddOnList';
        $request = $this->getAddOnListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $type, $name, $description, $amount, $amount_incl_vat, $all_plans, $currency);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAddOnList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $state (optional, default to active)
     * @param  string $type (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $all_plans (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAddOnListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = 'active', $type = null, $name = null, $description = null, $amount = null, $amount_incl_vat = null, $all_plans = null, $currency = null)
    {

        $resourcePath = '/v1/list/add_on';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }
        // query params
        if ($handle_prefix !== null) {
            $queryParams['handle_prefix'] = ObjectSerializer::toQueryValue($handle_prefix, null);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description, null);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if ($amount_incl_vat !== null) {
            $queryParams['amount_incl_vat'] = ObjectSerializer::toQueryValue($amount_incl_vat, null);
        }
        // query params
        if ($all_plans !== null) {
            $queryParams['all_plans'] = ObjectSerializer::toQueryValue($all_plans, null);
        }
        // query params
        if (is_array($currency)) {
            $currency = ObjectSerializer::serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = ObjectSerializer::toQueryValue($currency, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChargeList
     *
     * Get list of charges
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string $handle handle (optional)
     * @param  string $handle_prefix handle_prefix (optional)
     * @param  string $handle_contains handle_contains (optional)
     * @param  string $accounting_number accounting_number (optional)
     * @param  string $accounting_number_prefix accounting_number_prefix (optional)
     * @param  string $accounting_number_contains accounting_number_contains (optional)
     * @param  string[] $state state (optional)
     * @param  string[] $exclude_state exclude_state (optional)
     * @param  string $customer customer (optional)
     * @param  string $amount amount (optional)
     * @param  string $refunded_amount refunded_amount (optional)
     * @param  string $authorized_amount authorized_amount (optional)
     * @param  string[] $currency currency (optional)
     * @param  bool $partial_settled partial_settled (optional)
     * @param  string $settled_amount settled_amount (optional)
     * @param  string $debtor_id debtor_id (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\ChargeList
     */
    public function getChargeList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $settled_amount = null, $debtor_id = null)
    {
        list($response) = $this->getChargeListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $state, $exclude_state, $customer, $amount, $refunded_amount, $authorized_amount, $currency, $partial_settled, $settled_amount, $debtor_id);
        return $response;
    }

    /**
     * Operation getChargeListWithHttpInfo
     *
     * Get list of charges
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $accounting_number (optional)
     * @param  string $accounting_number_prefix (optional)
     * @param  string $accounting_number_contains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $exclude_state (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $authorized_amount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partial_settled (optional)
     * @param  string $settled_amount (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\ChargeList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChargeListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $settled_amount = null, $debtor_id = null)
    {
        $returnType = '\Reepay\Model\ChargeList';
        $request = $this->getChargeListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $state, $exclude_state, $customer, $amount, $refunded_amount, $authorized_amount, $currency, $partial_settled, $settled_amount, $debtor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ChargeList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChargeListAsync
     *
     * Get list of charges
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $accounting_number (optional)
     * @param  string $accounting_number_prefix (optional)
     * @param  string $accounting_number_contains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $exclude_state (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $authorized_amount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partial_settled (optional)
     * @param  string $settled_amount (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChargeListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $settled_amount = null, $debtor_id = null)
    {
        return $this->getChargeListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $state, $exclude_state, $customer, $amount, $refunded_amount, $authorized_amount, $currency, $partial_settled, $settled_amount, $debtor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChargeListAsyncWithHttpInfo
     *
     * Get list of charges
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $accounting_number (optional)
     * @param  string $accounting_number_prefix (optional)
     * @param  string $accounting_number_contains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $exclude_state (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $authorized_amount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partial_settled (optional)
     * @param  string $settled_amount (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChargeListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $settled_amount = null, $debtor_id = null)
    {
        $returnType = '\Reepay\Model\ChargeList';
        $request = $this->getChargeListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $state, $exclude_state, $customer, $amount, $refunded_amount, $authorized_amount, $currency, $partial_settled, $settled_amount, $debtor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChargeList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $accounting_number (optional)
     * @param  string $accounting_number_prefix (optional)
     * @param  string $accounting_number_contains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $exclude_state (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $authorized_amount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partial_settled (optional)
     * @param  string $settled_amount (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getChargeListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $settled_amount = null, $debtor_id = null)
    {

        $resourcePath = '/v1/list/charge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }
        // query params
        if ($handle_prefix !== null) {
            $queryParams['handle_prefix'] = ObjectSerializer::toQueryValue($handle_prefix, null);
        }
        // query params
        if ($handle_contains !== null) {
            $queryParams['handle_contains'] = ObjectSerializer::toQueryValue($handle_contains, null);
        }
        // query params
        if ($accounting_number !== null) {
            $queryParams['accounting_number'] = ObjectSerializer::toQueryValue($accounting_number, null);
        }
        // query params
        if ($accounting_number_prefix !== null) {
            $queryParams['accounting_number_prefix'] = ObjectSerializer::toQueryValue($accounting_number_prefix, null);
        }
        // query params
        if ($accounting_number_contains !== null) {
            $queryParams['accounting_number_contains'] = ObjectSerializer::toQueryValue($accounting_number_contains, null);
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if (is_array($exclude_state)) {
            $exclude_state = ObjectSerializer::serializeCollection($exclude_state, 'multi', true);
        }
        if ($exclude_state !== null) {
            $queryParams['exclude_state'] = ObjectSerializer::toQueryValue($exclude_state, null);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = ObjectSerializer::toQueryValue($customer, null);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if ($refunded_amount !== null) {
            $queryParams['refunded_amount'] = ObjectSerializer::toQueryValue($refunded_amount, null);
        }
        // query params
        if ($authorized_amount !== null) {
            $queryParams['authorized_amount'] = ObjectSerializer::toQueryValue($authorized_amount, null);
        }
        // query params
        if (is_array($currency)) {
            $currency = ObjectSerializer::serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = ObjectSerializer::toQueryValue($currency, null);
        }
        // query params
        if ($partial_settled !== null) {
            $queryParams['partial_settled'] = ObjectSerializer::toQueryValue($partial_settled, null);
        }
        // query params
        if ($settled_amount !== null) {
            $queryParams['settled_amount'] = ObjectSerializer::toQueryValue($settled_amount, null);
        }
        // query params
        if ($debtor_id !== null) {
            $queryParams['debtor_id'] = ObjectSerializer::toQueryValue($debtor_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCouponList
     *
     * Get list of coupons
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string $handle handle (optional)
     * @param  string $handle_prefix handle_prefix (optional)
     * @param  string[] $state state (optional)
     * @param  string $type type (optional)
     * @param  string[] $expire_reason expire_reason (optional)
     * @param  string $discount_handle discount_handle (optional)
     * @param  string[] $discount_currency discount_currency (optional)
     * @param  string $discount_percentage discount_percentage (optional)
     * @param  string $eligible_currency eligible_currency (optional)
     * @param  string $code code (optional)
     * @param  string $name name (optional)
     * @param  string $all_plans all_plans (optional)
     * @param  string $max_redemptions max_redemptions (optional)
     * @param  string $redemptions redemptions (optional)
     * @param  string $valid_until valid_until (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\CouponList
     */
    public function getCouponList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = null, $type = null, $expire_reason = null, $discount_handle = null, $discount_currency = null, $discount_percentage = null, $eligible_currency = null, $code = null, $name = null, $all_plans = null, $max_redemptions = null, $redemptions = null, $valid_until = null)
    {
        list($response) = $this->getCouponListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $type, $expire_reason, $discount_handle, $discount_currency, $discount_percentage, $eligible_currency, $code, $name, $all_plans, $max_redemptions, $redemptions, $valid_until);
        return $response;
    }

    /**
     * Operation getCouponListWithHttpInfo
     *
     * Get list of coupons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string[] $state (optional)
     * @param  string $type (optional)
     * @param  string[] $expire_reason (optional)
     * @param  string $discount_handle (optional)
     * @param  string[] $discount_currency (optional)
     * @param  string $discount_percentage (optional)
     * @param  string $eligible_currency (optional)
     * @param  string $code (optional)
     * @param  string $name (optional)
     * @param  string $all_plans (optional)
     * @param  string $max_redemptions (optional)
     * @param  string $redemptions (optional)
     * @param  string $valid_until (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\CouponList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = null, $type = null, $expire_reason = null, $discount_handle = null, $discount_currency = null, $discount_percentage = null, $eligible_currency = null, $code = null, $name = null, $all_plans = null, $max_redemptions = null, $redemptions = null, $valid_until = null)
    {
        $returnType = '\Reepay\Model\CouponList';
        $request = $this->getCouponListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $type, $expire_reason, $discount_handle, $discount_currency, $discount_percentage, $eligible_currency, $code, $name, $all_plans, $max_redemptions, $redemptions, $valid_until);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\CouponList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCouponListAsync
     *
     * Get list of coupons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string[] $state (optional)
     * @param  string $type (optional)
     * @param  string[] $expire_reason (optional)
     * @param  string $discount_handle (optional)
     * @param  string[] $discount_currency (optional)
     * @param  string $discount_percentage (optional)
     * @param  string $eligible_currency (optional)
     * @param  string $code (optional)
     * @param  string $name (optional)
     * @param  string $all_plans (optional)
     * @param  string $max_redemptions (optional)
     * @param  string $redemptions (optional)
     * @param  string $valid_until (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = null, $type = null, $expire_reason = null, $discount_handle = null, $discount_currency = null, $discount_percentage = null, $eligible_currency = null, $code = null, $name = null, $all_plans = null, $max_redemptions = null, $redemptions = null, $valid_until = null)
    {
        return $this->getCouponListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $type, $expire_reason, $discount_handle, $discount_currency, $discount_percentage, $eligible_currency, $code, $name, $all_plans, $max_redemptions, $redemptions, $valid_until)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponListAsyncWithHttpInfo
     *
     * Get list of coupons
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string[] $state (optional)
     * @param  string $type (optional)
     * @param  string[] $expire_reason (optional)
     * @param  string $discount_handle (optional)
     * @param  string[] $discount_currency (optional)
     * @param  string $discount_percentage (optional)
     * @param  string $eligible_currency (optional)
     * @param  string $code (optional)
     * @param  string $name (optional)
     * @param  string $all_plans (optional)
     * @param  string $max_redemptions (optional)
     * @param  string $redemptions (optional)
     * @param  string $valid_until (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = null, $type = null, $expire_reason = null, $discount_handle = null, $discount_currency = null, $discount_percentage = null, $eligible_currency = null, $code = null, $name = null, $all_plans = null, $max_redemptions = null, $redemptions = null, $valid_until = null)
    {
        $returnType = '\Reepay\Model\CouponList';
        $request = $this->getCouponListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $type, $expire_reason, $discount_handle, $discount_currency, $discount_percentage, $eligible_currency, $code, $name, $all_plans, $max_redemptions, $redemptions, $valid_until);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCouponList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string[] $state (optional)
     * @param  string $type (optional)
     * @param  string[] $expire_reason (optional)
     * @param  string $discount_handle (optional)
     * @param  string[] $discount_currency (optional)
     * @param  string $discount_percentage (optional)
     * @param  string $eligible_currency (optional)
     * @param  string $code (optional)
     * @param  string $name (optional)
     * @param  string $all_plans (optional)
     * @param  string $max_redemptions (optional)
     * @param  string $redemptions (optional)
     * @param  string $valid_until (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCouponListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = null, $type = null, $expire_reason = null, $discount_handle = null, $discount_currency = null, $discount_percentage = null, $eligible_currency = null, $code = null, $name = null, $all_plans = null, $max_redemptions = null, $redemptions = null, $valid_until = null)
    {

        $resourcePath = '/v1/list/coupon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }
        // query params
        if ($handle_prefix !== null) {
            $queryParams['handle_prefix'] = ObjectSerializer::toQueryValue($handle_prefix, null);
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if (is_array($expire_reason)) {
            $expire_reason = ObjectSerializer::serializeCollection($expire_reason, 'multi', true);
        }
        if ($expire_reason !== null) {
            $queryParams['expire_reason'] = ObjectSerializer::toQueryValue($expire_reason, null);
        }
        // query params
        if ($discount_handle !== null) {
            $queryParams['discount_handle'] = ObjectSerializer::toQueryValue($discount_handle, null);
        }
        // query params
        if (is_array($discount_currency)) {
            $discount_currency = ObjectSerializer::serializeCollection($discount_currency, 'multi', true);
        }
        if ($discount_currency !== null) {
            $queryParams['discount_currency'] = ObjectSerializer::toQueryValue($discount_currency, null);
        }
        // query params
        if ($discount_percentage !== null) {
            $queryParams['discount_percentage'] = ObjectSerializer::toQueryValue($discount_percentage, null);
        }
        // query params
        if ($eligible_currency !== null) {
            $queryParams['eligible_currency'] = ObjectSerializer::toQueryValue($eligible_currency, null);
        }
        // query params
        if ($code !== null) {
            $queryParams['code'] = ObjectSerializer::toQueryValue($code, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($all_plans !== null) {
            $queryParams['all_plans'] = ObjectSerializer::toQueryValue($all_plans, null);
        }
        // query params
        if ($max_redemptions !== null) {
            $queryParams['max_redemptions'] = ObjectSerializer::toQueryValue($max_redemptions, null);
        }
        // query params
        if ($redemptions !== null) {
            $queryParams['redemptions'] = ObjectSerializer::toQueryValue($redemptions, null);
        }
        // query params
        if ($valid_until !== null) {
            $queryParams['valid_until'] = ObjectSerializer::toQueryValue($valid_until, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerList
     *
     * Get list of customers
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string $handle handle (optional)
     * @param  string $handle_prefix handle_prefix (optional)
     * @param  string $handle_contains handle_contains (optional)
     * @param  string $name name (optional)
     * @param  string $email email (optional)
     * @param  string $email_prefix email_prefix (optional)
     * @param  string $first_name first_name (optional)
     * @param  string $last_name last_name (optional)
     * @param  string $address address (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $postal_code postal_code (optional)
     * @param  string $city city (optional)
     * @param  string $country country (optional)
     * @param  string $phone phone (optional)
     * @param  string $company company (optional)
     * @param  string $vat vat (optional)
     * @param  string $debtor_id debtor_id (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\CustomerList
     */
    public function getCustomerList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $name = null, $email = null, $email_prefix = null, $first_name = null, $last_name = null, $address = null, $address2 = null, $postal_code = null, $city = null, $country = null, $phone = null, $company = null, $vat = null, $debtor_id = null)
    {
        list($response) = $this->getCustomerListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $name, $email, $email_prefix, $first_name, $last_name, $address, $address2, $postal_code, $city, $country, $phone, $company, $vat, $debtor_id);
        return $response;
    }

    /**
     * Operation getCustomerListWithHttpInfo
     *
     * Get list of customers
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $email_prefix (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $postal_code (optional)
     * @param  string $city (optional)
     * @param  string $country (optional)
     * @param  string $phone (optional)
     * @param  string $company (optional)
     * @param  string $vat (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\CustomerList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $name = null, $email = null, $email_prefix = null, $first_name = null, $last_name = null, $address = null, $address2 = null, $postal_code = null, $city = null, $country = null, $phone = null, $company = null, $vat = null, $debtor_id = null)
    {
        $returnType = '\Reepay\Model\CustomerList';
        $request = $this->getCustomerListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $name, $email, $email_prefix, $first_name, $last_name, $address, $address2, $postal_code, $city, $country, $phone, $company, $vat, $debtor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\CustomerList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerListAsync
     *
     * Get list of customers
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $email_prefix (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $postal_code (optional)
     * @param  string $city (optional)
     * @param  string $country (optional)
     * @param  string $phone (optional)
     * @param  string $company (optional)
     * @param  string $vat (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $name = null, $email = null, $email_prefix = null, $first_name = null, $last_name = null, $address = null, $address2 = null, $postal_code = null, $city = null, $country = null, $phone = null, $company = null, $vat = null, $debtor_id = null)
    {
        return $this->getCustomerListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $name, $email, $email_prefix, $first_name, $last_name, $address, $address2, $postal_code, $city, $country, $phone, $company, $vat, $debtor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerListAsyncWithHttpInfo
     *
     * Get list of customers
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $email_prefix (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $postal_code (optional)
     * @param  string $city (optional)
     * @param  string $country (optional)
     * @param  string $phone (optional)
     * @param  string $company (optional)
     * @param  string $vat (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $name = null, $email = null, $email_prefix = null, $first_name = null, $last_name = null, $address = null, $address2 = null, $postal_code = null, $city = null, $country = null, $phone = null, $company = null, $vat = null, $debtor_id = null)
    {
        $returnType = '\Reepay\Model\CustomerList';
        $request = $this->getCustomerListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $name, $email, $email_prefix, $first_name, $last_name, $address, $address2, $postal_code, $city, $country, $phone, $company, $vat, $debtor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $email_prefix (optional)
     * @param  string $first_name (optional)
     * @param  string $last_name (optional)
     * @param  string $address (optional)
     * @param  string $address2 (optional)
     * @param  string $postal_code (optional)
     * @param  string $city (optional)
     * @param  string $country (optional)
     * @param  string $phone (optional)
     * @param  string $company (optional)
     * @param  string $vat (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCustomerListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $name = null, $email = null, $email_prefix = null, $first_name = null, $last_name = null, $address = null, $address2 = null, $postal_code = null, $city = null, $country = null, $phone = null, $company = null, $vat = null, $debtor_id = null)
    {

        $resourcePath = '/v1/list/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }
        // query params
        if ($handle_prefix !== null) {
            $queryParams['handle_prefix'] = ObjectSerializer::toQueryValue($handle_prefix, null);
        }
        // query params
        if ($handle_contains !== null) {
            $queryParams['handle_contains'] = ObjectSerializer::toQueryValue($handle_contains, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email, null);
        }
        // query params
        if ($email_prefix !== null) {
            $queryParams['email_prefix'] = ObjectSerializer::toQueryValue($email_prefix, null);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['first_name'] = ObjectSerializer::toQueryValue($first_name, null);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['last_name'] = ObjectSerializer::toQueryValue($last_name, null);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address, null);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['address2'] = ObjectSerializer::toQueryValue($address2, null);
        }
        // query params
        if ($postal_code !== null) {
            $queryParams['postal_code'] = ObjectSerializer::toQueryValue($postal_code, null);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city, null);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country, null);
        }
        // query params
        if ($phone !== null) {
            $queryParams['phone'] = ObjectSerializer::toQueryValue($phone, null);
        }
        // query params
        if ($company !== null) {
            $queryParams['company'] = ObjectSerializer::toQueryValue($company, null);
        }
        // query params
        if ($vat !== null) {
            $queryParams['vat'] = ObjectSerializer::toQueryValue($vat, null);
        }
        // query params
        if ($debtor_id !== null) {
            $queryParams['debtor_id'] = ObjectSerializer::toQueryValue($debtor_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDiscountList
     *
     * Get list of discounts
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string $handle handle (optional)
     * @param  string $handle_prefix handle_prefix (optional)
     * @param  string $state state (optional)
     * @param  string[] $apply_to apply_to (optional)
     * @param  string $name name (optional)
     * @param  string $description description (optional)
     * @param  string $amount amount (optional)
     * @param  string $percentage percentage (optional)
     * @param  string $fixed_count fixed_count (optional)
     * @param  string[] $currency currency (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\DiscountList
     */
    public function getDiscountList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = null, $apply_to = null, $name = null, $description = null, $amount = null, $percentage = null, $fixed_count = null, $currency = null)
    {
        list($response) = $this->getDiscountListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $apply_to, $name, $description, $amount, $percentage, $fixed_count, $currency);
        return $response;
    }

    /**
     * Operation getDiscountListWithHttpInfo
     *
     * Get list of discounts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $state (optional)
     * @param  string[] $apply_to (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $percentage (optional)
     * @param  string $fixed_count (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\DiscountList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDiscountListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = null, $apply_to = null, $name = null, $description = null, $amount = null, $percentage = null, $fixed_count = null, $currency = null)
    {
        $returnType = '\Reepay\Model\DiscountList';
        $request = $this->getDiscountListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $apply_to, $name, $description, $amount, $percentage, $fixed_count, $currency);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\DiscountList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDiscountListAsync
     *
     * Get list of discounts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $state (optional)
     * @param  string[] $apply_to (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $percentage (optional)
     * @param  string $fixed_count (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscountListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = null, $apply_to = null, $name = null, $description = null, $amount = null, $percentage = null, $fixed_count = null, $currency = null)
    {
        return $this->getDiscountListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $apply_to, $name, $description, $amount, $percentage, $fixed_count, $currency)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDiscountListAsyncWithHttpInfo
     *
     * Get list of discounts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $state (optional)
     * @param  string[] $apply_to (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $percentage (optional)
     * @param  string $fixed_count (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDiscountListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = null, $apply_to = null, $name = null, $description = null, $amount = null, $percentage = null, $fixed_count = null, $currency = null)
    {
        $returnType = '\Reepay\Model\DiscountList';
        $request = $this->getDiscountListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $state, $apply_to, $name, $description, $amount, $percentage, $fixed_count, $currency);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDiscountList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $state (optional)
     * @param  string[] $apply_to (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $amount (optional)
     * @param  string $percentage (optional)
     * @param  string $fixed_count (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscountListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $state = null, $apply_to = null, $name = null, $description = null, $amount = null, $percentage = null, $fixed_count = null, $currency = null)
    {

        $resourcePath = '/v1/list/discount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }
        // query params
        if ($handle_prefix !== null) {
            $queryParams['handle_prefix'] = ObjectSerializer::toQueryValue($handle_prefix, null);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if (is_array($apply_to)) {
            $apply_to = ObjectSerializer::serializeCollection($apply_to, 'multi', true);
        }
        if ($apply_to !== null) {
            $queryParams['apply_to'] = ObjectSerializer::toQueryValue($apply_to, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description, null);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if ($percentage !== null) {
            $queryParams['percentage'] = ObjectSerializer::toQueryValue($percentage, null);
        }
        // query params
        if ($fixed_count !== null) {
            $queryParams['fixed_count'] = ObjectSerializer::toQueryValue($fixed_count, null);
        }
        // query params
        if (is_array($currency)) {
            $currency = ObjectSerializer::serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = ObjectSerializer::toQueryValue($currency, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceCreditNoteList
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $accounting_number Credit note exact accounting number (optional)
     * @param  string $accounting_number_prefix Credit note accounting number prefix (optional)
     * @param  string $accounting_number_contains Credit note accounting number contains (optional)
     * @param  string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param  string $customer Credit notes for customer by customer handle (optional)
     * @param  string[] $currency Credit note currency in [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param  string $subscription Credit note for subscription by subscription handle (optional)
     * @param  string $invoice Credit note for invoice by invoice handle (optional)
     * @param  string $debtor_id debtor_id (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\InvoiceCreditNoteListDto
     */
    public function getInvoiceCreditNoteList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $amount = null, $customer = null, $currency = null, $subscription = null, $invoice = null, $debtor_id = null)
    {
        list($response) = $this->getInvoiceCreditNoteListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $amount, $customer, $currency, $subscription, $invoice, $debtor_id);
        return $response;
    }

    /**
     * Operation getInvoiceCreditNoteListWithHttpInfo
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $accounting_number Credit note exact accounting number (optional)
     * @param  string $accounting_number_prefix Credit note accounting number prefix (optional)
     * @param  string $accounting_number_contains Credit note accounting number contains (optional)
     * @param  string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param  string $customer Credit notes for customer by customer handle (optional)
     * @param  string[] $currency Credit note currency in [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param  string $subscription Credit note for subscription by subscription handle (optional)
     * @param  string $invoice Credit note for invoice by invoice handle (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\InvoiceCreditNoteListDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceCreditNoteListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $amount = null, $customer = null, $currency = null, $subscription = null, $invoice = null, $debtor_id = null)
    {
        $returnType = '\Reepay\Model\InvoiceCreditNoteListDto';
        $request = $this->getInvoiceCreditNoteListRequest($from, $to, $interval, $size, $next_page_token, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $amount, $customer, $currency, $subscription, $invoice, $debtor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\InvoiceCreditNoteListDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceCreditNoteListAsync
     *
     * 
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $accounting_number Credit note exact accounting number (optional)
     * @param  string $accounting_number_prefix Credit note accounting number prefix (optional)
     * @param  string $accounting_number_contains Credit note accounting number contains (optional)
     * @param  string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param  string $customer Credit notes for customer by customer handle (optional)
     * @param  string[] $currency Credit note currency in [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param  string $subscription Credit note for subscription by subscription handle (optional)
     * @param  string $invoice Credit note for invoice by invoice handle (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceCreditNoteListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $amount = null, $customer = null, $currency = null, $subscription = null, $invoice = null, $debtor_id = null)
    {
        return $this->getInvoiceCreditNoteListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $amount, $customer, $currency, $subscription, $invoice, $debtor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceCreditNoteListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $accounting_number Credit note exact accounting number (optional)
     * @param  string $accounting_number_prefix Credit note accounting number prefix (optional)
     * @param  string $accounting_number_contains Credit note accounting number contains (optional)
     * @param  string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param  string $customer Credit notes for customer by customer handle (optional)
     * @param  string[] $currency Credit note currency in [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param  string $subscription Credit note for subscription by subscription handle (optional)
     * @param  string $invoice Credit note for invoice by invoice handle (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceCreditNoteListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $amount = null, $customer = null, $currency = null, $subscription = null, $invoice = null, $debtor_id = null)
    {
        $returnType = '\Reepay\Model\InvoiceCreditNoteListDto';
        $request = $this->getInvoiceCreditNoteListRequest($from, $to, $interval, $size, $next_page_token, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $amount, $customer, $currency, $subscription, $invoice, $debtor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceCreditNoteList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $accounting_number Credit note exact accounting number (optional)
     * @param  string $accounting_number_prefix Credit note accounting number prefix (optional)
     * @param  string $accounting_number_contains Credit note accounting number contains (optional)
     * @param  string $amount Amount in minor unit interval. See documentation of intervals. (optional)
     * @param  string $customer Credit notes for customer by customer handle (optional)
     * @param  string[] $currency Credit note currency in [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) three letter alpha code. Multiple can be defined. (optional)
     * @param  string $subscription Credit note for subscription by subscription handle (optional)
     * @param  string $invoice Credit note for invoice by invoice handle (optional)
     * @param  string $debtor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoiceCreditNoteListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $amount = null, $customer = null, $currency = null, $subscription = null, $invoice = null, $debtor_id = null)
    {

        $resourcePath = '/v1/list/credit_note';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($accounting_number !== null) {
            $queryParams['accounting_number'] = ObjectSerializer::toQueryValue($accounting_number, null);
        }
        // query params
        if ($accounting_number_prefix !== null) {
            $queryParams['accounting_number_prefix'] = ObjectSerializer::toQueryValue($accounting_number_prefix, null);
        }
        // query params
        if ($accounting_number_contains !== null) {
            $queryParams['accounting_number_contains'] = ObjectSerializer::toQueryValue($accounting_number_contains, null);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = ObjectSerializer::toQueryValue($customer, null);
        }
        // query params
        if (is_array($currency)) {
            $currency = ObjectSerializer::serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = ObjectSerializer::toQueryValue($currency, null);
        }
        // query params
        if ($subscription !== null) {
            $queryParams['subscription'] = ObjectSerializer::toQueryValue($subscription, null);
        }
        // query params
        if ($invoice !== null) {
            $queryParams['invoice'] = ObjectSerializer::toQueryValue($invoice, null);
        }
        // query params
        if ($debtor_id !== null) {
            $queryParams['debtor_id'] = ObjectSerializer::toQueryValue($debtor_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoiceList
     *
     * Get list of invoices
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string $handle handle (optional)
     * @param  string $handle_prefix handle_prefix (optional)
     * @param  string $handle_contains handle_contains (optional)
     * @param  string $accounting_number accounting_number (optional)
     * @param  string $accounting_number_prefix accounting_number_prefix (optional)
     * @param  string $accounting_number_contains accounting_number_contains (optional)
     * @param  string[] $state state (optional)
     * @param  string[] $exclude_state exclude_state (optional)
     * @param  string $customer customer (optional)
     * @param  string $amount amount (optional)
     * @param  string $refunded_amount refunded_amount (optional)
     * @param  string $authorized_amount authorized_amount (optional)
     * @param  string[] $currency currency (optional)
     * @param  bool $partial_settled partial_settled (optional)
     * @param  string $settled_amount settled_amount (optional)
     * @param  string $debtor_id debtor_id (optional)
     * @param  string[] $type type (optional)
     * @param  string $subscription subscription (optional)
     * @param  string $plan plan (optional)
     * @param  string $dunning_start dunning_start (optional)
     * @param  string $dunning_success dunning_success (optional)
     * @param  int $number number (optional)
     * @param  string $due due (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\InvoiceList
     */
    public function getInvoiceList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $settled_amount = null, $debtor_id = null, $type = null, $subscription = null, $plan = null, $dunning_start = null, $dunning_success = null, $number = null, $due = null)
    {
        list($response) = $this->getInvoiceListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $state, $exclude_state, $customer, $amount, $refunded_amount, $authorized_amount, $currency, $partial_settled, $settled_amount, $debtor_id, $type, $subscription, $plan, $dunning_start, $dunning_success, $number, $due);
        return $response;
    }

    /**
     * Operation getInvoiceListWithHttpInfo
     *
     * Get list of invoices
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $accounting_number (optional)
     * @param  string $accounting_number_prefix (optional)
     * @param  string $accounting_number_contains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $exclude_state (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $authorized_amount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partial_settled (optional)
     * @param  string $settled_amount (optional)
     * @param  string $debtor_id (optional)
     * @param  string[] $type (optional)
     * @param  string $subscription (optional)
     * @param  string $plan (optional)
     * @param  string $dunning_start (optional)
     * @param  string $dunning_success (optional)
     * @param  int $number (optional)
     * @param  string $due (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\InvoiceList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $settled_amount = null, $debtor_id = null, $type = null, $subscription = null, $plan = null, $dunning_start = null, $dunning_success = null, $number = null, $due = null)
    {
        $returnType = '\Reepay\Model\InvoiceList';
        $request = $this->getInvoiceListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $state, $exclude_state, $customer, $amount, $refunded_amount, $authorized_amount, $currency, $partial_settled, $settled_amount, $debtor_id, $type, $subscription, $plan, $dunning_start, $dunning_success, $number, $due);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\InvoiceList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceListAsync
     *
     * Get list of invoices
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $accounting_number (optional)
     * @param  string $accounting_number_prefix (optional)
     * @param  string $accounting_number_contains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $exclude_state (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $authorized_amount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partial_settled (optional)
     * @param  string $settled_amount (optional)
     * @param  string $debtor_id (optional)
     * @param  string[] $type (optional)
     * @param  string $subscription (optional)
     * @param  string $plan (optional)
     * @param  string $dunning_start (optional)
     * @param  string $dunning_success (optional)
     * @param  int $number (optional)
     * @param  string $due (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $settled_amount = null, $debtor_id = null, $type = null, $subscription = null, $plan = null, $dunning_start = null, $dunning_success = null, $number = null, $due = null)
    {
        return $this->getInvoiceListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $state, $exclude_state, $customer, $amount, $refunded_amount, $authorized_amount, $currency, $partial_settled, $settled_amount, $debtor_id, $type, $subscription, $plan, $dunning_start, $dunning_success, $number, $due)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceListAsyncWithHttpInfo
     *
     * Get list of invoices
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $accounting_number (optional)
     * @param  string $accounting_number_prefix (optional)
     * @param  string $accounting_number_contains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $exclude_state (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $authorized_amount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partial_settled (optional)
     * @param  string $settled_amount (optional)
     * @param  string $debtor_id (optional)
     * @param  string[] $type (optional)
     * @param  string $subscription (optional)
     * @param  string $plan (optional)
     * @param  string $dunning_start (optional)
     * @param  string $dunning_success (optional)
     * @param  int $number (optional)
     * @param  string $due (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $settled_amount = null, $debtor_id = null, $type = null, $subscription = null, $plan = null, $dunning_start = null, $dunning_success = null, $number = null, $due = null)
    {
        $returnType = '\Reepay\Model\InvoiceList';
        $request = $this->getInvoiceListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $accounting_number, $accounting_number_prefix, $accounting_number_contains, $state, $exclude_state, $customer, $amount, $refunded_amount, $authorized_amount, $currency, $partial_settled, $settled_amount, $debtor_id, $type, $subscription, $plan, $dunning_start, $dunning_success, $number, $due);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $accounting_number (optional)
     * @param  string $accounting_number_prefix (optional)
     * @param  string $accounting_number_contains (optional)
     * @param  string[] $state (optional)
     * @param  string[] $exclude_state (optional)
     * @param  string $customer (optional)
     * @param  string $amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $authorized_amount (optional)
     * @param  string[] $currency (optional)
     * @param  bool $partial_settled (optional)
     * @param  string $settled_amount (optional)
     * @param  string $debtor_id (optional)
     * @param  string[] $type (optional)
     * @param  string $subscription (optional)
     * @param  string $plan (optional)
     * @param  string $dunning_start (optional)
     * @param  string $dunning_success (optional)
     * @param  int $number (optional)
     * @param  string $due (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoiceListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $accounting_number = null, $accounting_number_prefix = null, $accounting_number_contains = null, $state = null, $exclude_state = null, $customer = null, $amount = null, $refunded_amount = null, $authorized_amount = null, $currency = null, $partial_settled = null, $settled_amount = null, $debtor_id = null, $type = null, $subscription = null, $plan = null, $dunning_start = null, $dunning_success = null, $number = null, $due = null)
    {

        $resourcePath = '/v1/list/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }
        // query params
        if ($handle_prefix !== null) {
            $queryParams['handle_prefix'] = ObjectSerializer::toQueryValue($handle_prefix, null);
        }
        // query params
        if ($handle_contains !== null) {
            $queryParams['handle_contains'] = ObjectSerializer::toQueryValue($handle_contains, null);
        }
        // query params
        if ($accounting_number !== null) {
            $queryParams['accounting_number'] = ObjectSerializer::toQueryValue($accounting_number, null);
        }
        // query params
        if ($accounting_number_prefix !== null) {
            $queryParams['accounting_number_prefix'] = ObjectSerializer::toQueryValue($accounting_number_prefix, null);
        }
        // query params
        if ($accounting_number_contains !== null) {
            $queryParams['accounting_number_contains'] = ObjectSerializer::toQueryValue($accounting_number_contains, null);
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if (is_array($exclude_state)) {
            $exclude_state = ObjectSerializer::serializeCollection($exclude_state, 'multi', true);
        }
        if ($exclude_state !== null) {
            $queryParams['exclude_state'] = ObjectSerializer::toQueryValue($exclude_state, null);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = ObjectSerializer::toQueryValue($customer, null);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if ($refunded_amount !== null) {
            $queryParams['refunded_amount'] = ObjectSerializer::toQueryValue($refunded_amount, null);
        }
        // query params
        if ($authorized_amount !== null) {
            $queryParams['authorized_amount'] = ObjectSerializer::toQueryValue($authorized_amount, null);
        }
        // query params
        if (is_array($currency)) {
            $currency = ObjectSerializer::serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = ObjectSerializer::toQueryValue($currency, null);
        }
        // query params
        if ($partial_settled !== null) {
            $queryParams['partial_settled'] = ObjectSerializer::toQueryValue($partial_settled, null);
        }
        // query params
        if ($settled_amount !== null) {
            $queryParams['settled_amount'] = ObjectSerializer::toQueryValue($settled_amount, null);
        }
        // query params
        if ($debtor_id !== null) {
            $queryParams['debtor_id'] = ObjectSerializer::toQueryValue($debtor_id, null);
        }
        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, 'multi', true);
        }
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($subscription !== null) {
            $queryParams['subscription'] = ObjectSerializer::toQueryValue($subscription, null);
        }
        // query params
        if ($plan !== null) {
            $queryParams['plan'] = ObjectSerializer::toQueryValue($plan, null);
        }
        // query params
        if ($dunning_start !== null) {
            $queryParams['dunning_start'] = ObjectSerializer::toQueryValue($dunning_start, null);
        }
        // query params
        if ($dunning_success !== null) {
            $queryParams['dunning_success'] = ObjectSerializer::toQueryValue($dunning_success, null);
        }
        // query params
        if ($number !== null) {
            $queryParams['number'] = ObjectSerializer::toQueryValue($number, 'int32');
        }
        // query params
        if ($due !== null) {
            $queryParams['due'] = ObjectSerializer::toQueryValue($due, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentMethodList
     *
     * Get list of payment methods
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string $id id (optional)
     * @param  string[] $state state (optional)
     * @param  string[] $payment_type payment_type (optional)
     * @param  string $customer customer (optional)
     * @param  string $subscription subscription (optional)
     * @param  string $reference reference (optional)
     * @param  string $failed failed (optional)
     * @param  string[] $card_type card_type (optional)
     * @param  string[] $transaction_card_type transaction_card_type (optional)
     * @param  string $card_prefix card_prefix (optional)
     * @param  string $card_postfix card_postfix (optional)
     * @param  string $card_fingerprint card_fingerprint (optional)
     * @param  string[] $card_country card_country (optional)
     * @param  string $card_gateway card_gateway (optional)
     * @param  string $card_agreement card_agreement (optional)
     * @param  string $mps_external_id mps_external_id (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\PaymentMethodList
     */
    public function getPaymentMethodList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $id = null, $state = null, $payment_type = null, $customer = null, $subscription = null, $reference = null, $failed = null, $card_type = null, $transaction_card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $card_agreement = null, $mps_external_id = null)
    {
        list($response) = $this->getPaymentMethodListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $id, $state, $payment_type, $customer, $subscription, $reference, $failed, $card_type, $transaction_card_type, $card_prefix, $card_postfix, $card_fingerprint, $card_country, $card_gateway, $card_agreement, $mps_external_id);
        return $response;
    }

    /**
     * Operation getPaymentMethodListWithHttpInfo
     *
     * Get list of payment methods
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $id (optional)
     * @param  string[] $state (optional)
     * @param  string[] $payment_type (optional)
     * @param  string $customer (optional)
     * @param  string $subscription (optional)
     * @param  string $reference (optional)
     * @param  string $failed (optional)
     * @param  string[] $card_type (optional)
     * @param  string[] $transaction_card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     * @param  string[] $card_country (optional)
     * @param  string $card_gateway (optional)
     * @param  string $card_agreement (optional)
     * @param  string $mps_external_id (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\PaymentMethodList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentMethodListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $id = null, $state = null, $payment_type = null, $customer = null, $subscription = null, $reference = null, $failed = null, $card_type = null, $transaction_card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $card_agreement = null, $mps_external_id = null)
    {
        $returnType = '\Reepay\Model\PaymentMethodList';
        $request = $this->getPaymentMethodListRequest($from, $to, $interval, $size, $next_page_token, $range, $id, $state, $payment_type, $customer, $subscription, $reference, $failed, $card_type, $transaction_card_type, $card_prefix, $card_postfix, $card_fingerprint, $card_country, $card_gateway, $card_agreement, $mps_external_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\PaymentMethodList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentMethodListAsync
     *
     * Get list of payment methods
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $id (optional)
     * @param  string[] $state (optional)
     * @param  string[] $payment_type (optional)
     * @param  string $customer (optional)
     * @param  string $subscription (optional)
     * @param  string $reference (optional)
     * @param  string $failed (optional)
     * @param  string[] $card_type (optional)
     * @param  string[] $transaction_card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     * @param  string[] $card_country (optional)
     * @param  string $card_gateway (optional)
     * @param  string $card_agreement (optional)
     * @param  string $mps_external_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $id = null, $state = null, $payment_type = null, $customer = null, $subscription = null, $reference = null, $failed = null, $card_type = null, $transaction_card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $card_agreement = null, $mps_external_id = null)
    {
        return $this->getPaymentMethodListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $id, $state, $payment_type, $customer, $subscription, $reference, $failed, $card_type, $transaction_card_type, $card_prefix, $card_postfix, $card_fingerprint, $card_country, $card_gateway, $card_agreement, $mps_external_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentMethodListAsyncWithHttpInfo
     *
     * Get list of payment methods
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $id (optional)
     * @param  string[] $state (optional)
     * @param  string[] $payment_type (optional)
     * @param  string $customer (optional)
     * @param  string $subscription (optional)
     * @param  string $reference (optional)
     * @param  string $failed (optional)
     * @param  string[] $card_type (optional)
     * @param  string[] $transaction_card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     * @param  string[] $card_country (optional)
     * @param  string $card_gateway (optional)
     * @param  string $card_agreement (optional)
     * @param  string $mps_external_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $id = null, $state = null, $payment_type = null, $customer = null, $subscription = null, $reference = null, $failed = null, $card_type = null, $transaction_card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $card_agreement = null, $mps_external_id = null)
    {
        $returnType = '\Reepay\Model\PaymentMethodList';
        $request = $this->getPaymentMethodListRequest($from, $to, $interval, $size, $next_page_token, $range, $id, $state, $payment_type, $customer, $subscription, $reference, $failed, $card_type, $transaction_card_type, $card_prefix, $card_postfix, $card_fingerprint, $card_country, $card_gateway, $card_agreement, $mps_external_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentMethodList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $id (optional)
     * @param  string[] $state (optional)
     * @param  string[] $payment_type (optional)
     * @param  string $customer (optional)
     * @param  string $subscription (optional)
     * @param  string $reference (optional)
     * @param  string $failed (optional)
     * @param  string[] $card_type (optional)
     * @param  string[] $transaction_card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     * @param  string[] $card_country (optional)
     * @param  string $card_gateway (optional)
     * @param  string $card_agreement (optional)
     * @param  string $mps_external_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentMethodListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $id = null, $state = null, $payment_type = null, $customer = null, $subscription = null, $reference = null, $failed = null, $card_type = null, $transaction_card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $card_agreement = null, $mps_external_id = null)
    {

        $resourcePath = '/v1/list/payment_method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if (is_array($payment_type)) {
            $payment_type = ObjectSerializer::serializeCollection($payment_type, 'multi', true);
        }
        if ($payment_type !== null) {
            $queryParams['payment_type'] = ObjectSerializer::toQueryValue($payment_type, null);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = ObjectSerializer::toQueryValue($customer, null);
        }
        // query params
        if ($subscription !== null) {
            $queryParams['subscription'] = ObjectSerializer::toQueryValue($subscription, null);
        }
        // query params
        if ($reference !== null) {
            $queryParams['reference'] = ObjectSerializer::toQueryValue($reference, null);
        }
        // query params
        if ($failed !== null) {
            $queryParams['failed'] = ObjectSerializer::toQueryValue($failed, null);
        }
        // query params
        if (is_array($card_type)) {
            $card_type = ObjectSerializer::serializeCollection($card_type, 'multi', true);
        }
        if ($card_type !== null) {
            $queryParams['card_type'] = ObjectSerializer::toQueryValue($card_type, null);
        }
        // query params
        if (is_array($transaction_card_type)) {
            $transaction_card_type = ObjectSerializer::serializeCollection($transaction_card_type, 'multi', true);
        }
        if ($transaction_card_type !== null) {
            $queryParams['transaction_card_type'] = ObjectSerializer::toQueryValue($transaction_card_type, null);
        }
        // query params
        if ($card_prefix !== null) {
            $queryParams['card_prefix'] = ObjectSerializer::toQueryValue($card_prefix, null);
        }
        // query params
        if ($card_postfix !== null) {
            $queryParams['card_postfix'] = ObjectSerializer::toQueryValue($card_postfix, null);
        }
        // query params
        if ($card_fingerprint !== null) {
            $queryParams['card_fingerprint'] = ObjectSerializer::toQueryValue($card_fingerprint, null);
        }
        // query params
        if (is_array($card_country)) {
            $card_country = ObjectSerializer::serializeCollection($card_country, 'multi', true);
        }
        if ($card_country !== null) {
            $queryParams['card_country'] = ObjectSerializer::toQueryValue($card_country, null);
        }
        // query params
        if ($card_gateway !== null) {
            $queryParams['card_gateway'] = ObjectSerializer::toQueryValue($card_gateway, null);
        }
        // query params
        if ($card_agreement !== null) {
            $queryParams['card_agreement'] = ObjectSerializer::toQueryValue($card_agreement, null);
        }
        // query params
        if ($mps_external_id !== null) {
            $queryParams['mps_external_id'] = ObjectSerializer::toQueryValue($mps_external_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayoutList
     *
     * Get list of payouts
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string $handle handle (optional)
     * @param  string $handle_prefix handle_prefix (optional)
     * @param  string $handle_contains handle_contains (optional)
     * @param  string $customer customer (optional)
     * @param  string[] $state state (optional)
     * @param  string $amount amount (optional)
     * @param  string[] $currency currency (optional)
     * @param  string $card card (optional)
     * @param  string $card_type card_type (optional)
     * @param  string $card_prefix card_prefix (optional)
     * @param  string $card_postfix card_postfix (optional)
     * @param  string $card_fingerprint card_fingerprint (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\PayoutList
     */
    public function getPayoutList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null)
    {
        list($response) = $this->getPayoutListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $customer, $state, $amount, $currency, $card, $card_type, $card_prefix, $card_postfix, $card_fingerprint);
        return $response;
    }

    /**
     * Operation getPayoutListWithHttpInfo
     *
     * Get list of payouts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $customer (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string[] $currency (optional)
     * @param  string $card (optional)
     * @param  string $card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\PayoutList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayoutListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null)
    {
        $returnType = '\Reepay\Model\PayoutList';
        $request = $this->getPayoutListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $customer, $state, $amount, $currency, $card, $card_type, $card_prefix, $card_postfix, $card_fingerprint);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\PayoutList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayoutListAsync
     *
     * Get list of payouts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $customer (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string[] $currency (optional)
     * @param  string $card (optional)
     * @param  string $card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null)
    {
        return $this->getPayoutListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $customer, $state, $amount, $currency, $card, $card_type, $card_prefix, $card_postfix, $card_fingerprint)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayoutListAsyncWithHttpInfo
     *
     * Get list of payouts
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $customer (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string[] $currency (optional)
     * @param  string $card (optional)
     * @param  string $card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayoutListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null)
    {
        $returnType = '\Reepay\Model\PayoutList';
        $request = $this->getPayoutListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $customer, $state, $amount, $currency, $card, $card_type, $card_prefix, $card_postfix, $card_fingerprint);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayoutList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $customer (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string[] $currency (optional)
     * @param  string $card (optional)
     * @param  string $card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPayoutListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $customer = null, $state = null, $amount = null, $currency = null, $card = null, $card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null)
    {

        $resourcePath = '/v1/list/payout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }
        // query params
        if ($handle_prefix !== null) {
            $queryParams['handle_prefix'] = ObjectSerializer::toQueryValue($handle_prefix, null);
        }
        // query params
        if ($handle_contains !== null) {
            $queryParams['handle_contains'] = ObjectSerializer::toQueryValue($handle_contains, null);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = ObjectSerializer::toQueryValue($customer, null);
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if (is_array($currency)) {
            $currency = ObjectSerializer::serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = ObjectSerializer::toQueryValue($currency, null);
        }
        // query params
        if ($card !== null) {
            $queryParams['card'] = ObjectSerializer::toQueryValue($card, null);
        }
        // query params
        if ($card_type !== null) {
            $queryParams['card_type'] = ObjectSerializer::toQueryValue($card_type, null);
        }
        // query params
        if ($card_prefix !== null) {
            $queryParams['card_prefix'] = ObjectSerializer::toQueryValue($card_prefix, null);
        }
        // query params
        if ($card_postfix !== null) {
            $queryParams['card_postfix'] = ObjectSerializer::toQueryValue($card_postfix, null);
        }
        // query params
        if ($card_fingerprint !== null) {
            $queryParams['card_fingerprint'] = ObjectSerializer::toQueryValue($card_fingerprint, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlanList
     *
     * Get list of plans
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string $handle handle (optional)
     * @param  string $handle_prefix handle_prefix (optional)
     * @param  string[] $handles handles (optional)
     * @param  string[] $state state (optional)
     * @param  string[] $schedule_type schedule_type (optional)
     * @param  string[] $partial_period_handling partial_period_handling (optional)
     * @param  string[] $setup_fee_handling setup_fee_handling (optional)
     * @param  string[] $fixed_life_time_unit fixed_life_time_unit (optional)
     * @param  string[] $trial_interval_unit trial_interval_unit (optional)
     * @param  string $dunning_plan_handle dunning_plan_handle (optional)
     * @param  string $name name (optional)
     * @param  string $description description (optional)
     * @param  string $setup_fee_text setup_fee_text (optional)
     * @param  string $amount amount (optional)
     * @param  string $quantity quantity (optional)
     * @param  string $fixed_count fixed_count (optional)
     * @param  string $fixed_life_time_length fixed_life_time_length (optional)
     * @param  string $trial_interval_length trial_interval_length (optional)
     * @param  string $interval_length interval_length (optional)
     * @param  string $schedule_fixed_day schedule_fixed_day (optional)
     * @param  string $renewal_reminder_email_days renewal_reminder_email_days (optional)
     * @param  string $trial_reminder_email_days trial_reminder_email_days (optional)
     * @param  string $base_month base_month (optional)
     * @param  string $notice_periods notice_periods (optional)
     * @param  string $minimum_prorated_amount minimum_prorated_amount (optional)
     * @param  string $fixation_periods fixation_periods (optional)
     * @param  string $setup_fee setup_fee (optional)
     * @param  string $amount_incl_vat amount_incl_vat (optional)
     * @param  string $notice_periods_after_current notice_periods_after_current (optional)
     * @param  string $fixation_periods_full fixation_periods_full (optional)
     * @param  string $include_zero_amount include_zero_amount (optional)
     * @param  string $partial_proration_days partial_proration_days (optional)
     * @param  string $fixed_trial_days fixed_trial_days (optional)
     * @param  string[] $currency currency (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\PlanList
     */
    public function getPlanList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handles = null, $state = null, $schedule_type = null, $partial_period_handling = null, $setup_fee_handling = null, $fixed_life_time_unit = null, $trial_interval_unit = null, $dunning_plan_handle = null, $name = null, $description = null, $setup_fee_text = null, $amount = null, $quantity = null, $fixed_count = null, $fixed_life_time_length = null, $trial_interval_length = null, $interval_length = null, $schedule_fixed_day = null, $renewal_reminder_email_days = null, $trial_reminder_email_days = null, $base_month = null, $notice_periods = null, $minimum_prorated_amount = null, $fixation_periods = null, $setup_fee = null, $amount_incl_vat = null, $notice_periods_after_current = null, $fixation_periods_full = null, $include_zero_amount = null, $partial_proration_days = null, $fixed_trial_days = null, $currency = null)
    {
        list($response) = $this->getPlanListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handles, $state, $schedule_type, $partial_period_handling, $setup_fee_handling, $fixed_life_time_unit, $trial_interval_unit, $dunning_plan_handle, $name, $description, $setup_fee_text, $amount, $quantity, $fixed_count, $fixed_life_time_length, $trial_interval_length, $interval_length, $schedule_fixed_day, $renewal_reminder_email_days, $trial_reminder_email_days, $base_month, $notice_periods, $minimum_prorated_amount, $fixation_periods, $setup_fee, $amount_incl_vat, $notice_periods_after_current, $fixation_periods_full, $include_zero_amount, $partial_proration_days, $fixed_trial_days, $currency);
        return $response;
    }

    /**
     * Operation getPlanListWithHttpInfo
     *
     * Get list of plans
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string[] $handles (optional)
     * @param  string[] $state (optional)
     * @param  string[] $schedule_type (optional)
     * @param  string[] $partial_period_handling (optional)
     * @param  string[] $setup_fee_handling (optional)
     * @param  string[] $fixed_life_time_unit (optional)
     * @param  string[] $trial_interval_unit (optional)
     * @param  string $dunning_plan_handle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $setup_fee_text (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $fixed_count (optional)
     * @param  string $fixed_life_time_length (optional)
     * @param  string $trial_interval_length (optional)
     * @param  string $interval_length (optional)
     * @param  string $schedule_fixed_day (optional)
     * @param  string $renewal_reminder_email_days (optional)
     * @param  string $trial_reminder_email_days (optional)
     * @param  string $base_month (optional)
     * @param  string $notice_periods (optional)
     * @param  string $minimum_prorated_amount (optional)
     * @param  string $fixation_periods (optional)
     * @param  string $setup_fee (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $notice_periods_after_current (optional)
     * @param  string $fixation_periods_full (optional)
     * @param  string $include_zero_amount (optional)
     * @param  string $partial_proration_days (optional)
     * @param  string $fixed_trial_days (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\PlanList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlanListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handles = null, $state = null, $schedule_type = null, $partial_period_handling = null, $setup_fee_handling = null, $fixed_life_time_unit = null, $trial_interval_unit = null, $dunning_plan_handle = null, $name = null, $description = null, $setup_fee_text = null, $amount = null, $quantity = null, $fixed_count = null, $fixed_life_time_length = null, $trial_interval_length = null, $interval_length = null, $schedule_fixed_day = null, $renewal_reminder_email_days = null, $trial_reminder_email_days = null, $base_month = null, $notice_periods = null, $minimum_prorated_amount = null, $fixation_periods = null, $setup_fee = null, $amount_incl_vat = null, $notice_periods_after_current = null, $fixation_periods_full = null, $include_zero_amount = null, $partial_proration_days = null, $fixed_trial_days = null, $currency = null)
    {
        $returnType = '\Reepay\Model\PlanList';
        $request = $this->getPlanListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handles, $state, $schedule_type, $partial_period_handling, $setup_fee_handling, $fixed_life_time_unit, $trial_interval_unit, $dunning_plan_handle, $name, $description, $setup_fee_text, $amount, $quantity, $fixed_count, $fixed_life_time_length, $trial_interval_length, $interval_length, $schedule_fixed_day, $renewal_reminder_email_days, $trial_reminder_email_days, $base_month, $notice_periods, $minimum_prorated_amount, $fixation_periods, $setup_fee, $amount_incl_vat, $notice_periods_after_current, $fixation_periods_full, $include_zero_amount, $partial_proration_days, $fixed_trial_days, $currency);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\PlanList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlanListAsync
     *
     * Get list of plans
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string[] $handles (optional)
     * @param  string[] $state (optional)
     * @param  string[] $schedule_type (optional)
     * @param  string[] $partial_period_handling (optional)
     * @param  string[] $setup_fee_handling (optional)
     * @param  string[] $fixed_life_time_unit (optional)
     * @param  string[] $trial_interval_unit (optional)
     * @param  string $dunning_plan_handle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $setup_fee_text (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $fixed_count (optional)
     * @param  string $fixed_life_time_length (optional)
     * @param  string $trial_interval_length (optional)
     * @param  string $interval_length (optional)
     * @param  string $schedule_fixed_day (optional)
     * @param  string $renewal_reminder_email_days (optional)
     * @param  string $trial_reminder_email_days (optional)
     * @param  string $base_month (optional)
     * @param  string $notice_periods (optional)
     * @param  string $minimum_prorated_amount (optional)
     * @param  string $fixation_periods (optional)
     * @param  string $setup_fee (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $notice_periods_after_current (optional)
     * @param  string $fixation_periods_full (optional)
     * @param  string $include_zero_amount (optional)
     * @param  string $partial_proration_days (optional)
     * @param  string $fixed_trial_days (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlanListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handles = null, $state = null, $schedule_type = null, $partial_period_handling = null, $setup_fee_handling = null, $fixed_life_time_unit = null, $trial_interval_unit = null, $dunning_plan_handle = null, $name = null, $description = null, $setup_fee_text = null, $amount = null, $quantity = null, $fixed_count = null, $fixed_life_time_length = null, $trial_interval_length = null, $interval_length = null, $schedule_fixed_day = null, $renewal_reminder_email_days = null, $trial_reminder_email_days = null, $base_month = null, $notice_periods = null, $minimum_prorated_amount = null, $fixation_periods = null, $setup_fee = null, $amount_incl_vat = null, $notice_periods_after_current = null, $fixation_periods_full = null, $include_zero_amount = null, $partial_proration_days = null, $fixed_trial_days = null, $currency = null)
    {
        return $this->getPlanListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handles, $state, $schedule_type, $partial_period_handling, $setup_fee_handling, $fixed_life_time_unit, $trial_interval_unit, $dunning_plan_handle, $name, $description, $setup_fee_text, $amount, $quantity, $fixed_count, $fixed_life_time_length, $trial_interval_length, $interval_length, $schedule_fixed_day, $renewal_reminder_email_days, $trial_reminder_email_days, $base_month, $notice_periods, $minimum_prorated_amount, $fixation_periods, $setup_fee, $amount_incl_vat, $notice_periods_after_current, $fixation_periods_full, $include_zero_amount, $partial_proration_days, $fixed_trial_days, $currency)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlanListAsyncWithHttpInfo
     *
     * Get list of plans
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string[] $handles (optional)
     * @param  string[] $state (optional)
     * @param  string[] $schedule_type (optional)
     * @param  string[] $partial_period_handling (optional)
     * @param  string[] $setup_fee_handling (optional)
     * @param  string[] $fixed_life_time_unit (optional)
     * @param  string[] $trial_interval_unit (optional)
     * @param  string $dunning_plan_handle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $setup_fee_text (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $fixed_count (optional)
     * @param  string $fixed_life_time_length (optional)
     * @param  string $trial_interval_length (optional)
     * @param  string $interval_length (optional)
     * @param  string $schedule_fixed_day (optional)
     * @param  string $renewal_reminder_email_days (optional)
     * @param  string $trial_reminder_email_days (optional)
     * @param  string $base_month (optional)
     * @param  string $notice_periods (optional)
     * @param  string $minimum_prorated_amount (optional)
     * @param  string $fixation_periods (optional)
     * @param  string $setup_fee (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $notice_periods_after_current (optional)
     * @param  string $fixation_periods_full (optional)
     * @param  string $include_zero_amount (optional)
     * @param  string $partial_proration_days (optional)
     * @param  string $fixed_trial_days (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlanListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handles = null, $state = null, $schedule_type = null, $partial_period_handling = null, $setup_fee_handling = null, $fixed_life_time_unit = null, $trial_interval_unit = null, $dunning_plan_handle = null, $name = null, $description = null, $setup_fee_text = null, $amount = null, $quantity = null, $fixed_count = null, $fixed_life_time_length = null, $trial_interval_length = null, $interval_length = null, $schedule_fixed_day = null, $renewal_reminder_email_days = null, $trial_reminder_email_days = null, $base_month = null, $notice_periods = null, $minimum_prorated_amount = null, $fixation_periods = null, $setup_fee = null, $amount_incl_vat = null, $notice_periods_after_current = null, $fixation_periods_full = null, $include_zero_amount = null, $partial_proration_days = null, $fixed_trial_days = null, $currency = null)
    {
        $returnType = '\Reepay\Model\PlanList';
        $request = $this->getPlanListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handles, $state, $schedule_type, $partial_period_handling, $setup_fee_handling, $fixed_life_time_unit, $trial_interval_unit, $dunning_plan_handle, $name, $description, $setup_fee_text, $amount, $quantity, $fixed_count, $fixed_life_time_length, $trial_interval_length, $interval_length, $schedule_fixed_day, $renewal_reminder_email_days, $trial_reminder_email_days, $base_month, $notice_periods, $minimum_prorated_amount, $fixation_periods, $setup_fee, $amount_incl_vat, $notice_periods_after_current, $fixation_periods_full, $include_zero_amount, $partial_proration_days, $fixed_trial_days, $currency);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlanList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string[] $handles (optional)
     * @param  string[] $state (optional)
     * @param  string[] $schedule_type (optional)
     * @param  string[] $partial_period_handling (optional)
     * @param  string[] $setup_fee_handling (optional)
     * @param  string[] $fixed_life_time_unit (optional)
     * @param  string[] $trial_interval_unit (optional)
     * @param  string $dunning_plan_handle (optional)
     * @param  string $name (optional)
     * @param  string $description (optional)
     * @param  string $setup_fee_text (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $fixed_count (optional)
     * @param  string $fixed_life_time_length (optional)
     * @param  string $trial_interval_length (optional)
     * @param  string $interval_length (optional)
     * @param  string $schedule_fixed_day (optional)
     * @param  string $renewal_reminder_email_days (optional)
     * @param  string $trial_reminder_email_days (optional)
     * @param  string $base_month (optional)
     * @param  string $notice_periods (optional)
     * @param  string $minimum_prorated_amount (optional)
     * @param  string $fixation_periods (optional)
     * @param  string $setup_fee (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $notice_periods_after_current (optional)
     * @param  string $fixation_periods_full (optional)
     * @param  string $include_zero_amount (optional)
     * @param  string $partial_proration_days (optional)
     * @param  string $fixed_trial_days (optional)
     * @param  string[] $currency (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPlanListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handles = null, $state = null, $schedule_type = null, $partial_period_handling = null, $setup_fee_handling = null, $fixed_life_time_unit = null, $trial_interval_unit = null, $dunning_plan_handle = null, $name = null, $description = null, $setup_fee_text = null, $amount = null, $quantity = null, $fixed_count = null, $fixed_life_time_length = null, $trial_interval_length = null, $interval_length = null, $schedule_fixed_day = null, $renewal_reminder_email_days = null, $trial_reminder_email_days = null, $base_month = null, $notice_periods = null, $minimum_prorated_amount = null, $fixation_periods = null, $setup_fee = null, $amount_incl_vat = null, $notice_periods_after_current = null, $fixation_periods_full = null, $include_zero_amount = null, $partial_proration_days = null, $fixed_trial_days = null, $currency = null)
    {

        $resourcePath = '/v1/list/plan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }
        // query params
        if ($handle_prefix !== null) {
            $queryParams['handle_prefix'] = ObjectSerializer::toQueryValue($handle_prefix, null);
        }
        // query params
        if (is_array($handles)) {
            $handles = ObjectSerializer::serializeCollection($handles, 'multi', true);
        }
        if ($handles !== null) {
            $queryParams['handles'] = ObjectSerializer::toQueryValue($handles, null);
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if (is_array($schedule_type)) {
            $schedule_type = ObjectSerializer::serializeCollection($schedule_type, 'multi', true);
        }
        if ($schedule_type !== null) {
            $queryParams['schedule_type'] = ObjectSerializer::toQueryValue($schedule_type, null);
        }
        // query params
        if (is_array($partial_period_handling)) {
            $partial_period_handling = ObjectSerializer::serializeCollection($partial_period_handling, 'multi', true);
        }
        if ($partial_period_handling !== null) {
            $queryParams['partial_period_handling'] = ObjectSerializer::toQueryValue($partial_period_handling, null);
        }
        // query params
        if (is_array($setup_fee_handling)) {
            $setup_fee_handling = ObjectSerializer::serializeCollection($setup_fee_handling, 'multi', true);
        }
        if ($setup_fee_handling !== null) {
            $queryParams['setup_fee_handling'] = ObjectSerializer::toQueryValue($setup_fee_handling, null);
        }
        // query params
        if (is_array($fixed_life_time_unit)) {
            $fixed_life_time_unit = ObjectSerializer::serializeCollection($fixed_life_time_unit, 'multi', true);
        }
        if ($fixed_life_time_unit !== null) {
            $queryParams['fixed_life_time_unit'] = ObjectSerializer::toQueryValue($fixed_life_time_unit, null);
        }
        // query params
        if (is_array($trial_interval_unit)) {
            $trial_interval_unit = ObjectSerializer::serializeCollection($trial_interval_unit, 'multi', true);
        }
        if ($trial_interval_unit !== null) {
            $queryParams['trial_interval_unit'] = ObjectSerializer::toQueryValue($trial_interval_unit, null);
        }
        // query params
        if ($dunning_plan_handle !== null) {
            $queryParams['dunning_plan_handle'] = ObjectSerializer::toQueryValue($dunning_plan_handle, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = ObjectSerializer::toQueryValue($description, null);
        }
        // query params
        if ($setup_fee_text !== null) {
            $queryParams['setup_fee_text'] = ObjectSerializer::toQueryValue($setup_fee_text, null);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['quantity'] = ObjectSerializer::toQueryValue($quantity, null);
        }
        // query params
        if ($fixed_count !== null) {
            $queryParams['fixed_count'] = ObjectSerializer::toQueryValue($fixed_count, null);
        }
        // query params
        if ($fixed_life_time_length !== null) {
            $queryParams['fixed_life_time_length'] = ObjectSerializer::toQueryValue($fixed_life_time_length, null);
        }
        // query params
        if ($trial_interval_length !== null) {
            $queryParams['trial_interval_length'] = ObjectSerializer::toQueryValue($trial_interval_length, null);
        }
        // query params
        if ($interval_length !== null) {
            $queryParams['interval_length'] = ObjectSerializer::toQueryValue($interval_length, null);
        }
        // query params
        if ($schedule_fixed_day !== null) {
            $queryParams['schedule_fixed_day'] = ObjectSerializer::toQueryValue($schedule_fixed_day, null);
        }
        // query params
        if ($renewal_reminder_email_days !== null) {
            $queryParams['renewal_reminder_email_days'] = ObjectSerializer::toQueryValue($renewal_reminder_email_days, null);
        }
        // query params
        if ($trial_reminder_email_days !== null) {
            $queryParams['trial_reminder_email_days'] = ObjectSerializer::toQueryValue($trial_reminder_email_days, null);
        }
        // query params
        if ($base_month !== null) {
            $queryParams['base_month'] = ObjectSerializer::toQueryValue($base_month, null);
        }
        // query params
        if ($notice_periods !== null) {
            $queryParams['notice_periods'] = ObjectSerializer::toQueryValue($notice_periods, null);
        }
        // query params
        if ($minimum_prorated_amount !== null) {
            $queryParams['minimum_prorated_amount'] = ObjectSerializer::toQueryValue($minimum_prorated_amount, null);
        }
        // query params
        if ($fixation_periods !== null) {
            $queryParams['fixation_periods'] = ObjectSerializer::toQueryValue($fixation_periods, null);
        }
        // query params
        if ($setup_fee !== null) {
            $queryParams['setup_fee'] = ObjectSerializer::toQueryValue($setup_fee, null);
        }
        // query params
        if ($amount_incl_vat !== null) {
            $queryParams['amount_incl_vat'] = ObjectSerializer::toQueryValue($amount_incl_vat, null);
        }
        // query params
        if ($notice_periods_after_current !== null) {
            $queryParams['notice_periods_after_current'] = ObjectSerializer::toQueryValue($notice_periods_after_current, null);
        }
        // query params
        if ($fixation_periods_full !== null) {
            $queryParams['fixation_periods_full'] = ObjectSerializer::toQueryValue($fixation_periods_full, null);
        }
        // query params
        if ($include_zero_amount !== null) {
            $queryParams['include_zero_amount'] = ObjectSerializer::toQueryValue($include_zero_amount, null);
        }
        // query params
        if ($partial_proration_days !== null) {
            $queryParams['partial_proration_days'] = ObjectSerializer::toQueryValue($partial_proration_days, null);
        }
        // query params
        if ($fixed_trial_days !== null) {
            $queryParams['fixed_trial_days'] = ObjectSerializer::toQueryValue($fixed_trial_days, null);
        }
        // query params
        if (is_array($currency)) {
            $currency = ObjectSerializer::serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = ObjectSerializer::toQueryValue($currency, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionList
     *
     * Get list of subscriptions
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string $handle handle (optional)
     * @param  string $handle_prefix handle_prefix (optional)
     * @param  string $handle_contains handle_contains (optional)
     * @param  string $customer customer (optional)
     * @param  string $plan plan (optional)
     * @param  string[] $state state (optional)
     * @param  string $amount amount (optional)
     * @param  string $quantity quantity (optional)
     * @param  string $activated activated (optional)
     * @param  string $cancelled_date cancelled_date (optional)
     * @param  string $reactivated reactivated (optional)
     * @param  string $created created (optional)
     * @param  string $renewing renewing (optional)
     * @param  int $plan_version plan_version (optional)
     * @param  string $amount_incl_vat amount_incl_vat (optional)
     * @param  string $start_date start_date (optional)
     * @param  string $end_date end_date (optional)
     * @param  string $grace_duration grace_duration (optional)
     * @param  string $current_period_start current_period_start (optional)
     * @param  string $next_period_start next_period_start (optional)
     * @param  string $first_period_start first_period_start (optional)
     * @param  string $last_period_start last_period_start (optional)
     * @param  string $trial_start trial_start (optional)
     * @param  string $trial_end trial_end (optional)
     * @param  string $in_trial in_trial (optional)
     * @param  string $has_started has_started (optional)
     * @param  string $renewal_count renewal_count (optional)
     * @param  string $expired_date expired_date (optional)
     * @param  string[] $expire_reason expire_reason (optional)
     * @param  string $on_hold_date on_hold_date (optional)
     * @param  string[] $on_hold_reason on_hold_reason (optional)
     * @param  string $payment_method_added payment_method_added (optional)
     * @param  string $reminder_email_sent reminder_email_sent (optional)
     * @param  string $failed_invoices failed_invoices (optional)
     * @param  string $failed_amount failed_amount (optional)
     * @param  string $cancelled_invoices cancelled_invoices (optional)
     * @param  string $cancelled_amount cancelled_amount (optional)
     * @param  string $pending_invoices pending_invoices (optional)
     * @param  string $pending_amount pending_amount (optional)
     * @param  string $dunning_invoices dunning_invoices (optional)
     * @param  string $dunning_amount dunning_amount (optional)
     * @param  string $settled_invoices settled_invoices (optional)
     * @param  string $settled_amount settled_amount (optional)
     * @param  string $refunded_amount refunded_amount (optional)
     * @param  string $pending_additional_costs pending_additional_costs (optional)
     * @param  string $pending_additional_cost_amount pending_additional_cost_amount (optional)
     * @param  string $transferred_additional_costs transferred_additional_costs (optional)
     * @param  string $transferred_additional_cost_amount transferred_additional_cost_amount (optional)
     * @param  string $pending_credits pending_credits (optional)
     * @param  string $pending_credit_amount pending_credit_amount (optional)
     * @param  string $transferred_credits transferred_credits (optional)
     * @param  string $transferred_credit_amount transferred_credit_amount (optional)
     * @param  string $subscription_add_on_handle subscription_add_on_handle (optional)
     * @param  string $add_on_handle add_on_handle (optional)
     * @param  string $subscription_discount_handle subscription_discount_handle (optional)
     * @param  string $discount_handle discount_handle (optional)
     * @param  string $coupon_handle coupon_handle (optional)
     * @param  string $payment_method payment_method (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\SubscriptionList
     */
    public function getSubscriptionList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $customer = null, $plan = null, $state = null, $amount = null, $quantity = null, $activated = null, $cancelled_date = null, $reactivated = null, $created = null, $renewing = null, $plan_version = null, $amount_incl_vat = null, $start_date = null, $end_date = null, $grace_duration = null, $current_period_start = null, $next_period_start = null, $first_period_start = null, $last_period_start = null, $trial_start = null, $trial_end = null, $in_trial = null, $has_started = null, $renewal_count = null, $expired_date = null, $expire_reason = null, $on_hold_date = null, $on_hold_reason = null, $payment_method_added = null, $reminder_email_sent = null, $failed_invoices = null, $failed_amount = null, $cancelled_invoices = null, $cancelled_amount = null, $pending_invoices = null, $pending_amount = null, $dunning_invoices = null, $dunning_amount = null, $settled_invoices = null, $settled_amount = null, $refunded_amount = null, $pending_additional_costs = null, $pending_additional_cost_amount = null, $transferred_additional_costs = null, $transferred_additional_cost_amount = null, $pending_credits = null, $pending_credit_amount = null, $transferred_credits = null, $transferred_credit_amount = null, $subscription_add_on_handle = null, $add_on_handle = null, $subscription_discount_handle = null, $discount_handle = null, $coupon_handle = null, $payment_method = null)
    {
        list($response) = $this->getSubscriptionListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $customer, $plan, $state, $amount, $quantity, $activated, $cancelled_date, $reactivated, $created, $renewing, $plan_version, $amount_incl_vat, $start_date, $end_date, $grace_duration, $current_period_start, $next_period_start, $first_period_start, $last_period_start, $trial_start, $trial_end, $in_trial, $has_started, $renewal_count, $expired_date, $expire_reason, $on_hold_date, $on_hold_reason, $payment_method_added, $reminder_email_sent, $failed_invoices, $failed_amount, $cancelled_invoices, $cancelled_amount, $pending_invoices, $pending_amount, $dunning_invoices, $dunning_amount, $settled_invoices, $settled_amount, $refunded_amount, $pending_additional_costs, $pending_additional_cost_amount, $transferred_additional_costs, $transferred_additional_cost_amount, $pending_credits, $pending_credit_amount, $transferred_credits, $transferred_credit_amount, $subscription_add_on_handle, $add_on_handle, $subscription_discount_handle, $discount_handle, $coupon_handle, $payment_method);
        return $response;
    }

    /**
     * Operation getSubscriptionListWithHttpInfo
     *
     * Get list of subscriptions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $customer (optional)
     * @param  string $plan (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $activated (optional)
     * @param  string $cancelled_date (optional)
     * @param  string $reactivated (optional)
     * @param  string $created (optional)
     * @param  string $renewing (optional)
     * @param  int $plan_version (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     * @param  string $grace_duration (optional)
     * @param  string $current_period_start (optional)
     * @param  string $next_period_start (optional)
     * @param  string $first_period_start (optional)
     * @param  string $last_period_start (optional)
     * @param  string $trial_start (optional)
     * @param  string $trial_end (optional)
     * @param  string $in_trial (optional)
     * @param  string $has_started (optional)
     * @param  string $renewal_count (optional)
     * @param  string $expired_date (optional)
     * @param  string[] $expire_reason (optional)
     * @param  string $on_hold_date (optional)
     * @param  string[] $on_hold_reason (optional)
     * @param  string $payment_method_added (optional)
     * @param  string $reminder_email_sent (optional)
     * @param  string $failed_invoices (optional)
     * @param  string $failed_amount (optional)
     * @param  string $cancelled_invoices (optional)
     * @param  string $cancelled_amount (optional)
     * @param  string $pending_invoices (optional)
     * @param  string $pending_amount (optional)
     * @param  string $dunning_invoices (optional)
     * @param  string $dunning_amount (optional)
     * @param  string $settled_invoices (optional)
     * @param  string $settled_amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $pending_additional_costs (optional)
     * @param  string $pending_additional_cost_amount (optional)
     * @param  string $transferred_additional_costs (optional)
     * @param  string $transferred_additional_cost_amount (optional)
     * @param  string $pending_credits (optional)
     * @param  string $pending_credit_amount (optional)
     * @param  string $transferred_credits (optional)
     * @param  string $transferred_credit_amount (optional)
     * @param  string $subscription_add_on_handle (optional)
     * @param  string $add_on_handle (optional)
     * @param  string $subscription_discount_handle (optional)
     * @param  string $discount_handle (optional)
     * @param  string $coupon_handle (optional)
     * @param  string $payment_method (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\SubscriptionList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $customer = null, $plan = null, $state = null, $amount = null, $quantity = null, $activated = null, $cancelled_date = null, $reactivated = null, $created = null, $renewing = null, $plan_version = null, $amount_incl_vat = null, $start_date = null, $end_date = null, $grace_duration = null, $current_period_start = null, $next_period_start = null, $first_period_start = null, $last_period_start = null, $trial_start = null, $trial_end = null, $in_trial = null, $has_started = null, $renewal_count = null, $expired_date = null, $expire_reason = null, $on_hold_date = null, $on_hold_reason = null, $payment_method_added = null, $reminder_email_sent = null, $failed_invoices = null, $failed_amount = null, $cancelled_invoices = null, $cancelled_amount = null, $pending_invoices = null, $pending_amount = null, $dunning_invoices = null, $dunning_amount = null, $settled_invoices = null, $settled_amount = null, $refunded_amount = null, $pending_additional_costs = null, $pending_additional_cost_amount = null, $transferred_additional_costs = null, $transferred_additional_cost_amount = null, $pending_credits = null, $pending_credit_amount = null, $transferred_credits = null, $transferred_credit_amount = null, $subscription_add_on_handle = null, $add_on_handle = null, $subscription_discount_handle = null, $discount_handle = null, $coupon_handle = null, $payment_method = null)
    {
        $returnType = '\Reepay\Model\SubscriptionList';
        $request = $this->getSubscriptionListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $customer, $plan, $state, $amount, $quantity, $activated, $cancelled_date, $reactivated, $created, $renewing, $plan_version, $amount_incl_vat, $start_date, $end_date, $grace_duration, $current_period_start, $next_period_start, $first_period_start, $last_period_start, $trial_start, $trial_end, $in_trial, $has_started, $renewal_count, $expired_date, $expire_reason, $on_hold_date, $on_hold_reason, $payment_method_added, $reminder_email_sent, $failed_invoices, $failed_amount, $cancelled_invoices, $cancelled_amount, $pending_invoices, $pending_amount, $dunning_invoices, $dunning_amount, $settled_invoices, $settled_amount, $refunded_amount, $pending_additional_costs, $pending_additional_cost_amount, $transferred_additional_costs, $transferred_additional_cost_amount, $pending_credits, $pending_credit_amount, $transferred_credits, $transferred_credit_amount, $subscription_add_on_handle, $add_on_handle, $subscription_discount_handle, $discount_handle, $coupon_handle, $payment_method);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\SubscriptionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionListAsync
     *
     * Get list of subscriptions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $customer (optional)
     * @param  string $plan (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $activated (optional)
     * @param  string $cancelled_date (optional)
     * @param  string $reactivated (optional)
     * @param  string $created (optional)
     * @param  string $renewing (optional)
     * @param  int $plan_version (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     * @param  string $grace_duration (optional)
     * @param  string $current_period_start (optional)
     * @param  string $next_period_start (optional)
     * @param  string $first_period_start (optional)
     * @param  string $last_period_start (optional)
     * @param  string $trial_start (optional)
     * @param  string $trial_end (optional)
     * @param  string $in_trial (optional)
     * @param  string $has_started (optional)
     * @param  string $renewal_count (optional)
     * @param  string $expired_date (optional)
     * @param  string[] $expire_reason (optional)
     * @param  string $on_hold_date (optional)
     * @param  string[] $on_hold_reason (optional)
     * @param  string $payment_method_added (optional)
     * @param  string $reminder_email_sent (optional)
     * @param  string $failed_invoices (optional)
     * @param  string $failed_amount (optional)
     * @param  string $cancelled_invoices (optional)
     * @param  string $cancelled_amount (optional)
     * @param  string $pending_invoices (optional)
     * @param  string $pending_amount (optional)
     * @param  string $dunning_invoices (optional)
     * @param  string $dunning_amount (optional)
     * @param  string $settled_invoices (optional)
     * @param  string $settled_amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $pending_additional_costs (optional)
     * @param  string $pending_additional_cost_amount (optional)
     * @param  string $transferred_additional_costs (optional)
     * @param  string $transferred_additional_cost_amount (optional)
     * @param  string $pending_credits (optional)
     * @param  string $pending_credit_amount (optional)
     * @param  string $transferred_credits (optional)
     * @param  string $transferred_credit_amount (optional)
     * @param  string $subscription_add_on_handle (optional)
     * @param  string $add_on_handle (optional)
     * @param  string $subscription_discount_handle (optional)
     * @param  string $discount_handle (optional)
     * @param  string $coupon_handle (optional)
     * @param  string $payment_method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $customer = null, $plan = null, $state = null, $amount = null, $quantity = null, $activated = null, $cancelled_date = null, $reactivated = null, $created = null, $renewing = null, $plan_version = null, $amount_incl_vat = null, $start_date = null, $end_date = null, $grace_duration = null, $current_period_start = null, $next_period_start = null, $first_period_start = null, $last_period_start = null, $trial_start = null, $trial_end = null, $in_trial = null, $has_started = null, $renewal_count = null, $expired_date = null, $expire_reason = null, $on_hold_date = null, $on_hold_reason = null, $payment_method_added = null, $reminder_email_sent = null, $failed_invoices = null, $failed_amount = null, $cancelled_invoices = null, $cancelled_amount = null, $pending_invoices = null, $pending_amount = null, $dunning_invoices = null, $dunning_amount = null, $settled_invoices = null, $settled_amount = null, $refunded_amount = null, $pending_additional_costs = null, $pending_additional_cost_amount = null, $transferred_additional_costs = null, $transferred_additional_cost_amount = null, $pending_credits = null, $pending_credit_amount = null, $transferred_credits = null, $transferred_credit_amount = null, $subscription_add_on_handle = null, $add_on_handle = null, $subscription_discount_handle = null, $discount_handle = null, $coupon_handle = null, $payment_method = null)
    {
        return $this->getSubscriptionListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $customer, $plan, $state, $amount, $quantity, $activated, $cancelled_date, $reactivated, $created, $renewing, $plan_version, $amount_incl_vat, $start_date, $end_date, $grace_duration, $current_period_start, $next_period_start, $first_period_start, $last_period_start, $trial_start, $trial_end, $in_trial, $has_started, $renewal_count, $expired_date, $expire_reason, $on_hold_date, $on_hold_reason, $payment_method_added, $reminder_email_sent, $failed_invoices, $failed_amount, $cancelled_invoices, $cancelled_amount, $pending_invoices, $pending_amount, $dunning_invoices, $dunning_amount, $settled_invoices, $settled_amount, $refunded_amount, $pending_additional_costs, $pending_additional_cost_amount, $transferred_additional_costs, $transferred_additional_cost_amount, $pending_credits, $pending_credit_amount, $transferred_credits, $transferred_credit_amount, $subscription_add_on_handle, $add_on_handle, $subscription_discount_handle, $discount_handle, $coupon_handle, $payment_method)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionListAsyncWithHttpInfo
     *
     * Get list of subscriptions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $customer (optional)
     * @param  string $plan (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $activated (optional)
     * @param  string $cancelled_date (optional)
     * @param  string $reactivated (optional)
     * @param  string $created (optional)
     * @param  string $renewing (optional)
     * @param  int $plan_version (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     * @param  string $grace_duration (optional)
     * @param  string $current_period_start (optional)
     * @param  string $next_period_start (optional)
     * @param  string $first_period_start (optional)
     * @param  string $last_period_start (optional)
     * @param  string $trial_start (optional)
     * @param  string $trial_end (optional)
     * @param  string $in_trial (optional)
     * @param  string $has_started (optional)
     * @param  string $renewal_count (optional)
     * @param  string $expired_date (optional)
     * @param  string[] $expire_reason (optional)
     * @param  string $on_hold_date (optional)
     * @param  string[] $on_hold_reason (optional)
     * @param  string $payment_method_added (optional)
     * @param  string $reminder_email_sent (optional)
     * @param  string $failed_invoices (optional)
     * @param  string $failed_amount (optional)
     * @param  string $cancelled_invoices (optional)
     * @param  string $cancelled_amount (optional)
     * @param  string $pending_invoices (optional)
     * @param  string $pending_amount (optional)
     * @param  string $dunning_invoices (optional)
     * @param  string $dunning_amount (optional)
     * @param  string $settled_invoices (optional)
     * @param  string $settled_amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $pending_additional_costs (optional)
     * @param  string $pending_additional_cost_amount (optional)
     * @param  string $transferred_additional_costs (optional)
     * @param  string $transferred_additional_cost_amount (optional)
     * @param  string $pending_credits (optional)
     * @param  string $pending_credit_amount (optional)
     * @param  string $transferred_credits (optional)
     * @param  string $transferred_credit_amount (optional)
     * @param  string $subscription_add_on_handle (optional)
     * @param  string $add_on_handle (optional)
     * @param  string $subscription_discount_handle (optional)
     * @param  string $discount_handle (optional)
     * @param  string $coupon_handle (optional)
     * @param  string $payment_method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $customer = null, $plan = null, $state = null, $amount = null, $quantity = null, $activated = null, $cancelled_date = null, $reactivated = null, $created = null, $renewing = null, $plan_version = null, $amount_incl_vat = null, $start_date = null, $end_date = null, $grace_duration = null, $current_period_start = null, $next_period_start = null, $first_period_start = null, $last_period_start = null, $trial_start = null, $trial_end = null, $in_trial = null, $has_started = null, $renewal_count = null, $expired_date = null, $expire_reason = null, $on_hold_date = null, $on_hold_reason = null, $payment_method_added = null, $reminder_email_sent = null, $failed_invoices = null, $failed_amount = null, $cancelled_invoices = null, $cancelled_amount = null, $pending_invoices = null, $pending_amount = null, $dunning_invoices = null, $dunning_amount = null, $settled_invoices = null, $settled_amount = null, $refunded_amount = null, $pending_additional_costs = null, $pending_additional_cost_amount = null, $transferred_additional_costs = null, $transferred_additional_cost_amount = null, $pending_credits = null, $pending_credit_amount = null, $transferred_credits = null, $transferred_credit_amount = null, $subscription_add_on_handle = null, $add_on_handle = null, $subscription_discount_handle = null, $discount_handle = null, $coupon_handle = null, $payment_method = null)
    {
        $returnType = '\Reepay\Model\SubscriptionList';
        $request = $this->getSubscriptionListRequest($from, $to, $interval, $size, $next_page_token, $range, $handle, $handle_prefix, $handle_contains, $customer, $plan, $state, $amount, $quantity, $activated, $cancelled_date, $reactivated, $created, $renewing, $plan_version, $amount_incl_vat, $start_date, $end_date, $grace_duration, $current_period_start, $next_period_start, $first_period_start, $last_period_start, $trial_start, $trial_end, $in_trial, $has_started, $renewal_count, $expired_date, $expire_reason, $on_hold_date, $on_hold_reason, $payment_method_added, $reminder_email_sent, $failed_invoices, $failed_amount, $cancelled_invoices, $cancelled_amount, $pending_invoices, $pending_amount, $dunning_invoices, $dunning_amount, $settled_invoices, $settled_amount, $refunded_amount, $pending_additional_costs, $pending_additional_cost_amount, $transferred_additional_costs, $transferred_additional_cost_amount, $pending_credits, $pending_credit_amount, $transferred_credits, $transferred_credit_amount, $subscription_add_on_handle, $add_on_handle, $subscription_discount_handle, $discount_handle, $coupon_handle, $payment_method);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $handle (optional)
     * @param  string $handle_prefix (optional)
     * @param  string $handle_contains (optional)
     * @param  string $customer (optional)
     * @param  string $plan (optional)
     * @param  string[] $state (optional)
     * @param  string $amount (optional)
     * @param  string $quantity (optional)
     * @param  string $activated (optional)
     * @param  string $cancelled_date (optional)
     * @param  string $reactivated (optional)
     * @param  string $created (optional)
     * @param  string $renewing (optional)
     * @param  int $plan_version (optional)
     * @param  string $amount_incl_vat (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     * @param  string $grace_duration (optional)
     * @param  string $current_period_start (optional)
     * @param  string $next_period_start (optional)
     * @param  string $first_period_start (optional)
     * @param  string $last_period_start (optional)
     * @param  string $trial_start (optional)
     * @param  string $trial_end (optional)
     * @param  string $in_trial (optional)
     * @param  string $has_started (optional)
     * @param  string $renewal_count (optional)
     * @param  string $expired_date (optional)
     * @param  string[] $expire_reason (optional)
     * @param  string $on_hold_date (optional)
     * @param  string[] $on_hold_reason (optional)
     * @param  string $payment_method_added (optional)
     * @param  string $reminder_email_sent (optional)
     * @param  string $failed_invoices (optional)
     * @param  string $failed_amount (optional)
     * @param  string $cancelled_invoices (optional)
     * @param  string $cancelled_amount (optional)
     * @param  string $pending_invoices (optional)
     * @param  string $pending_amount (optional)
     * @param  string $dunning_invoices (optional)
     * @param  string $dunning_amount (optional)
     * @param  string $settled_invoices (optional)
     * @param  string $settled_amount (optional)
     * @param  string $refunded_amount (optional)
     * @param  string $pending_additional_costs (optional)
     * @param  string $pending_additional_cost_amount (optional)
     * @param  string $transferred_additional_costs (optional)
     * @param  string $transferred_additional_cost_amount (optional)
     * @param  string $pending_credits (optional)
     * @param  string $pending_credit_amount (optional)
     * @param  string $transferred_credits (optional)
     * @param  string $transferred_credit_amount (optional)
     * @param  string $subscription_add_on_handle (optional)
     * @param  string $add_on_handle (optional)
     * @param  string $subscription_discount_handle (optional)
     * @param  string $discount_handle (optional)
     * @param  string $coupon_handle (optional)
     * @param  string $payment_method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriptionListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $handle = null, $handle_prefix = null, $handle_contains = null, $customer = null, $plan = null, $state = null, $amount = null, $quantity = null, $activated = null, $cancelled_date = null, $reactivated = null, $created = null, $renewing = null, $plan_version = null, $amount_incl_vat = null, $start_date = null, $end_date = null, $grace_duration = null, $current_period_start = null, $next_period_start = null, $first_period_start = null, $last_period_start = null, $trial_start = null, $trial_end = null, $in_trial = null, $has_started = null, $renewal_count = null, $expired_date = null, $expire_reason = null, $on_hold_date = null, $on_hold_reason = null, $payment_method_added = null, $reminder_email_sent = null, $failed_invoices = null, $failed_amount = null, $cancelled_invoices = null, $cancelled_amount = null, $pending_invoices = null, $pending_amount = null, $dunning_invoices = null, $dunning_amount = null, $settled_invoices = null, $settled_amount = null, $refunded_amount = null, $pending_additional_costs = null, $pending_additional_cost_amount = null, $transferred_additional_costs = null, $transferred_additional_cost_amount = null, $pending_credits = null, $pending_credit_amount = null, $transferred_credits = null, $transferred_credit_amount = null, $subscription_add_on_handle = null, $add_on_handle = null, $subscription_discount_handle = null, $discount_handle = null, $coupon_handle = null, $payment_method = null)
    {

        $resourcePath = '/v1/list/subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if ($handle !== null) {
            $queryParams['handle'] = ObjectSerializer::toQueryValue($handle, null);
        }
        // query params
        if ($handle_prefix !== null) {
            $queryParams['handle_prefix'] = ObjectSerializer::toQueryValue($handle_prefix, null);
        }
        // query params
        if ($handle_contains !== null) {
            $queryParams['handle_contains'] = ObjectSerializer::toQueryValue($handle_contains, null);
        }
        // query params
        if ($customer !== null) {
            $queryParams['customer'] = ObjectSerializer::toQueryValue($customer, null);
        }
        // query params
        if ($plan !== null) {
            $queryParams['plan'] = ObjectSerializer::toQueryValue($plan, null);
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['quantity'] = ObjectSerializer::toQueryValue($quantity, null);
        }
        // query params
        if ($activated !== null) {
            $queryParams['activated'] = ObjectSerializer::toQueryValue($activated, null);
        }
        // query params
        if ($cancelled_date !== null) {
            $queryParams['cancelled_date'] = ObjectSerializer::toQueryValue($cancelled_date, null);
        }
        // query params
        if ($reactivated !== null) {
            $queryParams['reactivated'] = ObjectSerializer::toQueryValue($reactivated, null);
        }
        // query params
        if ($created !== null) {
            $queryParams['created'] = ObjectSerializer::toQueryValue($created, null);
        }
        // query params
        if ($renewing !== null) {
            $queryParams['renewing'] = ObjectSerializer::toQueryValue($renewing, null);
        }
        // query params
        if ($plan_version !== null) {
            $queryParams['plan_version'] = ObjectSerializer::toQueryValue($plan_version, 'int32');
        }
        // query params
        if ($amount_incl_vat !== null) {
            $queryParams['amount_incl_vat'] = ObjectSerializer::toQueryValue($amount_incl_vat, null);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date, null);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date, null);
        }
        // query params
        if ($grace_duration !== null) {
            $queryParams['grace_duration'] = ObjectSerializer::toQueryValue($grace_duration, null);
        }
        // query params
        if ($current_period_start !== null) {
            $queryParams['current_period_start'] = ObjectSerializer::toQueryValue($current_period_start, null);
        }
        // query params
        if ($next_period_start !== null) {
            $queryParams['next_period_start'] = ObjectSerializer::toQueryValue($next_period_start, null);
        }
        // query params
        if ($first_period_start !== null) {
            $queryParams['first_period_start'] = ObjectSerializer::toQueryValue($first_period_start, null);
        }
        // query params
        if ($last_period_start !== null) {
            $queryParams['last_period_start'] = ObjectSerializer::toQueryValue($last_period_start, null);
        }
        // query params
        if ($trial_start !== null) {
            $queryParams['trial_start'] = ObjectSerializer::toQueryValue($trial_start, null);
        }
        // query params
        if ($trial_end !== null) {
            $queryParams['trial_end'] = ObjectSerializer::toQueryValue($trial_end, null);
        }
        // query params
        if ($in_trial !== null) {
            $queryParams['in_trial'] = ObjectSerializer::toQueryValue($in_trial, null);
        }
        // query params
        if ($has_started !== null) {
            $queryParams['has_started'] = ObjectSerializer::toQueryValue($has_started, null);
        }
        // query params
        if ($renewal_count !== null) {
            $queryParams['renewal_count'] = ObjectSerializer::toQueryValue($renewal_count, null);
        }
        // query params
        if ($expired_date !== null) {
            $queryParams['expired_date'] = ObjectSerializer::toQueryValue($expired_date, null);
        }
        // query params
        if (is_array($expire_reason)) {
            $expire_reason = ObjectSerializer::serializeCollection($expire_reason, 'multi', true);
        }
        if ($expire_reason !== null) {
            $queryParams['expire_reason'] = ObjectSerializer::toQueryValue($expire_reason, null);
        }
        // query params
        if ($on_hold_date !== null) {
            $queryParams['on_hold_date'] = ObjectSerializer::toQueryValue($on_hold_date, null);
        }
        // query params
        if (is_array($on_hold_reason)) {
            $on_hold_reason = ObjectSerializer::serializeCollection($on_hold_reason, 'multi', true);
        }
        if ($on_hold_reason !== null) {
            $queryParams['on_hold_reason'] = ObjectSerializer::toQueryValue($on_hold_reason, null);
        }
        // query params
        if ($payment_method_added !== null) {
            $queryParams['payment_method_added'] = ObjectSerializer::toQueryValue($payment_method_added, null);
        }
        // query params
        if ($reminder_email_sent !== null) {
            $queryParams['reminder_email_sent'] = ObjectSerializer::toQueryValue($reminder_email_sent, null);
        }
        // query params
        if ($failed_invoices !== null) {
            $queryParams['failed_invoices'] = ObjectSerializer::toQueryValue($failed_invoices, null);
        }
        // query params
        if ($failed_amount !== null) {
            $queryParams['failed_amount'] = ObjectSerializer::toQueryValue($failed_amount, null);
        }
        // query params
        if ($cancelled_invoices !== null) {
            $queryParams['cancelled_invoices'] = ObjectSerializer::toQueryValue($cancelled_invoices, null);
        }
        // query params
        if ($cancelled_amount !== null) {
            $queryParams['cancelled_amount'] = ObjectSerializer::toQueryValue($cancelled_amount, null);
        }
        // query params
        if ($pending_invoices !== null) {
            $queryParams['pending_invoices'] = ObjectSerializer::toQueryValue($pending_invoices, null);
        }
        // query params
        if ($pending_amount !== null) {
            $queryParams['pending_amount'] = ObjectSerializer::toQueryValue($pending_amount, null);
        }
        // query params
        if ($dunning_invoices !== null) {
            $queryParams['dunning_invoices'] = ObjectSerializer::toQueryValue($dunning_invoices, null);
        }
        // query params
        if ($dunning_amount !== null) {
            $queryParams['dunning_amount'] = ObjectSerializer::toQueryValue($dunning_amount, null);
        }
        // query params
        if ($settled_invoices !== null) {
            $queryParams['settled_invoices'] = ObjectSerializer::toQueryValue($settled_invoices, null);
        }
        // query params
        if ($settled_amount !== null) {
            $queryParams['settled_amount'] = ObjectSerializer::toQueryValue($settled_amount, null);
        }
        // query params
        if ($refunded_amount !== null) {
            $queryParams['refunded_amount'] = ObjectSerializer::toQueryValue($refunded_amount, null);
        }
        // query params
        if ($pending_additional_costs !== null) {
            $queryParams['pending_additional_costs'] = ObjectSerializer::toQueryValue($pending_additional_costs, null);
        }
        // query params
        if ($pending_additional_cost_amount !== null) {
            $queryParams['pending_additional_cost_amount'] = ObjectSerializer::toQueryValue($pending_additional_cost_amount, null);
        }
        // query params
        if ($transferred_additional_costs !== null) {
            $queryParams['transferred_additional_costs'] = ObjectSerializer::toQueryValue($transferred_additional_costs, null);
        }
        // query params
        if ($transferred_additional_cost_amount !== null) {
            $queryParams['transferred_additional_cost_amount'] = ObjectSerializer::toQueryValue($transferred_additional_cost_amount, null);
        }
        // query params
        if ($pending_credits !== null) {
            $queryParams['pending_credits'] = ObjectSerializer::toQueryValue($pending_credits, null);
        }
        // query params
        if ($pending_credit_amount !== null) {
            $queryParams['pending_credit_amount'] = ObjectSerializer::toQueryValue($pending_credit_amount, null);
        }
        // query params
        if ($transferred_credits !== null) {
            $queryParams['transferred_credits'] = ObjectSerializer::toQueryValue($transferred_credits, null);
        }
        // query params
        if ($transferred_credit_amount !== null) {
            $queryParams['transferred_credit_amount'] = ObjectSerializer::toQueryValue($transferred_credit_amount, null);
        }
        // query params
        if ($subscription_add_on_handle !== null) {
            $queryParams['subscription_add_on_handle'] = ObjectSerializer::toQueryValue($subscription_add_on_handle, null);
        }
        // query params
        if ($add_on_handle !== null) {
            $queryParams['add_on_handle'] = ObjectSerializer::toQueryValue($add_on_handle, null);
        }
        // query params
        if ($subscription_discount_handle !== null) {
            $queryParams['subscription_discount_handle'] = ObjectSerializer::toQueryValue($subscription_discount_handle, null);
        }
        // query params
        if ($discount_handle !== null) {
            $queryParams['discount_handle'] = ObjectSerializer::toQueryValue($discount_handle, null);
        }
        // query params
        if ($coupon_handle !== null) {
            $queryParams['coupon_handle'] = ObjectSerializer::toQueryValue($coupon_handle, null);
        }
        // query params
        if ($payment_method !== null) {
            $queryParams['payment_method'] = ObjectSerializer::toQueryValue($payment_method, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTaxPolicyList
     *
     * Get list of tax policies
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\TaxPolicyList
     */
    public function getTaxPolicyList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null)
    {
        list($response) = $this->getTaxPolicyListWithHttpInfo($from, $to, $interval, $size, $next_page_token);
        return $response;
    }

    /**
     * Operation getTaxPolicyListWithHttpInfo
     *
     * Get list of tax policies
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\TaxPolicyList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaxPolicyListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null)
    {
        $returnType = '\Reepay\Model\TaxPolicyList';
        $request = $this->getTaxPolicyListRequest($from, $to, $interval, $size, $next_page_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\TaxPolicyList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTaxPolicyListAsync
     *
     * Get list of tax policies
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaxPolicyListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null)
    {
        return $this->getTaxPolicyListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTaxPolicyListAsyncWithHttpInfo
     *
     * Get list of tax policies
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTaxPolicyListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null)
    {
        $returnType = '\Reepay\Model\TaxPolicyList';
        $request = $this->getTaxPolicyListRequest($from, $to, $interval, $size, $next_page_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTaxPolicyList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTaxPolicyListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null)
    {

        $resourcePath = '/v1/list/tax_policy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionList
     *
     * Get list of transactions
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string[] $type type (optional)
     * @param  string[] $state state (optional)
     * @param  string[] $payment_type payment_type (optional)
     * @param  string $invoice invoice (optional)
     * @param  string[] $currency currency (optional)
     * @param  string $amount amount (optional)
     * @param  string[] $card_type card_type (optional)
     * @param  string[] $transaction_card_type transaction_card_type (optional)
     * @param  string $card_prefix card_prefix (optional)
     * @param  string $card_postfix card_postfix (optional)
     * @param  string $card_fingerprint card_fingerprint (optional)
     * @param  string[] $card_country card_country (optional)
     * @param  string $card_gateway card_gateway (optional)
     * @param  string $payment_method payment_method (optional)
     * @param  string $card_acquirer_code card_acquirer_code (optional)
     * @param  string $card_error_state card_error_state (optional)
     * @param  string $card_error card_error (optional)
     * @param  string $payment_context payment_context (optional)
     * @param  string $card_acquirer_reference card_acquirer_reference (optional)
     * @param  string $frictionless frictionless (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\TransactionList
     */
    public function getTransactionList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $type = null, $state = null, $payment_type = null, $invoice = null, $currency = null, $amount = null, $card_type = null, $transaction_card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $payment_method = null, $card_acquirer_code = null, $card_error_state = null, $card_error = null, $payment_context = null, $card_acquirer_reference = null, $frictionless = null)
    {
        list($response) = $this->getTransactionListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $type, $state, $payment_type, $invoice, $currency, $amount, $card_type, $transaction_card_type, $card_prefix, $card_postfix, $card_fingerprint, $card_country, $card_gateway, $payment_method, $card_acquirer_code, $card_error_state, $card_error, $payment_context, $card_acquirer_reference, $frictionless);
        return $response;
    }

    /**
     * Operation getTransactionListWithHttpInfo
     *
     * Get list of transactions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string[] $type (optional)
     * @param  string[] $state (optional)
     * @param  string[] $payment_type (optional)
     * @param  string $invoice (optional)
     * @param  string[] $currency (optional)
     * @param  string $amount (optional)
     * @param  string[] $card_type (optional)
     * @param  string[] $transaction_card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     * @param  string[] $card_country (optional)
     * @param  string $card_gateway (optional)
     * @param  string $payment_method (optional)
     * @param  string $card_acquirer_code (optional)
     * @param  string $card_error_state (optional)
     * @param  string $card_error (optional)
     * @param  string $payment_context (optional)
     * @param  string $card_acquirer_reference (optional)
     * @param  string $frictionless (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\TransactionList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $type = null, $state = null, $payment_type = null, $invoice = null, $currency = null, $amount = null, $card_type = null, $transaction_card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $payment_method = null, $card_acquirer_code = null, $card_error_state = null, $card_error = null, $payment_context = null, $card_acquirer_reference = null, $frictionless = null)
    {
        $returnType = '\Reepay\Model\TransactionList';
        $request = $this->getTransactionListRequest($from, $to, $interval, $size, $next_page_token, $range, $type, $state, $payment_type, $invoice, $currency, $amount, $card_type, $transaction_card_type, $card_prefix, $card_postfix, $card_fingerprint, $card_country, $card_gateway, $payment_method, $card_acquirer_code, $card_error_state, $card_error, $payment_context, $card_acquirer_reference, $frictionless);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\TransactionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionListAsync
     *
     * Get list of transactions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string[] $type (optional)
     * @param  string[] $state (optional)
     * @param  string[] $payment_type (optional)
     * @param  string $invoice (optional)
     * @param  string[] $currency (optional)
     * @param  string $amount (optional)
     * @param  string[] $card_type (optional)
     * @param  string[] $transaction_card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     * @param  string[] $card_country (optional)
     * @param  string $card_gateway (optional)
     * @param  string $payment_method (optional)
     * @param  string $card_acquirer_code (optional)
     * @param  string $card_error_state (optional)
     * @param  string $card_error (optional)
     * @param  string $payment_context (optional)
     * @param  string $card_acquirer_reference (optional)
     * @param  string $frictionless (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $type = null, $state = null, $payment_type = null, $invoice = null, $currency = null, $amount = null, $card_type = null, $transaction_card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $payment_method = null, $card_acquirer_code = null, $card_error_state = null, $card_error = null, $payment_context = null, $card_acquirer_reference = null, $frictionless = null)
    {
        return $this->getTransactionListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $type, $state, $payment_type, $invoice, $currency, $amount, $card_type, $transaction_card_type, $card_prefix, $card_postfix, $card_fingerprint, $card_country, $card_gateway, $payment_method, $card_acquirer_code, $card_error_state, $card_error, $payment_context, $card_acquirer_reference, $frictionless)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionListAsyncWithHttpInfo
     *
     * Get list of transactions
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string[] $type (optional)
     * @param  string[] $state (optional)
     * @param  string[] $payment_type (optional)
     * @param  string $invoice (optional)
     * @param  string[] $currency (optional)
     * @param  string $amount (optional)
     * @param  string[] $card_type (optional)
     * @param  string[] $transaction_card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     * @param  string[] $card_country (optional)
     * @param  string $card_gateway (optional)
     * @param  string $payment_method (optional)
     * @param  string $card_acquirer_code (optional)
     * @param  string $card_error_state (optional)
     * @param  string $card_error (optional)
     * @param  string $payment_context (optional)
     * @param  string $card_acquirer_reference (optional)
     * @param  string $frictionless (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $type = null, $state = null, $payment_type = null, $invoice = null, $currency = null, $amount = null, $card_type = null, $transaction_card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $payment_method = null, $card_acquirer_code = null, $card_error_state = null, $card_error = null, $payment_context = null, $card_acquirer_reference = null, $frictionless = null)
    {
        $returnType = '\Reepay\Model\TransactionList';
        $request = $this->getTransactionListRequest($from, $to, $interval, $size, $next_page_token, $range, $type, $state, $payment_type, $invoice, $currency, $amount, $card_type, $transaction_card_type, $card_prefix, $card_postfix, $card_fingerprint, $card_country, $card_gateway, $payment_method, $card_acquirer_code, $card_error_state, $card_error, $payment_context, $card_acquirer_reference, $frictionless);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string[] $type (optional)
     * @param  string[] $state (optional)
     * @param  string[] $payment_type (optional)
     * @param  string $invoice (optional)
     * @param  string[] $currency (optional)
     * @param  string $amount (optional)
     * @param  string[] $card_type (optional)
     * @param  string[] $transaction_card_type (optional)
     * @param  string $card_prefix (optional)
     * @param  string $card_postfix (optional)
     * @param  string $card_fingerprint (optional)
     * @param  string[] $card_country (optional)
     * @param  string $card_gateway (optional)
     * @param  string $payment_method (optional)
     * @param  string $card_acquirer_code (optional)
     * @param  string $card_error_state (optional)
     * @param  string $card_error (optional)
     * @param  string $payment_context (optional)
     * @param  string $card_acquirer_reference (optional)
     * @param  string $frictionless (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $type = null, $state = null, $payment_type = null, $invoice = null, $currency = null, $amount = null, $card_type = null, $transaction_card_type = null, $card_prefix = null, $card_postfix = null, $card_fingerprint = null, $card_country = null, $card_gateway = null, $payment_method = null, $card_acquirer_code = null, $card_error_state = null, $card_error = null, $payment_context = null, $card_acquirer_reference = null, $frictionless = null)
    {

        $resourcePath = '/v1/list/transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, 'multi', true);
        }
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if (is_array($state)) {
            $state = ObjectSerializer::serializeCollection($state, 'multi', true);
        }
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if (is_array($payment_type)) {
            $payment_type = ObjectSerializer::serializeCollection($payment_type, 'multi', true);
        }
        if ($payment_type !== null) {
            $queryParams['payment_type'] = ObjectSerializer::toQueryValue($payment_type, null);
        }
        // query params
        if ($invoice !== null) {
            $queryParams['invoice'] = ObjectSerializer::toQueryValue($invoice, null);
        }
        // query params
        if (is_array($currency)) {
            $currency = ObjectSerializer::serializeCollection($currency, 'multi', true);
        }
        if ($currency !== null) {
            $queryParams['currency'] = ObjectSerializer::toQueryValue($currency, null);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount, null);
        }
        // query params
        if (is_array($card_type)) {
            $card_type = ObjectSerializer::serializeCollection($card_type, 'multi', true);
        }
        if ($card_type !== null) {
            $queryParams['card_type'] = ObjectSerializer::toQueryValue($card_type, null);
        }
        // query params
        if (is_array($transaction_card_type)) {
            $transaction_card_type = ObjectSerializer::serializeCollection($transaction_card_type, 'multi', true);
        }
        if ($transaction_card_type !== null) {
            $queryParams['transaction_card_type'] = ObjectSerializer::toQueryValue($transaction_card_type, null);
        }
        // query params
        if ($card_prefix !== null) {
            $queryParams['card_prefix'] = ObjectSerializer::toQueryValue($card_prefix, null);
        }
        // query params
        if ($card_postfix !== null) {
            $queryParams['card_postfix'] = ObjectSerializer::toQueryValue($card_postfix, null);
        }
        // query params
        if ($card_fingerprint !== null) {
            $queryParams['card_fingerprint'] = ObjectSerializer::toQueryValue($card_fingerprint, null);
        }
        // query params
        if (is_array($card_country)) {
            $card_country = ObjectSerializer::serializeCollection($card_country, 'multi', true);
        }
        if ($card_country !== null) {
            $queryParams['card_country'] = ObjectSerializer::toQueryValue($card_country, null);
        }
        // query params
        if ($card_gateway !== null) {
            $queryParams['card_gateway'] = ObjectSerializer::toQueryValue($card_gateway, null);
        }
        // query params
        if ($payment_method !== null) {
            $queryParams['payment_method'] = ObjectSerializer::toQueryValue($payment_method, null);
        }
        // query params
        if ($card_acquirer_code !== null) {
            $queryParams['card_acquirer_code'] = ObjectSerializer::toQueryValue($card_acquirer_code, null);
        }
        // query params
        if ($card_error_state !== null) {
            $queryParams['card_error_state'] = ObjectSerializer::toQueryValue($card_error_state, null);
        }
        // query params
        if ($card_error !== null) {
            $queryParams['card_error'] = ObjectSerializer::toQueryValue($card_error, null);
        }
        // query params
        if ($payment_context !== null) {
            $queryParams['payment_context'] = ObjectSerializer::toQueryValue($payment_context, null);
        }
        // query params
        if ($card_acquirer_reference !== null) {
            $queryParams['card_acquirer_reference'] = ObjectSerializer::toQueryValue($card_acquirer_reference, null);
        }
        // query params
        if ($frictionless !== null) {
            $queryParams['frictionless'] = ObjectSerializer::toQueryValue($frictionless, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebhookList
     *
     * Get list of webhooks
     *
     * @param  string $from from (optional)
     * @param  string $to to (optional)
     * @param  string $interval interval (optional)
     * @param  int $size size (optional, default to 20)
     * @param  string $next_page_token next_page_token (optional)
     * @param  string $range range (optional, default to created)
     * @param  string $state state (optional)
     * @param  string $event event (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Reepay\Model\WebhookList
     */
    public function getWebhookList($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $state = null, $event = null)
    {
        list($response) = $this->getWebhookListWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $state, $event);
        return $response;
    }

    /**
     * Operation getWebhookListWithHttpInfo
     *
     * Get list of webhooks
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $state (optional)
     * @param  string $event (optional)
     *
     * @throws \Reepay\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Reepay\Model\WebhookList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebhookListWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $state = null, $event = null)
    {
        $returnType = '\Reepay\Model\WebhookList';
        $request = $this->getWebhookListRequest($from, $to, $interval, $size, $next_page_token, $range, $state, $event);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\WebhookList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Reepay\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebhookListAsync
     *
     * Get list of webhooks
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $state (optional)
     * @param  string $event (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookListAsync($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $state = null, $event = null)
    {
        return $this->getWebhookListAsyncWithHttpInfo($from, $to, $interval, $size, $next_page_token, $range, $state, $event)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebhookListAsyncWithHttpInfo
     *
     * Get list of webhooks
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $state (optional)
     * @param  string $event (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookListAsyncWithHttpInfo($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $state = null, $event = null)
    {
        $returnType = '\Reepay\Model\WebhookList';
        $request = $this->getWebhookListRequest($from, $to, $interval, $size, $next_page_token, $range, $state, $event);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebhookList'
     *
     * @param  string $from (optional)
     * @param  string $to (optional)
     * @param  string $interval (optional)
     * @param  int $size (optional, default to 20)
     * @param  string $next_page_token (optional)
     * @param  string $range (optional, default to created)
     * @param  string $state (optional)
     * @param  string $event (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWebhookListRequest($from = null, $to = null, $interval = null, $size = '20', $next_page_token = null, $range = 'created', $state = null, $event = null)
    {

        $resourcePath = '/v1/list/webhook';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($interval !== null) {
            $queryParams['interval'] = ObjectSerializer::toQueryValue($interval, null);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size, 'int32');
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token, null);
        }
        // query params
        if ($range !== null) {
            $queryParams['range'] = ObjectSerializer::toQueryValue($range, null);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($event !== null) {
            $queryParams['event'] = ObjectSerializer::toQueryValue($event, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
